name: ai-review
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:
  changes:
    name: detect/changes
    runs-on: ubuntu-latest
    outputs:
      elixir: ${{ steps.filter.outputs.elixir }}
      typescript: ${{ steps.filter.outputs.typescript }}
      ui: ${{ steps.filter.outputs.ui }}
      requirements: ${{ steps.filter.outputs.requirements }}
      security: ${{ steps.filter.outputs.security }}
      performance: ${{ steps.filter.outputs.performance }}
      roles: ${{ steps.build_matrix.outputs.roles }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Debug changed files
        run: |
          echo "Base ref: ${{ github.base_ref }} | Head ref: ${{ github.head_ref }}"
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          echo "Changed files (GitHub API reports): ${{ github.event.pull_request.changed_files }}"
          echo "Changed files (git diff --name-only):"
          git diff --name-only origin/${{ github.base_ref }}...HEAD || true
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            elixir:
              - 'lib/**/*.ex'
              - 'lib/**/*.exs'
              - 'test/**/*.exs'
            typescript:
              - 'assets/src/**/*.ts'
              - 'assets/src/**/*.tsx'
            ui:
              - 'assets/src/**/*'
              - 'lib/**/*.heex'
              - 'lib/**/*.leex'
              - 'lib/**/live/**/*.ex'
            requirements:
              - 'docs/features/**'
              - '.review/**'
            security:
              - 'lib/**/plugs/**'
              - 'lib/oli_web/user_auth.ex'
              - 'lib/oli/accounts/**'
              - 'lib/oli/lti/**'
              - 'config/**'
            performance:
              - 'lib/oli/delivery/**'
              - 'lib/oli/publishing/**'
              - 'lib/oli/resources/**'
              - 'lib/oli/activities/**'

      - id: build_matrix
        name: Build matrix roles
        shell: bash
        run: |
          roles=()
          [[ "${{ steps.filter.outputs.elixir }}" == 'true' ]] && roles+=("elixir")
          [[ "${{ steps.filter.outputs.typescript }}" == 'true' ]] && roles+=("typescript")
          [[ "${{ steps.filter.outputs.ui }}" == 'true' ]] && roles+=("ui")
          [[ "${{ steps.filter.outputs.security }}" == 'true' ]] && roles+=("security")
          [[ "${{ steps.filter.outputs.performance }}" == 'true' ]] && roles+=("performance")
          [[ "${{ steps.filter.outputs.requirements }}" == 'true' ]] && roles+=("requirements")
          # Ensure at least one role runs; default to 'requirements'
          if [ ${#roles[@]} -eq 0 ]; then roles+=("requirements"); fi
          # Always run performance and security; de-duplicate at JSON stage
          json=$(printf '%s\n' "${roles[@]}" performance security | jq -R . | jq -c -s 'unique')
          echo "roles=${json}" >> "$GITHUB_OUTPUT"

  specialist:
    name: ai/${{ matrix.role }}
    runs-on: ubuntu-latest
    needs: [changes]
    strategy:
      matrix:
        role: ${{ fromJSON(needs.changes.outputs.roles) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensure history for robust diffs/merge-base
      - name: Echo role being run
        run: |
          echo "Running reviewer role: ${{ matrix.role }}"
          echo "Filter outputs: elixir=${{ needs.changes.outputs.elixir }}, ts=${{ needs.changes.outputs.typescript }}, ui=${{ needs.changes.outputs.ui }}, perf=${{ needs.changes.outputs.performance }}, sec=${{ needs.changes.outputs.security }}, req=${{ needs.changes.outputs.requirements }}"

      - name: Generate PR diff
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEADSHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE=$(git rev-parse HEAD^)
            HEADSHA=$(git rev-parse HEAD)
          fi
          # Fetch the exact SHAs (works with forks and shallow clones)
          git fetch --no-tags --prune --depth=1 origin "+${BASE}" "+${HEADSHA}"
          # Produce a diff between the two trees (no merge-base required)
          git diff --unified=0 "${BASE}" "${HEADSHA}" > diff.patch
          # Ensure file exists (do not truncate if already written)
          [ -f diff.patch ] || touch diff.patch

      - name: Install Codex CLI
        run: npm i -g @openai/codex

      - name: Run Codex reviewer (diff-first, self-serve context)
        id: run
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          IS_FORK: ${{ github.event.pull_request.head.repo.fork }}
        run: |
          set -euo pipefail
          mkdir -p ai
          ROLE="${{ matrix.role }}"
          export ROLE

          {
            echo "You are a specialist reviewer for ${ROLE}.";
            echo "PRIMARY SOURCE: the DIFF below.";
            echo "If the DIFF is insufficient to judge correctness/safety, you MAY open files in the workspace to gather LIMITED context.";
            echo "ALLOWED PATHS: lib/**, assets/src/**, config/**, priv/repo/migrations/**";
            echo "DENYLIST: node_modules/**, deps/**, build/**, _build/**, .git/**";
            echo "Limits: at most 5 extra files total, and ≤1000 lines per file. Prefer narrow ranges near the changed lines.";
            echo "";
            echo "Return ONLY well-structured Markdown with one or more findings; if none, write 'No issues found'.";
            echo "For each finding, use this exact format:";
            echo "### <short title>";
            echo "file: <path>, line: <line number>";
            echo "Description: <what/why this is a problem in this codebase>";
            echo "Suggestion: <specific, actionable code change>";
            echo "";
            echo "Rules:";
            echo "- Focus on changed lines; use extra context only when necessary.";
            echo "- Fail only for truly blocking issues; include file+line and a concrete fix.";
            echo "- Confidence = 0..1.";
            echo "";
            echo "---CHECKLIST START---";
            [ -f ".review/${ROLE}.md" ] && cat ".review/${ROLE}.md" || echo "(no checklist for ${ROLE})";
            echo "---CHECKLIST END---";
            echo "---DIFF START---";
            head -c 150000 diff.patch;
            echo "---DIFF END---";
          } > ai/prompt.${ROLE}.txt

          # Debug output suppressed for cleaner logs

          # Run Codex reviewer (non-streaming output). Some versions don't support --no-stream;
          # relying on default behavior with --stdin and --format json.
          # Feed prompt via STDIN (portable across Codex CLI versions)
          # If diff is empty, short-circuit with a PASS
          if [[ ! -s diff.patch ]]; then
            echo '{"verdict":"pass","confidence":0.8,"summary":"Empty diff","findings":[],"context_used":[]}' > ai/${ROLE}.json
            exit 0
          fi

          # Fork/secret guard: on forks or missing key, emit WARN and skip Codex
          if [ "${IS_FORK:-false}" = "true" ] || [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "Forked PR or missing OPENAI_API_KEY; emitting WARN and skipping Codex."
            printf '%s\n' \
              '{' \
              '  "verdict": "warn",' \
              '  "confidence": 0.2,' \
              '  "summary": "AI reviewer skipped (forked PR or missing OPENAI_API_KEY).",' \
              '  "findings": [],' \
              '  "context_used": []' \
              '}' > ai/${ROLE}.json
            exit 0
          fi

          # Ensure Codex config dir under HOME is writable and exists
          mkdir -p ~/.codex
          chmod -R u+rw ~/.codex || true

          KEY="${OPENAI_API_KEY}"
          export OPENAI_API_KEY="$KEY"
          echo "Codex binary: $(command -v codex || echo 'not found')"
          codex --version || true

          codex login --api-key "${OPENAI_API_KEY}"

          codex exec --full-auto --skip-git-repo-check < ai/prompt.${ROLE}.txt > ai/${ROLE}.raw.txt || true

          # Debug output suppressed for cleaner logs

      - name: Post per-role review comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const role = `"${{ matrix.role }}"`.replace(/"/g,'');
            const header = `<!-- ai-review:${role} -->\n### AI Review — ${role}`;
            let bodyText = '';
            try {
              bodyText = fs.readFileSync(`ai/${role}.raw.txt`, 'utf8');
            } catch {}
            if (!bodyText || !bodyText.trim()) bodyText = 'No issues found';
            const body = `${header}\n\n${bodyText}`;
            // Upsert a single sticky comment per role
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
              per_page: 100
            });
            const marker = `<!-- ai-review:${role} -->`;
            const existing = comments.find(c => c.user && c.user.type === 'Bot' && typeof c.body === 'string' && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - uses: actions/upload-artifact@v4
        with:
          name: ai-results-${{ matrix.role }}
          path: ai/${{ matrix.role }}.json
          if-no-files-found: error


      - name: Ensure no repo changes (tracked files only)
        run: |
          git status --porcelain --untracked-files=no
          test -z "$(git status --porcelain --untracked-files=no)" || (echo "Workspace mutated!"; git --no-pager diff; exit 1)

  # aggregate job removed per request; per-role comments are posted by each specialist job
