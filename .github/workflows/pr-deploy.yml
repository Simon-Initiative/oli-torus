name: PR Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "master"

# Limit concurrent PR deployments to prevent resource exhaustion
concurrency:
  group: pr-preview-${{ github.repository }}
  cancel-in-progress: false # Don't cancel running deployments

jobs:
  simon-token-available:
    name: Check if simon-bot access token is available
    runs-on: ubuntu-latest
    outputs:
      available: ${{ steps.check_token.outputs.available }}
    steps:
      - name: Check whether SIMON_BOT_PERSONAL_ACCESS_TOKEN is set
        id: check_token
        run: echo "available=$(if [ "${{ secrets.SIMON_BOT_PERSONAL_ACCESS_TOKEN }}" != "" ] ; then echo true ; else echo false ; fi)" >> $GITHUB_OUTPUT

  build-container:
    runs-on: ubuntu-latest
    needs: simon-token-available
    if: needs.simon-token-available.outputs.available == 'true'
    permissions:
      contents: read
      packages: write

    outputs:
      app_version: ${{ steps.info.outputs.app_version }}
      sha_short: ${{ steps.info.outputs.sha_short }}

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref_name }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: üßæ Build info
        id: info
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "app_version=$(cat mix.exs | grep version | sed -e 's/.*version: "\(.*\)",/\1/')" >> $GITHUB_OUTPUT

      - name: üßæ Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/simon-initiative/oli-torus
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: üîë Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # builds the official oli-torus app image
      - name: üê≥ Docker Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: APP_VERSION=${{ steps.info.outputs.app_version }}
            SHA_SHORT=${{ steps.info.outputs.sha_short }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  pr-preview-deploy:
    name: PR Preview Deploy
    runs-on: plasma
    needs: build-container
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref_name }}

      - name: üßæ Build info
        id: info
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üîë Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Pull Docker image
        run: |
          docker pull ghcr.io/simon-initiative/oli-torus:sha-${{ steps.info.outputs.sha_short }}

      - name: üìë Preflight check
        id: preflight
        run: |
          # Get available memory in MB
          AVAILABLE_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $7}')
          REQUIRED_MEMORY=1024  # Require at least 1GB available
          CURRENT_PR_COUNT=$(docker ps --filter "name=pr" -q | wc -l)

          echo "üìä Current system status:"
          echo "  Available memory: ${AVAILABLE_MEMORY}MB"
          echo "  Required memory: ${REQUIRED_MEMORY}MB"
          echo "  Current PR environments: ${CURRENT_PR_COUNT}"

          if [ $AVAILABLE_MEMORY -lt $REQUIRED_MEMORY ]; then
            echo "‚ùå Insufficient memory available. Need at least ${REQUIRED_MEMORY}MB, but only ${AVAILABLE_MEMORY}MB available."
            echo "memory_insufficient=true" >> $GITHUB_OUTPUT
            echo "available_memory=${AVAILABLE_MEMORY}" >> $GITHUB_OUTPUT
            echo "current_pr_count=${CURRENT_PR_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Sufficient memory available for deployment"
            echo "memory_insufficient=false" >> $GITHUB_OUTPUT
          fi

      - name: üí¨ Post memory error comment
        if: steps.preflight.outputs.memory_insufficient == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.SIMON_BOT_PERSONAL_ACCESS_TOKEN }}
          issue-number: ${{ github.event.number }}
          body: |
            ‚ö†Ô∏è **PR Preview deployment skipped due to insufficient memory**

            **Current system status:**
            - Available memory: ${{ steps.preflight.outputs.available_memory }}MB
            - Required memory: 1024MB
            - Active PR environments: ${{ steps.preflight.outputs.current_pr_count }}

            **What you can do:**
            - Wait for other PR previews to be cleaned up automatically
            - Ask maintainers to manually clean up old PR environments
            - Try again later when system resources are available

            The deployment will automatically retry when you push new commits to this PR.

            *Last checked: ${{ github.event.pull_request.updated_at }}*

      - name: üöÄ Deploy PR stack
        if: steps.preflight.outputs.memory_insufficient != 'true'
        run: |
          export PROJECT=${{ github.event.inputs.branch && format('branch-{0}', github.event.inputs.branch) || format('pr{0}', github.event.number) }} | cut -c1-16
          export APP_IMAGE_TAG=${{ github.sha }}
          export HOST=pr${{ github.event.number }}.plasma.oli.cmu.edu

          # Setup database
          docker-compose -p $PROJECT -f devops/docker-compose.yml run --rm app /app/bin/oli eval "Oli.Release.setup"

          # Run minio first and wait for it to be ready
          docker-compose -p $PROJECT -f devops/docker-compose.yml up -d minio && sleep 5

          # Create minio buckets and set policies
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc mb --ignore-existing localminio/torus-media"
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc mb --ignore-existing localminio/torus-xapi"
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc mb --ignore-existing localminio/torus-blob-dev"

          # Set minio bucket policies
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc anonymous set public localminio/torus-media"
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc anonymous set public localminio/torus-xapi"
          docker-compose -p $PROJECT -f devops/docker-compose.yml exec minio /bin/sh -c "mc alias set localminio http://localhost:9000 minio-user minio-password && mc anonymous set public localminio/torus-blob-dev"

          # Run stack
          docker-compose -p $PROJECT -f devops/docker-compose.yml up -d

      - name: ‚è≥ Wait for PR Preview to be available
        if: steps.preflight.outputs.memory_insufficient != 'true'
        run: |
          export HOST=pr${{ github.event.number }}.plasma.oli.cmu.edu
          for i in {1..30}; do
            if curl -k -fsSL --max-time 5 https://$HOST/healthz; then
              echo "Preview is up!"
              exit 0
            fi
            echo "Waiting for preview to be available... ($i)"
            sleep 10
          done
          echo "Preview did not become available in time." >&2
          exit 1

      - name: üîç Find existing PR preview comment
        if: steps.preflight.outputs.memory_insufficient != 'true'
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          token: ${{ secrets.SIMON_BOT_PERSONAL_ACCESS_TOKEN }}
          issue-number: ${{ github.event.number }}
          comment-author: "simon-bot"
          body-includes: "PR preview deployed at:"

      - name: üí¨ Post/Update PR Preview URL Comment
        if: steps.preflight.outputs.memory_insufficient != 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.SIMON_BOT_PERSONAL_ACCESS_TOKEN }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: |
            PR preview deployed at: https://pr${{ github.event.number }}.plasma.oli.cmu.edu
          edit-mode: replace
