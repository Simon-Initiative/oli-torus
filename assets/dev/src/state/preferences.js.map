{"version":3,"file":"preferences.js","sourceRoot":"","sources":["../../../src/state/preferences.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAIhC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAEL,gBAAgB,IAAI,uBAAuB,EAC3C,iBAAiB,IAAI,wBAAwB,GAC9C,MAAM,8BAA8B,CAAC;AAMtC,MAAM,CAAC,MAAM,kBAAkB,GAAuB,gCAAgC,CAAC;AAOvF,MAAM,CAAC,MAAM,iBAAiB,GAC5B,CAAC,WAAiC,EAAE,EAAE,CACtC,CAAO,QAA0B,EAAE,QAAqB,EAAE,EAAE;IAC1D,wDAAwD;IACxD,MAAM,aAAa,GAAG,QAAQ,EAAE,CAAC;IAEjC,IAAI;QACF,kCAAkC;QAClC,QAAQ,CAAC;YACP,IAAI,EAAE,kBAAkB;YACxB,WAAW;SACZ,CAAC,CAAC;QAEH,MAAM,wBAAwB,CAAC,WAAW,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjB,2CAA2C;QAC3C,QAAQ,CAAC;YACP,IAAI,EAAE,kBAAkB;YACxB,WAAW,EAAE,aAAa,CAAC,WAAW,CAAC,WAAW;SACnD,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CAAC;AAIJ,MAAM,CAAC,MAAM,gBAAgB,GAAqB,8BAA8B,CAAC;AAOjF,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CAAO,QAA0B,EAAE,QAAqB,EAAE,EAAE;IAC/F,wDAAwD;IACxD,MAAM,WAAW,GAAG,MAAM,uBAAuB,EAAE,CAAC;IAEpD,QAAQ,CAAC;QACP,IAAI,EAAE,gBAAgB;QACtB,WAAW;KACZ,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AAUF,MAAM,QAAQ,GAAG,CAAC,SAA0C,EAAE,EAA0B,EAAE,CAAC,CAAC;IAC1F,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;CAC1D,CAAC,CAAC;AAEH,MAAM,OAAO,gBAAiB,SAAQ,MAAM,CAAC,QAAQ,EAAE,CAAC;IAGtD,YAAY,MAAwC;QAClD,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,IAAI,CAAC,MAAuC;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAS,CAAC;IACpC,CAAC;CACF;AAED,iBAAiB;AAEjB,MAAM,CAAC,MAAM,YAAY,GAAqB,IAAI,gBAAgB,EAAE,CAAC;AAErE,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,QAA0B,YAAY,EACtC,MAA0B,EACR,EAAE;IACpB,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,kBAAkB;YACrB,OAAO,KAAK,CAAC,IAAI,CAAC;gBAChB,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC;aAC7C,CAAC,CAAC;QACL,KAAK,gBAAgB;YACnB,OAAO,KAAK,CAAC,IAAI,CAAC;gBAChB,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC;aAC7C,CAAC,CAAC;QACL;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC","sourcesContent":["import { Record } from 'immutable';\nimport { Maybe } from 'tsmonad';\nimport { OtherAction } from 'state/other';\nimport { Dispatch, Action } from 'redux';\nimport { State } from 'state';\nimport { valueOr } from 'utils/common';\nimport {\n  Preferences,\n  fetchPreferences as fetchPreferencesRequest,\n  updatePreferences as updatePreferencesRequest,\n} from 'data/persistence/preferences';\n\n//// ACTIONS ////\n\n// update preferences\nexport type UPDATE_PREFERENCES = 'preferences/UPDATE_PREFERENCES';\nexport const UPDATE_PREFERENCES: UPDATE_PREFERENCES = 'preferences/UPDATE_PREFERENCES';\n\nexport type UpdatePreferencesAction = {\n  type: UPDATE_PREFERENCES;\n  preferences: Preferences;\n};\n\nexport const updatePreferences =\n  (preferences: Partial<Preferences>) =>\n  async (dispatch: Dispatch<Action>, getState: () => State) => {\n    // dispatch any async actions such as AJAX calls, etc...\n    const previousState = getState();\n\n    try {\n      // optimistically update the state\n      dispatch({\n        type: UPDATE_PREFERENCES,\n        preferences,\n      });\n\n      await updatePreferencesRequest(preferences);\n    } catch (e) {\n      console.error(e);\n\n      // reset to original state before the error\n      dispatch({\n        type: UPDATE_PREFERENCES,\n        preferences: previousState.preferences.preferences,\n      });\n    }\n  };\n\n// load preferences\nexport type LOAD_PREFERENCES = 'preferences/LOAD_PREFERENCES';\nexport const LOAD_PREFERENCES: LOAD_PREFERENCES = 'preferences/LOAD_PREFERENCES';\n\nexport type LoadPreferencesAction = {\n  type: LOAD_PREFERENCES;\n  preferences: Preferences;\n};\n\nexport const loadPreferences = () => async (dispatch: Dispatch<Action>, getState: () => State) => {\n  // dispatch any async actions such as AJAX calls, etc...\n  const preferences = await fetchPreferencesRequest();\n\n  dispatch({\n    type: LOAD_PREFERENCES,\n    preferences,\n  });\n};\n\nexport type PreferencesActions = LoadPreferencesAction | UpdatePreferencesAction | OtherAction;\n\n//// MODEL ////\n\ninterface PreferencesStateParams {\n  preferences: Maybe<Preferences>;\n}\n\nconst defaults = (params: Partial<PreferencesStateParams> = {}): PreferencesStateParams => ({\n  preferences: valueOr(params.preferences, Maybe.nothing()),\n});\n\nexport class PreferencesState extends Record(defaults()) implements PreferencesStateParams {\n  preferences: Maybe<Preferences>;\n\n  constructor(params?: Partial<PreferencesStateParams>) {\n    super(defaults(params));\n  }\n\n  with(values: Partial<PreferencesStateParams>) {\n    return this.merge(values) as this;\n  }\n}\n\n//// REDUCER ////\n\nexport const initialState: PreferencesState = new PreferencesState();\n\nexport const preferences = (\n  state: PreferencesState = initialState,\n  action: PreferencesActions,\n): PreferencesState => {\n  switch (action.type) {\n    case UPDATE_PREFERENCES:\n      return state.with({\n        preferences: Maybe.maybe(action.preferences),\n      });\n    case LOAD_PREFERENCES:\n      return state.with({\n        preferences: Maybe.maybe(action.preferences),\n      });\n    default:\n      return state;\n  }\n};\n"]}