{"version":3,"file":"store.js","sourceRoot":"","sources":["../../../src/state/store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,eAAe,EAAW,MAAM,OAAO,CAAC;AAC9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,WAAW,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC/C,OAAO,WAAW,MAAM,SAAS,CAAC;AAElC,MAAM,UAAU,cAAc,CAAC,YAAkB,EAAE,OAAiB;IAClE,MAAM,MAAM,GAAG,YAAY,CAAC;QAC1B,gBAAgB,EAAE,CAAC,KAAK,EAAE,EAAE;YAC1B,MAAM,QAAQ,GAAQ,EAAE,CAAC;YAEzB,sEAAsE;YACtE,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAClC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;oBACjB,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;iBAC/B;qBAAM;oBACL,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBACxB;aACF;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC;KACF,CAAC,CAAC;IAEH,IAAI,UAAU,CAAC;IACf,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;QAC1C,UAAU,GAAG,mBAAmB,CAAC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;KAClE;SAAM;QACL,UAAU,GAAG,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;KAC1D;IAED,uEAAuE;IACvE,qCAAqC;IACrC,MAAM,KAAK,GAAG,WAAW,CACvB,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAC/B,OAAO,IAAI,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,EAChE,UAAU,CACX,CAAC;IAEF,IAAK,MAAc,CAAC,GAAG,EAAE;QACtB,MAAc,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE;YACzC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { createStore, applyMiddleware, Reducer } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootReducer, { initState } from 'state';\nimport nextReducer from './index';\n\nexport function configureStore(initialState?: any, reducer?: Reducer) {\n  const logger = createLogger({\n    stateTransformer: (state) => {\n      const newState: any = {};\n\n      // automatically converts any immutablejs objects to JS representation\n      for (const i of Object.keys(state)) {\n        if (state[i].toJS) {\n          newState[i] = state[i].toJS();\n        } else {\n          newState[i] = state[i];\n        }\n      }\n      return newState;\n    },\n  });\n\n  let middleware;\n  if (process.env.NODE_ENV === 'development') {\n    middleware = composeWithDevTools(applyMiddleware(thunk, logger));\n  } else {\n    middleware = composeWithDevTools(applyMiddleware(thunk));\n  }\n\n  // For backwards compatibility - only use initial state without calling\n  // `initState` if a reducer is passed\n  const store = createStore(\n    reducer ? reducer : rootReducer,\n    reducer && initialState ? initialState : initState(initialState),\n    middleware,\n  );\n\n  if ((module as any).hot) {\n    (module as any).hot.accept('./index', () => {\n      store.replaceReducer(reducer ? reducer : nextReducer);\n    });\n  }\n\n  return store;\n}\n"]}