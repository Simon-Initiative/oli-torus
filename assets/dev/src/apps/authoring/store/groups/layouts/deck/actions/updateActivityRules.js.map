{"version":3,"file":"updateActivityRules.js","sourceRoot":"","sources":["../../../../../../../../../src/apps/authoring/store/groups/layouts/deck/actions/updateActivityRules.ts"],"names":[],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { findReferencedActivitiesInConditions } from 'adaptivity/rules-engine';\nimport { inferTypeFromOperatorAndValue } from 'apps/authoring/components/AdaptivityEditor/AdaptiveItemOptions';\nimport { findInSequence } from 'apps/delivery/store/features/groups/actions/sequence';\nimport { BulkActivityUpdate, bulkEdit } from 'data/persistence/activity';\nimport { isEqual } from 'lodash';\nimport { clone } from 'utils/common';\nimport guid from 'utils/guid';\nimport {\n  selectActivityById,\n  upsertActivities,\n} from '../../../../../../delivery/store/features/activities/slice';\nimport { GroupsSlice } from '../../../../../../delivery/store/features/groups/slice';\nimport { selectProjectSlug, selectReadOnly } from '../../../../app/slice';\nimport { selectResourceId } from '../../../../page/slice';\n\nconst updateNestedConditions = (conditions: any) => {\n  conditions.forEach((condition: any) => {\n    if (condition.fact && !condition.id) {\n      condition.id = `c:${guid()}`;\n    }\n    if (condition.fact && !condition.type) {\n      // because there might not be a type from an import, and the value might not actually be the type of the fact,\n      // we need to get the type based on the operator AND the value intelligently\n      condition.type = inferTypeFromOperatorAndValue(condition.operator, condition.value);\n    }\n    if (condition.any || condition.all) {\n      if (!condition.id) {\n        condition.id = `b:${guid()}`;\n      }\n      updateNestedConditions(condition.any || condition.all);\n    }\n  });\n};\n\nexport const updateActivityRules = createAsyncThunk(\n  `${GroupsSlice}/updateActivityRules`,\n  async (deck: any, { dispatch, getState }) => {\n    const rootState = getState() as any;\n    const isReadOnlyMode = selectReadOnly(rootState);\n\n    const activitiesToUpdate: any[] = [];\n\n    // console.log(`UPDATE RULES for ${deck.children.length} activities`, deck);\n    deck.children.forEach((child: any) => {\n      const childActivity = selectActivityById(rootState, child.resourceId);\n\n      if (!childActivity) {\n        console.warn(`[updateActivityRules] could not find activity ${child.resourceId}`);\n        return;\n      }\n\n      /* console.log(`[updateActivityRules] found activity ${child.resourceId}`, { childActivity }); */\n\n      const activityRules = childActivity?.authoring.rules || [];\n      const activityRulesClone = clone(activityRules);\n\n      const referencedSequenceIds: string[] = [];\n\n      // ensure that all conditions and condition blocks are assigned an id\n      activityRulesClone.forEach((rule: any) => {\n        const { conditions, forceProgress, event } = rule;\n        const rootCondition = clone(conditions || { all: [] }); // layers might not have conditions\n        const rootConditionIsAll = !!rootCondition.all;\n        const conditionsToUpdate = rootCondition[rootConditionIsAll ? 'all' : 'any'];\n        if (!rootCondition.id) {\n          rootCondition.id = `b:${guid()}`;\n        }\n        updateNestedConditions(conditionsToUpdate);\n        referencedSequenceIds.push(...findReferencedActivitiesInConditions(conditionsToUpdate));\n        rule.conditions = rootCondition;\n        if (forceProgress) {\n          const nav = rule.event.params.actions.find((action: any) => action.type === 'navigation');\n          if (!nav) {\n            rule.event.params.actions.push({ type: 'navigation', params: { target: 'next' } });\n          }\n        }\n      });\n\n      const childActivityClone = clone(childActivity);\n      const referencedActivityIds: number[] = Array.from(new Set(referencedSequenceIds))\n        .map((id) => {\n          const sequenceItem = findInSequence(deck.children, id);\n          if (sequenceItem) {\n            return sequenceItem.resourceId;\n          } else {\n            console.warn(\n              `[updateActivityRules] could not find referenced activity ${id} in sequence`,\n              deck,\n            );\n          }\n        })\n        .filter((id) => id) as number[];\n      if (\n        !isEqual(\n          childActivityClone.authoring.activitiesRequiredForEvaluation,\n          referencedActivityIds,\n        )\n      ) {\n        // console.log('RULE REFS: ', referencedActivityIds);\n        childActivityClone.authoring.activitiesRequiredForEvaluation = referencedActivityIds;\n        activitiesToUpdate.push(childActivityClone);\n      }\n      childActivityClone.authoring.rules = activityRulesClone;\n      /* console.log('CLONE RULES', { childActivityClone, childActivity }); */\n      if (!isEqual(childActivity.authoring.rules, childActivityClone.authoring.rules)) {\n        /* console.log('CLONE IS DIFFERENT!'); */\n        if (activitiesToUpdate.indexOf(childActivityClone) === -1) {\n          activitiesToUpdate.push(childActivityClone);\n        }\n      }\n    });\n\n    // console.log(`${activitiesToUpdate.length} ACTIVITIES TO UPDATE: `, activitiesToUpdate);\n\n    if (activitiesToUpdate.length) {\n      dispatch(upsertActivities({ activities: activitiesToUpdate }));\n      if (!isReadOnlyMode) {\n        const projectSlug = selectProjectSlug(rootState);\n        const pageResourceId = selectResourceId(rootState);\n        const updates: BulkActivityUpdate[] = activitiesToUpdate.map((activity) => {\n          const changeData: BulkActivityUpdate = {\n            title: activity.title,\n            objectives: activity.objectives,\n            content: activity.content,\n            authoring: activity.authoring,\n            resource_id: activity.resourceId,\n          };\n          return changeData;\n        });\n        await bulkEdit(projectSlug, pageResourceId, updates);\n      }\n    }\n    return;\n  },\n);\n"]}