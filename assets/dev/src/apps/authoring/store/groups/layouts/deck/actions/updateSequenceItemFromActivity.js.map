{"version":3,"file":"updateSequenceItemFromActivity.js","sourceRoot":"","sources":["../../../../../../../../../src/apps/authoring/store/groups/layouts/deck/actions/updateSequenceItemFromActivity.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAMpD,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EACL,WAAW,EAEX,WAAW,GACZ,MAAM,wDAAwD,CAAC;AAEhE,MAAM,CAAC,MAAM,8BAA8B,GAAG,gBAAgB,CAC5D,GAAG,WAAW,iCAAiC,EAC/C,CACE,OAGC,EACD,EAAE,QAAQ,EAAE,EACZ,EAAE;IACF,MAAM,EAAE,QAAQ,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC;IAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,aAAa,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAC7C,CAAC,KAAwC,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,KAAK,QAAQ,CAAC,UAAU,CACvF,CAAC;IACF,aAAa,CAAC,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC;IACnD,QAAQ,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IAC9C,0BAA0B;IAC1B,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,gBAAgB,CAChD,GAAG,WAAW,qBAAqB,EACnC,CACE,OAGC,EACD,EAAE,QAAQ,EAAE,EACZ,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;IACpC,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,aAAa,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAC7C,CAAC,KAAwC,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,MAAK,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,CAAA,CACxF,CAAC;IACF,aAAa,CAAC,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC;IACxC,QAAQ,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IAC9C,0BAA0B;IAC1B,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport {\n  SequenceBank,\n  SequenceEntry,\n  SequenceEntryChild,\n} from 'apps/delivery/store/features/groups/actions/sequence';\nimport { clone } from 'utils/common';\nimport {\n  GroupsSlice,\n  IGroup,\n  upsertGroup,\n} from '../../../../../../delivery/store/features/groups/slice';\n\nexport const updateSequenceItemFromActivity = createAsyncThunk(\n  `${GroupsSlice}/updateSequenceItemFromActivity`,\n  async (\n    payload: {\n      activity?: any;\n      group?: IGroup;\n    },\n    { dispatch },\n  ) => {\n    const { activity = {}, group = {} } = payload;\n    const clonedGroup = clone(group);\n    const sequenceEntry = clonedGroup.children.find(\n      (entry: SequenceEntry<SequenceEntryChild>) => entry.resourceId === activity.resourceId,\n    );\n    sequenceEntry.custom.sequenceName = activity.title;\n    dispatch(upsertGroup({ group: clonedGroup }));\n    // TODO: save it to a DB ?\n    return group;\n  },\n);\n\nexport const updateSequenceItem = createAsyncThunk(\n  `${GroupsSlice}/updateSequenceItem`,\n  async (\n    payload: {\n      sequence?: SequenceEntry<SequenceBank>;\n      group?: IGroup;\n    },\n    { dispatch },\n  ) => {\n    const { sequence, group } = payload;\n    const clonedGroup = clone(group);\n    const sequenceEntry = clonedGroup.children.find(\n      (entry: SequenceEntry<SequenceEntryChild>) => entry.resourceId === sequence?.resourceId,\n    );\n    sequenceEntry.custom = sequence?.custom;\n    dispatch(upsertGroup({ group: clonedGroup }));\n    // TODO: save it to a DB ?\n    return group;\n  },\n);\n"]}