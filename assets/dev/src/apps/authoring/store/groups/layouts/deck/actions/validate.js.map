{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../../../../../../src/apps/authoring/store/groups/layouts/deck/actions/validate.ts"],"names":[],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { AppSlice } from 'apps/authoring/store/app/slice';\nimport { selectAllActivities } from 'apps/delivery/store/features/activities/slice';\nimport {\n  findInHierarchy,\n  flattenHierarchy,\n  getHierarchy,\n  getSequenceLineage,\n} from 'apps/delivery/store/features/groups/actions/sequence';\nimport { selectSequence } from 'apps/delivery/store/features/groups/selectors/deck';\n\n// generate a suggestion for the id based on the input id that is only alpha numeric or underscores\nconst generateSuggestion = (id: string, dupBlacklist: string[] = []): string => {\n  let newId = id.replace(/[^a-zA-Z0-9_]/g, '');\n  if (dupBlacklist.includes(newId)) {\n    // if the last character of the id is already a number, increment it, otherwise add 1\n    const lastChar = newId.slice(-1);\n    if (lastChar.match(/[0-9]/)) {\n      const newLastChar = parseInt(lastChar, 10) + 1;\n      newId = `${newId.slice(0, -1)}${newLastChar}`;\n    } else {\n      newId = `${newId}1`;\n    }\n    return generateSuggestion(newId, dupBlacklist);\n  }\n  return newId;\n};\n\nexport const validatePartIds = createAsyncThunk<any, any, any>(\n  `${AppSlice}/validatePartIds`,\n  async (payload, { getState, fulfillWithValue }) => {\n    const rootState = getState();\n\n    const allActivities = selectAllActivities(rootState as any);\n    const sequence = selectSequence(rootState as any);\n    const hierarchy = getHierarchy(sequence);\n\n    /* console.log('validatePartIds', { allActivities }); */\n\n    const errors: any[] = [];\n\n    allActivities.forEach((activity) => {\n      const duplicates = activity.authoring.parts.filter((ref: any) => {\n        return activity.authoring.parts.filter((ref2: any) => ref2.id === ref.id).length > 1;\n      });\n\n      // also find problematic ids that are not alphanumeric or have underscores, colons, or spaces\n      const problematicIds = activity.authoring.parts.filter((ref: any) => {\n        return !ref.inherited && !/^[a-zA-Z0-9_\\-: ]+$/.test(ref.id);\n      });\n\n      if (duplicates.length > 0 || problematicIds.length > 0) {\n        const activitySequence = sequence.find((s) => s.resourceId === activity.id);\n\n        // id blacklist should include all parent ids, and all children ids\n        const lineageBlacklist = getSequenceLineage(sequence, activitySequence.custom.sequenceId)\n          .map((s) => allActivities.find((a) => a.id === s.resourceId))\n          .map((a) => a?.authoring.parts.map((ref: any) => ref.id))\n          .reduce((acc, cur) => acc.concat(cur), []);\n        const hierarchyItem = findInHierarchy(hierarchy, activitySequence.custom.sequenceId);\n        const childrenBlackList: string[] = flattenHierarchy(hierarchyItem?.children ?? [])\n          .map((s) => allActivities.find((a) => a.id === s.resourceId))\n          .map((a) => a?.authoring.parts.map((ref: any) => ref.id))\n          .reduce((acc, cur) => acc.concat(cur), []);\n        console.log('blacklists: ', { lineageBlacklist, childrenBlackList });\n        const testBlackList = Array.from(new Set([...lineageBlacklist, ...childrenBlackList]));\n\n        const dupErrors = duplicates.map((dup: any) => {\n          const dupSequence = sequence.find((s) => s.custom.sequenceId === dup.owner);\n          return {\n            ...dup,\n            owner: dupSequence,\n            suggestedFix: generateSuggestion(dup.id, testBlackList),\n          };\n        });\n        const problemIdErrors = problematicIds.map((problematicId: any) => {\n          const problematicIdSequence = sequence.find(\n            (s) => s.custom.sequenceId === problematicId.owner,\n          );\n          return {\n            ...problematicId,\n            owner: problematicIdSequence,\n            suggestedFix: generateSuggestion(problematicId.id, testBlackList),\n          };\n        });\n        errors.push({\n          activity: activitySequence,\n          duplicates: dupErrors,\n          problems: problemIdErrors,\n        });\n      }\n    });\n\n    return fulfillWithValue({ errors });\n  },\n);\n"]}