{"version":3,"file":"setCurrentActivityFromSequence.js","sourceRoot":"","sources":["../../../../../../../../../src/apps/authoring/store/groups/layouts/deck/actions/setCurrentActivityFromSequence.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,4DAA4D,CAAC;AAClG,OAAO,EAAE,cAAc,EAAE,MAAM,mEAAmE,CAAC;AACnG,OAAO,EAAE,cAAc,EAAE,MAAM,iEAAiE,CAAC;AACjG,OAAO,EAAE,WAAW,EAAE,MAAM,wDAAwD,CAAC;AAErF,MAAM,CAAC,MAAM,8BAA8B,GAAG,gBAAgB,CAC5D,GAAG,WAAW,8CAA8C,EAC5D,CAAO,UAAkB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IACnD,MAAM,KAAK,GAAQ,QAAQ,EAAE,CAAC;IAC9B,MAAM,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IACvC,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACvC;IACD,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;KACpC;IACD,2EAA2E;IAC3E,OAAO,QAAQ,CAAC,oBAAoB,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setCurrentActivityId } from '../../../../../../delivery/store/features/activities/slice';\nimport { findInSequence } from '../../../../../../delivery/store/features/groups/actions/sequence';\nimport { selectSequence } from '../../../../../../delivery/store/features/groups/selectors/deck';\nimport { GroupsSlice } from '../../../../../../delivery/store/features/groups/slice';\n\nexport const setCurrentActivityFromSequence = createAsyncThunk(\n  `${GroupsSlice}/layouts/deck/setCurrentActivityFromSequence`,\n  async (sequenceId: string, { dispatch, getState }) => {\n    const state: any = getState();\n    const sequence = selectSequence(state);\n    if (!sequence) {\n      console.error('Sequence not found');\n      throw new Error('Sequence not found');\n    }\n    const entry = findInSequence(sequence, sequenceId);\n    if (!entry) {\n      console.error('Entry not found');\n      throw new Error('Entry not found');\n    }\n    /* console.log('setCurrentActivityFromSequence', { sequenceId, entry }); */\n    return dispatch(setCurrentActivityId({ activityId: entry.resourceId }));\n  },\n);\n"]}