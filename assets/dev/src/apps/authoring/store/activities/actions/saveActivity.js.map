{"version":3,"file":"saveActivity.js","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/store/activities/actions/saveActivity.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAGpD,OAAO,EAAsC,QAAQ,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAC;AAC/F,OAAO,EACL,eAAe,EAEf,gBAAgB,EAChB,cAAc,GACf,MAAM,sDAAsD,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACpE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD,MAAM,CAAC,MAAM,YAAY,GAAG,gBAAgB,CAC1C,GAAG,eAAe,eAAe,EACjC,CAAO,OAAgC,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IACjE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAC7B,MAAM,SAAS,GAAG,QAAQ,EAAS,CAAC;IACpC,MAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAE/C,MAAM,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IAEjD,MAAM,UAAU,GAAmB;QACjC,KAAK,EAAE,QAAQ,CAAC,KAAe;QAC/B,UAAU,EAAE,QAAQ,CAAC,UAA0B;QAC/C,OAAO,kCAAO,QAAQ,CAAC,OAAO,KAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,GAAE;QAC/D,IAAI,EAAE,QAAQ,CAAC,IAAI;KACpB,CAAC;IAEF,IAAI,CAAC,cAAc,EAAE;QACnB,uEAAuE;QACvE,MAAM,WAAW,GAAG,MAAM,IAAI,CAC5B,WAAW,EACX,UAAU,EACV,QAAQ,CAAC,UAAoB,EAC7B,UAAU,EACV,KAAK,CACN,CAAC;QACF,wDAAwD;KACzD;IAED,MAAM,QAAQ,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC7C,OAAO;AACT,CAAC,CAAA,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,gBAAgB,CAC9C,GAAG,eAAe,mBAAmB,EACrC,CAAO,OAAoC,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IACrE,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAC/B,MAAM,SAAS,GAAG,QAAQ,EAAS,CAAC;IACpC,MAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACjD,MAAM,cAAc,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAEnD,MAAM,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IAEjD,QAAQ,CAAC,gBAAgB,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IAE3C,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,OAAO,GAAyB,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAChE,MAAM,UAAU,GAAuB;gBACrC,KAAK,EAAE,QAAQ,CAAC,KAAe;gBAC/B,UAAU,EAAE,QAAQ,CAAC,UAA0B;gBAC/C,OAAO,EAAE,QAAQ,CAAC,OAA8B;gBAChD,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,WAAW,EAAE,QAAQ,CAAC,UAAoB;aAC3C,CAAC;YACF,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,CAAC,WAAW,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KACtD;IACD,OAAO;AACT,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { ActivityModelSchema } from 'components/activities/types';\nimport { ObjectiveMap } from 'data/content/activity';\nimport { ActivityUpdate, BulkActivityUpdate, bulkEdit, edit } from 'data/persistence/activity';\nimport {\n  ActivitiesSlice,\n  IActivity,\n  upsertActivities,\n  upsertActivity,\n} from '../../../../delivery/store/features/activities/slice';\nimport { selectProjectSlug, selectReadOnly } from '../../app/slice';\nimport { selectResourceId } from '../../page/slice';\n\nexport const saveActivity = createAsyncThunk(\n  `${ActivitiesSlice}/saveActivity`,\n  async (payload: { activity: IActivity }, { dispatch, getState }) => {\n    const { activity } = payload;\n    const rootState = getState() as any;\n    const projectSlug = selectProjectSlug(rootState);\n    const resourceId = selectResourceId(rootState);\n\n    const isReadOnlyMode = selectReadOnly(rootState);\n\n    const changeData: ActivityUpdate = {\n      title: activity.title as string,\n      objectives: activity.objectives as ObjectiveMap,\n      content: { ...activity.content, authoring: activity.authoring },\n      tags: activity.tags,\n    };\n\n    if (!isReadOnlyMode) {\n      /* console.log('going to save acivity: ', { changeData, activity }); */\n      const editResults = await edit(\n        projectSlug,\n        resourceId,\n        activity.resourceId as number,\n        changeData,\n        false,\n      );\n      /* console.log('EDIT SAVE RESULTS', { editResults }); */\n    }\n\n    await dispatch(upsertActivity({ activity }));\n    return;\n  },\n);\n\nexport const bulkSaveActivity = createAsyncThunk(\n  `${ActivitiesSlice}/bulkSaveActivity`,\n  async (payload: { activities: IActivity[] }, { dispatch, getState }) => {\n    const { activities } = payload;\n    const rootState = getState() as any;\n    const projectSlug = selectProjectSlug(rootState);\n    const pageResourceId = selectResourceId(rootState);\n\n    const isReadOnlyMode = selectReadOnly(rootState);\n\n    dispatch(upsertActivities({ activities }));\n\n    if (!isReadOnlyMode) {\n      const updates: BulkActivityUpdate[] = activities.map((activity) => {\n        const changeData: BulkActivityUpdate = {\n          title: activity.title as string,\n          objectives: activity.objectives as ObjectiveMap,\n          content: activity.content as ActivityModelSchema,\n          authoring: activity.authoring,\n          resource_id: activity.resourceId as number,\n        };\n        return changeData;\n      });\n      await bulkEdit(projectSlug, pageResourceId, updates);\n    }\n    return;\n  },\n);\n"]}