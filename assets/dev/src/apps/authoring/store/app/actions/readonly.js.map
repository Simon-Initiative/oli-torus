{"version":3,"file":"readonly.js","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/store/app/actions/readonly.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAE/C,MAAM,CAAC,MAAM,sBAAsB,GAAG,gBAAgB,CACpD,GAAG,QAAQ,yBAAyB,EACpC,CAAO,OAAO,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,eAAe,EAAE,EAAE,EAAE;;IACzD,MAAM,SAAS,GAAG,QAAQ,EAAS,CAAC;IACpC,MAAM,UAAU,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IAE7C,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,kBAAkB;YACzB,GAAG,EAAE,kDAAkD;SACxD,CAAC,CAAC;KACJ;IAED,IAAI;QACF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,aAAa;QACtE,iEAAiE;QACjE,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,KAAK,WAAW,EAAE;YACjD,IAAI,KAAK,GAAG,aAAa,CAAC;YAC1B,MAAM,aAAa,GAAG,MAAA,MAAC,UAAkB,0CAAE,OAAO,0CAAE,KAAK,CAAC;YAC1D,IAAI,GAAG,GAAG,iCAAiC,CAAC;YAC5C,IAAI,aAAa,KAAK,gBAAgB,EAAE;gBACtC,GAAG,GAAG,MAAA,MAAC,UAAkB,0CAAE,OAAO,0CAAE,GAAG,CAAC;gBACxC,KAAK,GAAG,aAAa,CAAC;aACvB;YACD,IAAI,aAAa,KAAK,cAAc,EAAE;gBACpC,GAAG,GAAG,MAAA,MAAC,UAAkB,0CAAE,OAAO,0CAAE,GAAG,CAAC;gBACxC,KAAK,GAAG,iBAAiB,CAAC;aAC3B;YACD,OAAO,eAAe,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;SACxC;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,WAAW;YAClB,SAAS,EAAE,KAAK;YAChB,GAAG,EAAE,0CAA0C;SAChD,CAAC,CAAC;KACJ;IAED,kDAAkD;IAElD,QAAQ,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAE3C,OAAO;AACT,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { AppSlice, selectReadOnly, setReadonly } from '../slice';\nimport { acquireEditingLock } from './locking';\n\nexport const attemptDisableReadOnly = createAsyncThunk(\n  `${AppSlice}/attemptDisableReadOnly`,\n  async (payload, { dispatch, getState, rejectWithValue }) => {\n    const rootState = getState() as any;\n    const isReadOnly = selectReadOnly(rootState);\n\n    if (!isReadOnly) {\n      return rejectWithValue({\n        error: 'ALREADY_DISABLED',\n        msg: 'Cannot disable read-only mode, already disabled.',\n      });\n    }\n\n    try {\n      const lockResult = await dispatch(acquireEditingLock()); // .unwrap();\n      // console.log('attemptDisableReadOnly: lockResult', lockResult);\n      if (lockResult.meta.requestStatus !== 'fulfilled') {\n        let error = 'LOCK_FAILED';\n        const lockErrorCode = (lockResult as any)?.payload?.error;\n        let msg = 'Failed to acquire editing lock.';\n        if (lockErrorCode === 'ALREADY_LOCKED') {\n          msg = (lockResult as any)?.payload?.msg;\n          error = lockErrorCode;\n        }\n        if (lockErrorCode === 'SERVER_ERROR') {\n          msg = (lockResult as any)?.payload?.msg;\n          error = 'SESSION_EXPIRED';\n        }\n        return rejectWithValue({ error, msg });\n      }\n    } catch (error) {\n      return rejectWithValue({\n        error: 'EXCEPTION',\n        exception: error,\n        msg: 'Cannot disable read-only mode, exception',\n      });\n    }\n\n    // console.log('attemptDisableReadOnly: success');\n\n    dispatch(setReadonly({ readonly: false }));\n\n    return;\n  },\n);\n"]}