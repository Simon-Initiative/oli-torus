{"version":3,"file":"locking.js","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/store/app/actions/locking.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEjE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAE3E,MAAM,CAAC,MAAM,kBAAkB,GAAG,gBAAgB,CAChD,GAAG,QAAQ,qBAAqB,EAChC,CAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,eAAe,EAAE,EAAE,EAAE;IACzC,MAAM,WAAW,GAAG,iBAAiB,CAAC,QAAQ,EAAe,CAAC,CAAC;IAC/D,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAe,CAAC,CAAC;IAEjE,IAAI;QACF,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAChE,IAAI,UAAU,CAAC,IAAI,KAAK,UAAU,EAAE;YAClC,OAAO,eAAe,CAAC;gBACrB,KAAK,EAAE,gBAAgB;gBACvB,GAAG,EAAE,kFAAkF;aACxF,CAAC,CAAC;SACJ;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,cAAc;YACrB,MAAM,EAAE,CAAC;YACT,GAAG,EAAE,gFAAgF;SACtF,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,gBAAgB,CAChD,GAAG,QAAQ,qBAAqB,EAChC,CAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;IACxB,MAAM,WAAW,GAAG,iBAAiB,CAAC,QAAQ,EAAe,CAAC,CAAC;IAC/D,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAe,CAAC,CAAC;IACjE,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IAChE,IAAI,UAAU,CAAC,IAAI,KAAK,UAAU,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;AACH,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { acquireLock, releaseLock } from 'data/persistence/lock';\nimport { RootState } from '../../rootReducer';\nimport { AppSlice, selectProjectSlug, selectRevisionSlug } from '../slice';\n\nexport const acquireEditingLock = createAsyncThunk(\n  `${AppSlice}/acquireEditingLock`,\n  async (_, { getState, rejectWithValue }) => {\n    const projectSlug = selectProjectSlug(getState() as RootState);\n    const resourceSlug = selectRevisionSlug(getState() as RootState);\n\n    try {\n      const lockResult = await acquireLock(projectSlug, resourceSlug);\n      if (lockResult.type !== 'acquired') {\n        return rejectWithValue({\n          error: 'ALREADY_LOCKED',\n          msg: 'Error acquiring a lock, most likely due to another user already owning the lock.',\n        });\n      }\n    } catch (e) {\n      return rejectWithValue({\n        error: 'SERVER_ERROR',\n        server: e,\n        msg: 'Server error attempting to acquire lock, this is most likely a session timeout',\n      });\n    }\n  },\n);\n\nexport const releaseEditingLock = createAsyncThunk(\n  `${AppSlice}/releaseEditingLock`,\n  async (_, { getState }) => {\n    const projectSlug = selectProjectSlug(getState() as RootState);\n    const resourceSlug = selectRevisionSlug(getState() as RootState);\n    const lockResult = await releaseLock(projectSlug, resourceSlug);\n    if (lockResult.type !== 'released') {\n      throw new Error('releasing lock failed');\n    }\n  },\n);\n"]}