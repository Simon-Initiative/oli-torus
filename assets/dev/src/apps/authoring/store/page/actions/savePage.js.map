{"version":3,"file":"savePage.js","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/store/page/actions/savePage.ts"],"names":[],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { ResourceContent } from 'data/content/resource';\nimport { edit, Edited, ResourceUpdate } from 'data/persistence/resource';\nimport { clone } from 'utils/common';\nimport { selectAll as selectAllGroups } from '../../../../delivery/store/features/groups/slice';\nimport { selectProjectSlug, selectReadOnly } from '../../app/slice';\nimport { RootState } from '../../rootReducer';\nimport { PageSlice, PageState, selectRevisionSlug, selectState, setRevisionSlug } from '../slice';\n\nexport const savePage = createAsyncThunk(\n  `${PageSlice}/savePage`,\n  async (payload: Partial<PageState> = {}, { getState, dispatch }) => {\n    const isReadOnlyMode = selectReadOnly(getState() as RootState);\n    if (isReadOnlyMode) {\n      return;\n    }\n    const projectSlug = selectProjectSlug(getState() as RootState);\n    const revisionSlug = selectRevisionSlug(getState() as RootState);\n    const currentPage = selectState(getState() as RootState);\n\n    const model = selectAllGroups(getState() as any);\n\n    const advancedAuthoring =\n      payload.advancedAuthoring !== undefined\n        ? payload.advancedAuthoring\n        : currentPage.advancedAuthoring;\n    const advancedDelivery =\n      payload.advancedDelivery !== undefined\n        ? payload.advancedDelivery\n        : currentPage.advancedDelivery;\n    const displayApplicationChrome =\n      payload.displayApplicationChrome !== undefined\n        ? payload.displayApplicationChrome\n        : currentPage.displayApplicationChrome;\n\n    // the API expects to overwrite all the properties every time\n\n    // need to strip out resourceId from the model items and their children\n    // we don't want to persist that value\n    const updatedModel = clone(model);\n    const removeResourceId = (items: any[]) => {\n      items.forEach((item) => {\n        delete item.resourceId;\n        if (item.children) {\n          removeResourceId(item.children);\n        }\n      });\n    };\n    removeResourceId(updatedModel);\n\n    const update: ResourceUpdate = {\n      title: payload.title || currentPage.title,\n      objectives: payload.objectives || currentPage.objectives,\n      content: {\n        model: updatedModel as ResourceContent[],\n        advancedAuthoring,\n        advancedDelivery,\n        displayApplicationChrome,\n        custom: payload.custom || currentPage.custom,\n        customCss: payload.customCss || currentPage.customCss,\n        customScript: payload.customScript || currentPage.customScript,\n        additionalStylesheets: payload.additionalStylesheets || currentPage.additionalStylesheets,\n      },\n      releaseLock: false,\n    };\n\n    const saveResult = await edit(projectSlug, revisionSlug, update, false);\n\n    if (saveResult.type === 'ServerError') {\n      throw new Error(saveResult.message);\n    }\n\n    const newSlug = (saveResult as Edited).revision_slug;\n    if (newSlug !== revisionSlug) {\n      /* console.log('updating slug??', { saveResult, newSlug, revisionSlug }); */\n      dispatch(setRevisionSlug({ revisionSlug: newSlug }));\n    }\n  },\n);\n"]}