{"version":3,"file":"initializeFromContext.js","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/store/page/actions/initializeFromContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport guid from 'utils/guid';\nimport {\n  setActivities,\n  setCurrentActivityId,\n} from '../../../../delivery/store/features/activities/slice';\nimport { selectSequence } from '../../../../delivery/store/features/groups/selectors/deck';\nimport { setGroups } from '../../../../delivery/store/features/groups/slice';\nimport { PageContext } from '../../../types';\nimport { createNew as createNewActivity } from '../../activities/actions/createNew';\nimport { createNew as createNewGroup } from '../../groups/layouts/deck/actions/createNew';\nimport { updateActivityPartInheritance } from '../../groups/layouts/deck/actions/updateActivityPartInheritance';\nimport { updateActivityRules } from '../../groups/layouts/deck/actions/updateActivityRules';\nimport { loadPage, PageSlice, PageState } from '../slice';\nimport { savePage } from './savePage';\n\nexport const initializeFromContext = createAsyncThunk(\n  `${PageSlice}/initializeFromContext`,\n  async (params: { context: PageContext; config: any }, thunkApi) => {\n    const { dispatch, getState } = thunkApi;\n\n    // load the page state properties\n    const pageState: Partial<PageState> = {\n      graded: params.context.graded,\n      authorEmail: params.context.authorEmail,\n      objectives: params.context.objectives,\n      title: params.context.title,\n      revisionSlug: params.context.resourceSlug,\n      resourceId: params.context.resourceId,\n      additionalStylesheets: params.context.content.additionalStylesheets,\n      customCss: params.context.content.customCss,\n      customScript: params.context.content.customScript,\n      custom: params.context.content.custom || {},\n    };\n    if (!params.context.content.model.length && !pageState.custom.themeId) {\n      pageState.custom.themeId = 'torus-default-light';\n      pageState.additionalStylesheets = ['/css/delivery_adaptive_themes_default_light.css'];\n    }\n    dispatch(loadPage(pageState));\n\n    const children: any[] = Object.keys(params.context.activities).map((id) => ({\n      ...params.context.activities[id],\n    }));\n    let pageModel = params.context.content.model;\n    if (!pageModel.length) {\n      // this should be a \"new\" lesson, at no point should we allow the model\n      // to be empty while controlled by the authoring tool\n      // if there are any activities defined that are not in a group they will be\n      // assimilated into a new group\n      if (!children.length) {\n        const { payload: newActivity } = await dispatch(createNewActivity({}));\n        children.push(newActivity);\n      }\n      // create sequence map of activities which is the group children\n      const newSequence = children.map((childActivity) => {\n        const entry = {\n          type: 'activity-reference',\n          resourceId: childActivity.activityId,\n          activitySlug: childActivity.activitySlug,\n          custom: {\n            sequenceId: `aa_${guid()}`,\n            sequenceName: childActivity.title || childActivity.activitySlug,\n          },\n        };\n        return entry;\n      });\n      const { payload: newGroup } = await dispatch(createNewGroup({ children: newSequence }));\n\n      // write model to server now or else the above created activity will be orphaned\n      await dispatch(savePage());\n\n      pageModel = [newGroup];\n    }\n\n    const activityTypes = params.config.activityTypes;\n\n    // set the activities\n    const activities = children.map((activity) => {\n      return {\n        id: activity.activity_id,\n        resourceId: activity.activity_id,\n        activitySlug: activity.activitySlug,\n        activityType: activityTypes.find((at: any) => at.slug === activity.typeSlug),\n        content: { ...activity.model, authoring: undefined },\n        authoring: activity.model.authoring,\n        title: activity.title,\n        objectives: activity.objectives,\n      };\n    });\n    await dispatch(setActivities({ activities }));\n\n    // populate the group\n    // TODO: can this be recursively nested?\n    const groups = pageModel.filter((item: any) => item.type === 'group');\n    const otherTypes = pageModel.filter((item: any) => item.type !== 'group');\n    // for now just stick them into a group, this isn't reallly thought out yet\n    // and there is technically only 1 supported layout type atm\n    if (otherTypes.length) {\n      groups.push({ type: 'group', layout: 'deck', children: [...otherTypes] });\n    }\n\n    // need resourceId in the group to be able to match it with the activity\n    groups.forEach((group) => {\n      group.children.forEach((child: any) => {\n        if (child.type === 'activity-reference' && !child.resourceId) {\n          const matchingActivity = activities.find(\n            (activity) => activity.activitySlug === child.activitySlug,\n          );\n          if (matchingActivity) {\n            child.resourceId = matchingActivity.resourceId;\n          }\n        }\n      });\n    });\n\n    // here we should do any \"layout processing\" where for example we go and make sure all the parts\n    // are referenced including inherited from layers or parent screens when in \"deck\" view\n    // afterwards update that group record with a processing timestamp? so that we don't need to do every time?\n    // NOTE: right now there really only is expected to be a single group\n    const groupProcessing = groups.map((group) => dispatch(updateActivityPartInheritance(group)));\n    const ruleProcessing = groups.map((group) => dispatch(updateActivityRules(group)));\n\n    // TODO: different for different layout types\n    await Promise.all(groupProcessing);\n    await Promise.all(ruleProcessing);\n\n    await dispatch(setGroups({ groups }));\n\n    console.log('INIT:', { params, children, groups, activities });\n\n    // TODO: some initial creation if blank\n    const sequence = selectSequence(getState() as any);\n    await dispatch(setCurrentActivityId({ activityId: sequence[0]?.resourceId }));\n  },\n);\n"]}