{"version":3,"file":"ColorPickerWidget.jsx","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/components/PropertyEditor/custom/ColorPickerWidget.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { CSSProperties, useRef, useState } from 'react';\nimport { RGBColor, ColorResult, SketchPicker } from 'react-color';\ninterface ColorPickerProps {\n  id: string;\n  label: string;\n  value: string;\n  onChange: (colorValue: string) => void;\n  onBlur: (id: string, colorValue: string) => void;\n}\n\nconst getColorValueString = (value: ColorResult) => {\n  return `rgba(${value.rgb.r},${value.rgb.g},${value.rgb.b},${value.rgb.a})`;\n};\n\nconst getRGBColorValue = (value?: string): RGBColor => {\n  if (value) {\n    const parts = value.replace('rgba(', '').replace(')', '').split(',');\n    const [r, g, b, a = '100'] = parts;\n    return { r: parseInt(r, 10), g: parseInt(g, 10), b: parseInt(b, 10), a: parseFloat(a) };\n  }\n  return { r: 255, g: 255, b: 255, a: 100 };\n};\n\nconst ColorPickerWidget: React.FC<ColorPickerProps> = (props) => {\n  const color = getRGBColorValue(props.value);\n  const [displayPicker, setDisplayPicker] = useState(false);\n\n  const handleColorBoxClick = () => {\n    setDisplayPicker(true);\n    document.addEventListener('mousedown', handleClick);\n  };\n  const handleClick = (event: any) => {\n    if (pickerRef.current && !pickerRef.current.contains(event.target)) {\n      setDisplayPicker(false);\n      document.removeEventListener('mousedown', handleClick);\n    }\n  };\n  const pickerRef = useRef<HTMLDivElement>(null);\n  const colorDiv: CSSProperties = {\n    width: '36px',\n    height: '14px',\n    borderRadius: '2px',\n    border: '1px solid black',\n    background: `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`,\n  };\n\n  const popup: CSSProperties = {\n    position: 'absolute',\n    zIndex: 2,\n    left: 0,\n    top: '25px',\n  };\n\n  return (\n    <div className=\"d-flex justify-content-between\">\n      <span className=\"form-label\">{props.label}</span>\n      <div>\n        <div style={colorDiv} onClick={handleColorBoxClick}></div>\n        {displayPicker ? (\n          <div style={popup} ref={pickerRef}>\n            <SketchPicker\n              color={color}\n              onChangeComplete={(color) => {\n                props.onChange(getColorValueString(color));\n                props.onBlur(props.id, getColorValueString(color));\n              }}\n            />\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPickerWidget;\n"]}