{"version":3,"file":"CompJsonEditor.jsx","sourceRoot":"","sources":["../../../../../../../src/apps/authoring/components/PropertyEditor/custom/CompJsonEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { selectCurrentSelection } from 'apps/authoring/store/parts/slice';\nimport React, { ChangeEvent, CSSProperties, Fragment, useState } from 'react';\nimport { useEffect } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\ninterface JsonEditorProps {\n  jsonValue: any;\n  onChange: (changedJson: object) => void;\n  existingPartIds: string[];\n}\nconst CompJsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { jsonValue, onChange, existingPartIds } = props;\n  let val = { id: jsonValue.id, custom: jsonValue.custom };\n  const [value, setValue] = useState<string>(JSON.stringify(val, null, 4));\n  const [validationMsg, setValidationMsg] = useState<string>('');\n  const currentPartSelection = useSelector(selectCurrentSelection);\n  const [displayEditor, setDisplayEditor] = useState<boolean>(false);\n  const textAreaStyle: CSSProperties = {\n    width: '100%',\n  };\n  useEffect(() => {\n    val = { id: jsonValue.id, custom: jsonValue.custom };\n    setValue(JSON.stringify(val, null, 4));\n  }, [jsonValue]);\n\n  const handleOnChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const changedVal = event.target.value;\n    setValue(changedVal);\n    try {\n      const jsonVal = JSON.parse(changedVal);\n      if (existingPartIds.indexOf(jsonVal.id) !== -1 && currentPartSelection !== jsonVal.id) {\n        setValidationMsg('ID you have used is already exist in the current Activity.');\n      } else if (!jsonVal.id) {\n        setValidationMsg('ID is required and cannot be empty');\n      } else {\n        setValidationMsg('');\n      }\n    } catch (e) {\n      setValidationMsg('Please make sure the JSON is in proper format.');\n    }\n  };\n  return (\n    <Fragment>\n      <Button onClick={() => setDisplayEditor(true)}>\n        <i className=\"fas fa-edit mr-2\" />\n      </Button>\n      <Modal show={displayEditor} onHide={() => setDisplayEditor(false)}>\n        <Modal.Header closeButton={true}>\n          <h4 className=\"modal-title\">Edit JSON</h4>\n        </Modal.Header>\n        <Modal.Body>\n          <textarea style={textAreaStyle} rows={20} onChange={handleOnChange} value={value} />\n          <label className=\"text-danger\">{validationMsg}</label>\n        </Modal.Body>\n        <Modal.Footer>\n          <button\n            id=\"btnSave\"\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              setDisplayEditor(false);\n              onChange(JSON.parse(value));\n            }}\n            disabled={validationMsg !== ''}\n          >\n            Save\n          </button>\n          <button type=\"button\" className=\"btn btn-danger\" onClick={() => setDisplayEditor(false)}>\n            Cancel\n          </button>\n        </Modal.Footer>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default CompJsonEditor;\n"]}