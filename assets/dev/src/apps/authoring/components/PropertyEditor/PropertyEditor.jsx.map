{"version":3,"file":"PropertyEditor.jsx","sourceRoot":"","sources":["../../../../../../src/apps/authoring/components/PropertyEditor/PropertyEditor.tsx"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,mBAAmB,CAAC;AAErC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAExC,OAAO,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC5B,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC7D,OAAO,iBAAiB,MAAM,4BAA4B,CAAC;AAC3D,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,sBAAsB,MAAM,iCAAiC,CAAC;AAUrE,MAAM,OAAO,GAAQ;IACnB,WAAW,EAAE,iBAAiB;IAC9B,cAAc,EAAE,cAAc;IAC9B,sBAAsB,EAAE,sBAAsB;CAC/C,CAAC;AAEF,MAAM,cAAc,GAAkC,CAAC,EACrD,MAAM,EACN,QAAQ,EACR,KAAK,EACL,eAAe,EACf,eAAe,GAAG,KAAK,GACxB,EAAE,EAAE;IACH,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAM,KAAK,CAAC,CAAC;IAErD,MAAM,YAAY,GAAG,CAAC,WAAgB,EAAU,EAAE;QAChD,MAAM,QAAQ,GAA8B,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvE,IAAI,OAAO,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YACnC,OAAO,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAClC;QACD,OAAO,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,OAAO,CACL,CAAC,IAAI,CACH,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YACd,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ,CAAC;YAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAChD,MAAM,eAAe,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;YAElD,WAAW,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,eAAe,IAAI,eAAe,KAAK,SAAS,EAAE;gBACpD,0FAA0F;gBAC1F,IAAI,WAAW,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAAE;oBAClC;;;;;;0BAMM;oBACN,eAAe,CAAC,WAAW,CAAC,CAAC;iBAC9B;aACF;QACH,CAAC,CAAC,CACF,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;YACvB,qCAAqC;YACrC,gCAAgC;YAChC,iDAAiD;YACjD,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAY,EAAE,OAAO,CAAC,CAAC;YAC7C,+EAA+E;YAC/E,4EAA4E;YAC5E,0FAA0F;YAC1F,IAAI,QAAQ,IAAI,OAAO,EAAE;gBACvB,sCAAsC;gBACtC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CACF,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,OAAO,CAAC,CAAC,OAAO,CAAC,CAEjB;MAAA,CAAC,QAAQ,CAAC,AAAD,EACT;MAAA,CAAC,8CAA8C,CACjD;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC,CAAC;AACF,eAAe,cAAc,CAAC","sourcesContent":["import Form from '@rjsf/bootstrap-4';\nimport { UiSchema } from '@rjsf/core';\nimport { diff } from 'deep-object-diff';\nimport { JSONSchema7 } from 'json-schema';\nimport { at } from 'lodash';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport ColorPickerWidget from './custom/ColorPickerWidget';\nimport CustomCheckbox from './custom/CustomCheckbox';\nimport ScreenDropdownTemplate from './custom/ScreenDropdownTemplate';\n\ninterface PropertyEditorProps {\n  schema: JSONSchema7;\n  uiSchema: UiSchema;\n  onChangeHandler: (changes: unknown) => void;\n  value: unknown;\n  triggerOnChange?: boolean;\n}\n\nconst widgets: any = {\n  ColorPicker: ColorPickerWidget,\n  CheckboxWidget: CustomCheckbox,\n  ScreenDropdownTemplate: ScreenDropdownTemplate,\n};\n\nconst PropertyEditor: React.FC<PropertyEditorProps> = ({\n  schema,\n  uiSchema,\n  value,\n  onChangeHandler,\n  triggerOnChange = false,\n}) => {\n  const [formData, setFormData] = useState<any>(value);\n\n  const findDiffType = (changedProp: any): string => {\n    const diffType: Record<string, unknown>[] = Object.values(changedProp);\n    if (typeof diffType[0] === 'object') {\n      return findDiffType(diffType[0]);\n    }\n    return typeof diffType[0];\n  };\n\n  useEffect(() => {\n    setFormData(value);\n  }, [value]);\n\n  return (\n    <Form\n      schema={schema}\n      formData={formData}\n      onChange={(e) => {\n        const updatedData = e.formData;\n        const changedProp = diff(formData, updatedData);\n        const changedPropType = findDiffType(changedProp);\n\n        setFormData(updatedData);\n        if (triggerOnChange || changedPropType === 'boolean') {\n          // because 'id' is used to maintain selection, it MUST be onBlur or else bad things happen\n          if (updatedData.id === formData.id) {\n            /* console.log('ONCHANGE P EDITOR TRIGGERED', {\n              e,\n              updatedData,\n              changedProp,\n              changedPropType,\n              triggerOnChange,\n            }); */\n            onChangeHandler(updatedData);\n          }\n        }\n      }}\n      onBlur={(key, changed) => {\n        // key will look like root_Position_x\n        // changed will be the new value\n        // formData will be the current state of the form\n        const dotPath = key.replace(/_/g, '.').replace('root.', '');\n        const [newValue] = at(value as any, dotPath);\n        // console.log('ONBLUR', { key, changed, formData, value, dotPath, newValue });\n        // specifically using != instead of !== because `changed` is always a string\n        // and the stakes here are not that high, we are just trying to avoid saving so many times\n        if (newValue != changed) {\n          // console.log('ONBLUR TRIGGER SAVE');\n          onChangeHandler(formData);\n        }\n      }}\n      uiSchema={uiSchema}\n      widgets={widgets}\n    >\n      <Fragment />\n      {/*  this one is to remove the submit button */}\n    </Form>\n  );\n};\nexport default PropertyEditor;\n"]}