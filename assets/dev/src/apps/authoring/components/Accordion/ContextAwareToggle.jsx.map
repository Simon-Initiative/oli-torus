{"version":3,"file":"ContextAwareToggle.jsx","sourceRoot":"","sources":["../../../../../../src/apps/authoring/components/Accordion/ContextAwareToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAEvE,MAAM,kBAAkB,GAAkB,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IAC9E,MAAM,eAAe,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAErD,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;QAC1D,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,eAAe,KAAK,QAAQ,CAAC;IAEvD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAoB,IAAI,CAAC,CAAC;IAE9D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,OAAO,GAAG,CAAC,CAAM,EAAE,EAAE;YACzB,6FAA6F;YAC7F,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,IAAI,iBAAiB,EAAE;gBAC9C,mBAAmB;gBACnB,OAAO;aACR;YACD,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,IAAI,CAAC,iBAAiB,EAAE;gBACjD,oBAAoB;gBACpB,OAAO;aACR;YACD,IAAI,eAAe,CAAC,OAAO,EAAE;gBAC3B,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACjC;QACH,CAAC,CAAC;QACF,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE7C,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,gBAAgB,EAAE,QAAQ,EAAE,eAAe,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAE7E,OAAO,CACL,CAAC,MAAM,CACL,IAAI,CAAC,QAAQ,CACb,GAAG,CAAC,CAAC,eAAe,CAAC,CACrB,SAAS,CAAC,CAAC,yBAAyB,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACjE,OAAO,CAAC,CAAC,gBAAgB,CAAC,CAE1B;MAAA,CAAC,iBAAiB,CAAC,CAAC,CAAC,CACnB,CAAC,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CACrC,CAAC,CAAC,CAAC,CACF,CAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CACtC,CACH;IAAA,EAAE,MAAM,CAAC,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import React, { useContext } from 'react';\nimport { AccordionContext, useAccordionToggle } from 'react-bootstrap';\n\nconst ContextAwareToggle: React.FC<any> = ({ eventKey, callback, className }) => {\n  const currentEventKey = useContext(AccordionContext);\n\n  const decoratedOnClick = useAccordionToggle(eventKey, (e) => {\n    e.stopPropagation();\n    callback && callback(eventKey);\n  });\n\n  const isCurrentEventKey = currentEventKey === eventKey;\n\n  const toggleButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    const handler = (e: any) => {\n      /* console.log('toggleButtonRef', { ref: toggleButtonRef.current, e, isCurrentEventKey }); */\n      if (e.detail === 'expand' && isCurrentEventKey) {\n        // already expanded\n        return;\n      }\n      if (e.detail === 'collapse' && !isCurrentEventKey) {\n        // already collapsed\n        return;\n      }\n      if (toggleButtonRef.current) {\n        toggleButtonRef.current.click();\n      }\n    };\n    document.addEventListener(eventKey, handler);\n\n    return () => {\n      document.removeEventListener(eventKey, handler);\n    };\n  }, [decoratedOnClick, eventKey, toggleButtonRef.current, isCurrentEventKey]);\n\n  return (\n    <button\n      type=\"button\"\n      ref={toggleButtonRef}\n      className={`btn btn-link p-0 mr-1 ${className ? className : ''}`}\n      onClick={decoratedOnClick}\n    >\n      {isCurrentEventKey ? (\n        <i className=\"fa fa-angle-down\"></i>\n      ) : (\n        <i className=\"fa fa-angle-right\"></i>\n      )}\n    </button>\n  );\n};\n\nexport default ContextAwareToggle;\n"]}