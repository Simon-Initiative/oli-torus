{"version":3,"file":"DiagnosticsWindow.jsx","sourceRoot":"","sources":["../../../../../../src/apps/authoring/components/Modal/DiagnosticsWindow.tsx"],"names":[],"mappings":"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","sourcesContent":["import { selectReadOnly, setShowDiagnosticsWindow } from 'apps/authoring/store/app/slice';\nimport { setCurrentActivityFromSequence } from 'apps/authoring/store/groups/layouts/deck/actions/setCurrentActivityFromSequence';\nimport { validatePartIds } from 'apps/authoring/store/groups/layouts/deck/actions/validate';\nimport { updatePart } from 'apps/authoring/store/parts/actions/updatePart';\nimport { setCurrentSelection } from 'apps/authoring/store/parts/slice';\nimport React, { Fragment, useState } from 'react';\nimport { ListGroup, Modal } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst FixIdButton: React.FC<{ suggestion: string; onClick: (val: string) => void }> = ({\n  suggestion,\n  onClick,\n}) => {\n  const txtRef = React.useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    if (txtRef.current) {\n      const newVal = txtRef.current.value;\n      onClick(newVal);\n    }\n  };\n\n  return (\n    <>\n      <input ref={txtRef} type=\"text\" defaultValue={suggestion} />\n      <button className=\"btn btn-sm btn-primary\" onClick={handleClick}>\n        Apply\n      </button>\n    </>\n  );\n};\n\nconst ActivityPartError: React.FC<{ error: any; onApplyFix: () => void }> = ({\n  error,\n  onApplyFix,\n}) => {\n  const dispatch = useDispatch();\n  const isReadOnlyMode = useSelector(selectReadOnly);\n\n  const handleClickScreen = (sequenceId: string) => {\n    dispatch(setCurrentActivityFromSequence(sequenceId));\n  };\n\n  const getOwnerName = (dupe: any) => {\n    const screen = error.activity;\n    if (dupe.owner.custom.sequenceId === screen.custom.sequenceId) {\n      return 'self';\n    }\n    if (dupe.owner.custom.sequenceId === screen.custom.layerRef) {\n      return `${dupe.owner.custom.sequenceName} (Parent)`;\n    }\n    return dupe.owner.custom.sequenceName;\n  };\n\n  let errorTotals = '';\n  if (error.duplicates.length) {\n    errorTotals += `${error.duplicates.length} components with duplicate IDs found.\\n`;\n  }\n  if (error.problems.length) {\n    errorTotals += `${error.problems.length} components with problematic IDs found.\\n`;\n  }\n\n  const handleProblemFix = async (problem: any, fixed: string) => {\n    /* console.log('fixing', problem, fixed); */\n    const activityId = problem.owner.resourceId;\n    const partId = problem.id;\n    const changes = { id: fixed };\n\n    await dispatch(setCurrentSelection(''));\n    const result = await dispatch(updatePart({ activityId, partId, changes }));\n\n    /* console.log('handleProblemFix', result); */\n\n    // TODO: something if it fails\n    onApplyFix();\n  };\n\n  return (\n    <ListGroup>\n      <ListGroup.Item>\n        <ListGroup horizontal>\n          <ListGroup.Item\n            action\n            onClick={() => handleClickScreen(error.activity.custom.sequenceId)}\n          >\n            {error.activity.custom.sequenceName}\n          </ListGroup.Item>\n          <ListGroup.Item>{errorTotals}</ListGroup.Item>\n        </ListGroup>\n      </ListGroup.Item>\n      {error.duplicates.map((duplicate: any) => (\n        <ListGroup.Item key={duplicate.owner.resourceId}>\n          <ListGroup horizontal>\n            <ListGroup.Item>\n              A {duplicate.type} component with the ID &quot;<strong>{duplicate.id}</strong>&quot;\n              located on\n            </ListGroup.Item>\n            <ListGroup.Item\n              action\n              onClick={() => handleClickScreen(duplicate.owner.custom.sequenceId)}\n            >\n              {getOwnerName(duplicate)}\n            </ListGroup.Item>\n            {!isReadOnlyMode && (\n              <ListGroup.Item>\n                <FixIdButton\n                  suggestion={duplicate.suggestedFix}\n                  onClick={(val) => handleProblemFix(duplicate, val)}\n                />\n              </ListGroup.Item>\n            )}\n          </ListGroup>\n        </ListGroup.Item>\n      ))}\n      {error.problems.map((problem: any) => (\n        <ListGroup.Item key={problem.owner.resourceId}>\n          <ListGroup horizontal>\n            <ListGroup.Item>\n              A {problem.type} component with the ID &quot;<strong>{problem.id}</strong>&quot;, has\n              problematic characters. It is best to use alphanumeric characters only.\n            </ListGroup.Item>\n            {!isReadOnlyMode && (\n              <ListGroup.Item>\n                <FixIdButton\n                  suggestion={problem.suggestedFix}\n                  onClick={(val) => handleProblemFix(problem, val)}\n                />\n              </ListGroup.Item>\n            )}\n          </ListGroup>\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\ninterface DiagnosticsWindowProps {\n  onClose?: () => void;\n}\n\nconst DiagnosticsWindow: React.FC<DiagnosticsWindowProps> = ({ onClose }) => {\n  const [results, setResults] = useState<any>(null);\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n    dispatch(setShowDiagnosticsWindow({ show: false }));\n  };\n\n  const handleValidatePartIdsClick = async () => {\n    const result = await dispatch(validatePartIds({}));\n    if ((result as any).meta.requestStatus === 'fulfilled') {\n      if ((result as any).payload.errors.length > 0) {\n        const errorList = (result as any).payload.errors.map((item: any) => {\n          return (\n            <ActivityPartError\n              key={item.activity.resourceId}\n              error={item}\n              onApplyFix={() => setResults(null)}\n            />\n          );\n        });\n        setResults(errorList);\n      } else {\n        setResults(<p>No errors found.</p>);\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal show={true} size=\"xl\" onHide={handleClose}>\n        <Modal.Header closeButton={true}>\n          <h3 className=\"modal-title\">Lesson Diagnostics</h3>\n        </Modal.Header>\n        <Modal.Body>\n          <div>\n            <ul>\n              <li>\n                Validate Part Ids <button onClick={handleValidatePartIdsClick}>Execute</button>\n              </li>\n            </ul>\n          </div>\n          <hr />\n          <div>{results}</div>\n        </Modal.Body>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticsWindow;\n"]}