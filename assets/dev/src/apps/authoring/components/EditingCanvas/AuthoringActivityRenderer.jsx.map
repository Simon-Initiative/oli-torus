{"version":3,"file":"AuthoringActivityRenderer.jsx","sourceRoot":"","sources":["../../../../../../src/apps/authoring/components/EditingCanvas/AuthoringActivityRenderer.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,sDAAsD,CAAC;AACpF,OAAO,EAAE,sBAAsB,EAAE,MAAM,kCAAkC,CAAC;AAG1E,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAevD,uGAAuG;AACvG,8EAA8E;AAC9E,MAAM,yBAAyB,GAA6C,CAAC,EAC3E,aAAa,EACb,QAAQ,EACR,cAAc,EACd,YAAY,EACZ,UAAU,EACV,eAAe,EACf,qBAAqB,EACrB,mBAAmB,EACnB,oBAAoB,EACpB,kBAAkB,GACnB,EAAE,EAAE;;IACH,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC/B,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE9C,MAAM,cAAc,GAAG,WAAW,CAAC,sBAAsB,CAAC,CAAC;IAE3D,IAAI,CAAC,aAAa,CAAC,SAAS,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;QAC3D,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,GAAG,GAAG,MAAM,CAAM,IAAI,CAAC,CAAC;IAE9B,MAAM,YAAY,GAAG;QACnB,EAAE,EAAE,YAAY,aAAa,CAAC,EAAE,EAAE;QAClC,GAAG;QACH,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QACpC,QAAQ;QACR,KAAK,EAAE;YACL,QAAQ,EAAE,UAAU;YACpB,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,OAAO;YACb,YAAY,EAAE,OAAO;YACrB,aAAa,EAAE,OAAO;SACvB;QACD,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC;YAC/B,cAAc;YACd,iBAAiB,EAAE,cAAc;SAClC,CAAC;KACH,CAAC;IAEF,MAAM,UAAU,GAAG,WAAW,CAC5B,CAAC,IAAsB,EAAE,OAAY,EAAE,EAAE;QACvC,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE;YACrC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACnC;IACH,CAAC,EACD,CAAC,GAAG,CAAC,CACN,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,kFAAkF;QAClF,8EAA8E;QAC9E,kEAAkE;QAClE,4EAA4E;QAC5E,IAAI,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,KAAK,EAAE;YAC7B,UAAU,CAAC,kBAAkB,CAAC,IAAI,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC;SACjE;IACH,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEzB,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,kBAAkB,GAAG,CAAO,CAAM,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,CAAC,CAAC,MAAqB,CAAC;YACvC,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,MAAK,YAAY,CAAC,EAAE,EAAE;gBAClC,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;gBAC3C,IAAI,MAAM,GAAG,IAAI,CAAC;gBAClB,IAAI,OAAO,CAAC,SAAS,KAAK,YAAY,IAAI,YAAY,EAAE;oBACtD,MAAM,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;iBACjD;gBACD,IAAI,OAAO,CAAC,SAAS,KAAK,UAAU,IAAI,UAAU,EAAE;oBAClD,MAAM,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;iBACvD;gBACD,IAAI,OAAO,CAAC,SAAS,KAAK,eAAe,IAAI,eAAe,EAAE;oBAC5D,MAAM,GAAG,MAAM,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAC/E;gBACD,IAAI,OAAO,CAAC,SAAS,KAAK,mBAAmB,IAAI,mBAAmB,EAAE;oBACpE,MAAM,GAAG,MAAM,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC5D;gBACD,IAAI,OAAO,CAAC,SAAS,KAAK,qBAAqB,IAAI,qBAAqB,EAAE;oBACxE,MAAM,GAAG,MAAM,qBAAqB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC9D;gBAED,aAAa;gBACb,IAAI,OAAO,CAAC,SAAS,KAAK,UAAU,IAAI,oBAAoB,EAAE;oBAC5D,MAAM,GAAG,MAAM,oBAAoB,CACjC,OAAO,CAAC,OAAO,CAAC,UAAU,EAC1B,OAAO,CAAC,OAAO,CAAC,MAAM,EACtB,OAAO,CAAC,OAAO,CAAC,QAAQ,CACzB,CAAC;iBACH;gBAED,IAAI,YAAY,EAAE;oBAChB,YAAY,CAAC,MAAM,CAAC,CAAC;iBACtB;aACF;QACH,CAAC,CAAA,CAAC;QACF,gEAAgE;QAChE,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;QAE7D,MAAM,kBAAkB,GAAG,CAAO,CAAM,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,CAAC,CAAC,MAAqB,CAAC;YACvC,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,MAAK,YAAY,CAAC,EAAE,EAAE;gBAClC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;gBAC3B,uDAAuD;gBACvD,QAAQ,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC5C,iDAAiD;gBACjD,oDAAoD;gBACpD,oFAAoF;aACrF;QACH,CAAC,CAAA,CAAC;QACF,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAC9D,UAAU,CAAC,IAAI,CAAC,CAAC;QAEjB,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAChE,QAAQ,CAAC,mBAAmB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnE,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,OAAO;QACZ,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,MAAA,aAAa,CAAC,YAAY,0CAAE,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC;QACxF,CAAC,CAAC,IAAI,CAAC;AACX,CAAC,CAAC;AAEF,eAAe,yBAAyB,CAAC","sourcesContent":["import { saveActivity } from 'apps/authoring/store/activities/actions/saveActivity';\nimport { selectCurrentSelection } from 'apps/authoring/store/parts/slice';\nimport { NotificationType } from 'apps/delivery/components/NotificationContext';\nimport { ActivityModelSchema } from 'components/activities/types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface AuthoringActivityRendererProps {\n  activityModel: ActivityModelSchema;\n  editMode: boolean;\n  configEditorId: string;\n  onSelectPart?: (partId: string) => Promise<any>;\n  onCopyPart?: (part: any) => Promise<any>;\n  onConfigurePart?: (part: any, context: any) => Promise<any>;\n  onCancelConfigurePart?: (partId: string) => Promise<any>;\n  onSaveConfigurePart?: (partId: string) => Promise<any>;\n  onPartChangePosition?: (activityId: string, partId: string, dragData: any) => Promise<any>;\n  notificationStream?: { stamp: number; type: NotificationType; payload: any } | null;\n}\n\n// the authoring activity renderer should be capable of handling *any* activity type, not just adaptive\n// most events should be simply bubbled up to the layout renderer for handling\nconst AuthoringActivityRenderer: React.FC<AuthoringActivityRendererProps> = ({\n  activityModel,\n  editMode,\n  configEditorId,\n  onSelectPart,\n  onCopyPart,\n  onConfigurePart,\n  onCancelConfigurePart,\n  onSaveConfigurePart,\n  onPartChangePosition,\n  notificationStream,\n}) => {\n  const dispatch = useDispatch();\n  const [isReady, setIsReady] = useState(false);\n\n  const selectedPartId = useSelector(selectCurrentSelection);\n\n  if (!activityModel.authoring || !activityModel.activityType) {\n    console.warn('Bad Activity Data', activityModel);\n    return null;\n  }\n\n  const ref = useRef<any>(null);\n\n  const elementProps = {\n    id: `activity-${activityModel.id}`,\n    ref,\n    model: JSON.stringify(activityModel),\n    editMode,\n    style: {\n      position: 'absolute',\n      top: '65px',\n      left: '300px',\n      paddingRight: '300px',\n      paddingBottom: '300px',\n    },\n    authoringContext: JSON.stringify({\n      selectedPartId,\n      configurePortalId: configEditorId,\n    }),\n  };\n\n  const sendNotify = useCallback(\n    (type: NotificationType, payload: any) => {\n      if (ref.current && ref.current.notify) {\n        ref.current.notify(type, payload);\n      }\n    },\n    [ref],\n  );\n\n  useEffect(() => {\n    // the \"notificationStream\" is a state based way to \"push\" stuff into the activity\n    // from here it uses the notification system which is an event emitter because\n    // these are web components and not in the same react context, and\n    // in order to send via props as state we would need to stringify the object\n    if (notificationStream?.stamp) {\n      sendNotify(notificationStream.type, notificationStream.payload);\n    }\n  }, [notificationStream]);\n\n  useEffect(() => {\n    const customEventHandler = async (e: any) => {\n      const target = e.target as HTMLElement;\n      if (target?.id === elementProps.id) {\n        const { payload, continuation } = e.detail;\n        let result = null;\n        if (payload.eventName === 'selectPart' && onSelectPart) {\n          result = await onSelectPart(payload.payload.id);\n        }\n        if (payload.eventName === 'copyPart' && onCopyPart) {\n          result = await onCopyPart(payload.payload.copiedPart);\n        }\n        if (payload.eventName === 'configurePart' && onConfigurePart) {\n          result = await onConfigurePart(payload.payload.part, payload.payload.context);\n        }\n        if (payload.eventName === 'saveConfigurePart' && onSaveConfigurePart) {\n          result = await onSaveConfigurePart(payload.payload.partId);\n        }\n        if (payload.eventName === 'cancelConfigurePart' && onCancelConfigurePart) {\n          result = await onCancelConfigurePart(payload.payload.partId);\n        }\n\n        // DEPRECATED\n        if (payload.eventName === 'dragPart' && onPartChangePosition) {\n          result = await onPartChangePosition(\n            payload.payload.activityId,\n            payload.payload.partId,\n            payload.payload.dragData,\n          );\n        }\n\n        if (continuation) {\n          continuation(result);\n        }\n      }\n    };\n    // for now just do this, todo we need to setup events and listen\n    document.addEventListener('customEvent', customEventHandler);\n\n    const handleActivityEdit = async (e: any) => {\n      const target = e.target as HTMLElement;\n      if (target?.id === elementProps.id) {\n        const { model } = e.detail;\n        /* console.log('AAR handleActivityEdit', { model }); */\n        dispatch(saveActivity({ activity: model }));\n        // why were we clearing the selection on edit?...\n        // dispatch(setCurrentSelection({ selection: '' }));\n        // dispatch(setRightPanelActiveTab({ rightPanelActiveTab: RightPanelTabs.SCREEN }));\n      }\n    };\n    document.addEventListener('modelUpdated', handleActivityEdit);\n    setIsReady(true);\n\n    return () => {\n      document.removeEventListener('customEvent', customEventHandler);\n      document.removeEventListener('modelUpdated', handleActivityEdit);\n    };\n  }, []);\n\n  return isReady\n    ? React.createElement(activityModel.activityType?.authoring_element, elementProps, null)\n    : null;\n};\n\nexport default AuthoringActivityRenderer;\n"]}