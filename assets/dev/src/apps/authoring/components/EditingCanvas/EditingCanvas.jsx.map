{"version":3,"file":"EditingCanvas.jsx","sourceRoot":"","sources":["../../../../../../src/apps/authoring/components/EditingCanvas/EditingCanvas.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,+CAA+C,CAAC;AAC3E,OAAO,EAAE,gBAAgB,EAAE,MAAM,8CAA8C,CAAC;AAChF,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AACvD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wDAAwD,CAAC;AACnG,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AACjG,OAAO,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AACtF,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,yBAAyB,MAAM,6BAA6B,CAAC;AACpE,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,MAAM,aAAa,GAAa,GAAG,EAAE;IACnC,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC/B,MAAM,gBAAgB,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACxD,MAAM,mBAAmB,GAAG,WAAW,CAAC,yBAAyB,CAAC,CAAC;IACnE,MAAM,oBAAoB,GAAG,WAAW,CAAC,sBAAsB,CAAC,CAAC;IAEjE,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhE,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;IAEvE,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;IACvE,MAAM,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;IACnF,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;IAE7D,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,QAAQ,CAIlD,IAAI,CAAC,CAAC;IAEhB,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,mBAAmB,EAAE;YACvB,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5C;QACD,oBAAoB,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,EAAE,KAAI,EAAE,CAAC,CAAC;IAC1C,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAE1B,MAAM,sBAAsB,GAAG,CAAC,QAAkB,EAAE,EAAE;QACpD,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QACzB,4DAA4D;QAC5D,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE,CAAC;QACjC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;QACpF,QAAQ,CAAC,sBAAsB,CAAC,EAAE,mBAAmB,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IAEF,MAAM,qBAAqB,GAAG,CAAO,UAAkB,EAAE,MAAc,EAAE,QAAa,EAAE,EAAE;QACxF,gCAAgC;QAChC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAClD,OAAO,KAAK,CAAC;SACd;QAED,gFAAgF;QAChF,0EAA0E;QAC1E,sDAAsD;QACtD,6EAA6E;QAC7E,8CAA8C;QAE9C,+EAA+E;QAE/E,MAAM,WAAW,GAAG,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;QAErD,QAAQ,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;QAE/E,OAAO,WAAW,CAAC;IACrB,CAAC,CAAA,CAAC;IAEF,MAAM,gBAAgB,GAAG,CAAO,EAAU,EAAE,EAAE;QAC5C,gDAAgD;QAChD,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAEjD,QAAQ,CACN,sBAAsB,CAAC;YACrB,mBAAmB,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS;SACnF,CAAC,CACH,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC,CAAA,CAAC;IAEF,MAAM,cAAc,GAAG,CAAO,IAAS,EAAE,EAAE;QACzC,QAAQ,CAAC,aAAa,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC,CAAA,CAAC;IAEF,MAAM,gBAAgB,GAAG,CAAC,CAAM,EAAE,EAAE;QAClC,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE;YACrC,OAAO;SACR;QACD,2CAA2C;QAC3C,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAEjD,QAAQ,CAAC,sBAAsB,CAAC,EAAE,mBAAmB,EAAE,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC;IAEF,qCAAqC;IACrC,MAAM,mBAAmB,GAAG,CAAO,IAAS,EAAE,OAAY,EAAE,EAAE;QAC5D,8DAA8D;QAC9D,MAAM,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;QACvC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACrC,eAAe,CAAC,IAAI,CAAC,CAAC;QACtB,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC;IAEF,MAAM,yBAAyB,GAAG,CAAO,MAAc,EAAE,EAAE;QACzD,6DAA6D;QAC7D,eAAe,CAAC,EAAE,CAAC,CAAC;QACpB,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAChC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAA,CAAC;IAEF,MAAM,uBAAuB,GAAG,CAAO,MAAc,EAAE,EAAE;QACvD,2DAA2D;IAC7D,CAAC,CAAA,CAAC;IAEF,yCAAyC;IAEzC,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACjD,QAAQ,CAAC,sBAAsB,CAAC,EAAE,mBAAmB,EAAE,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnF,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAExB,MAAM,cAAc,GAAG,iBAAiB,iBAAiB,EAAE,CAAC;IAE5D,OAAO,CACL,CAAC,KAAK,CAAC,QAAQ,CACb;MAAA,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,CACtD;QAAA,CAAC,mBAAmB;YAClB,mBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CACpC,CAAC,yBAAyB,CACxB,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CACjB,aAAa,CAAC,CAAC,QAAQ,CAAC,CACxB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,KAAK,iBAAiB,CAAC,CAC5C,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,YAAY,CAAC,CAAC,gBAAgB,CAAC,CAC/B,UAAU,CAAC,CAAC,cAAc,CAAC,CAC3B,eAAe,CAAC,CAAC,mBAAmB,CAAC,CACrC,qBAAqB,CAAC,CAAC,yBAAyB,CAAC,CACjD,mBAAmB,CAAC,CAAC,uBAAuB,CAAC,CAC7C,oBAAoB,CAAC,CAAC,qBAAqB,CAAC,CAC5C,kBAAkB,CAAC,CAAC,kBAAkB,CAAC,EACvC,CACH,CAAC,CACN;MAAA,EAAE,OAAO,CACT;MAAA,CAAC,kBAAkB,CACjB,UAAU,CAAC,CAAC,qBAAqB,CAAC,CAClC,UAAU,CAAC,CAAC,cAAc,YAAY,EAAE,CAAC,CACzC,MAAM,CAAC,CAAC,cAAc,CAAC,CACvB,MAAM,CAAC,CAAC,eAAe,CAAC,CACxB,OAAO,CAAC,CAAC,GAAG,EAAE;YACZ,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1B,qBAAqB,CAAC;gBACpB,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE;gBACjB,IAAI,EAAE,gBAAgB,CAAC,gBAAgB;gBACvC,OAAO,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE;aAC9B,CAAC,CAAC;YACH,yDAAyD;YACzD,eAAe,CAAC,EAAE,CAAC,CAAC;YACpB,0CAA0C;YAC1C,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CACF,MAAM,CAAC,CAAC,GAAG,EAAE;YACX,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1B,qBAAqB,CAAC;gBACpB,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE;gBACjB,IAAI,EAAE,gBAAgB,CAAC,cAAc;gBACrC,OAAO,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,EAAE,2CAA2C;aAC3E,CAAC,CAAC;YACH,yDAAyD;YACzD,eAAe,CAAC,EAAE,CAAC,CAAC;YACpB,0CAA0C;YAC1C,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,EAEN;IAAA,EAAE,KAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import { updatePart } from 'apps/authoring/store/parts/actions/updatePart';\nimport { NotificationType } from 'apps/delivery/components/NotificationContext';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentActivityTree } from '../../../delivery/store/features/groups/selectors/deck';\nimport { selectBottomPanel, setCopiedPart, setRightPanelActiveTab } from '../../store/app/slice';\nimport { selectCurrentSelection, setCurrentSelection } from '../../store/parts/slice';\nimport { RightPanelTabs } from '../RightMenu/RightMenu';\nimport AuthoringActivityRenderer from './AuthoringActivityRenderer';\nimport ConfigurationModal from './ConfigurationModal';\n\nconst EditingCanvas: React.FC = () => {\n  const dispatch = useDispatch();\n  const bottomPanelState = useSelector(selectBottomPanel);\n  const currentActivityTree = useSelector(selectCurrentActivityTree);\n  const currentPartSelection = useSelector(selectCurrentSelection);\n\n  const [currentActivity] = (currentActivityTree || []).slice(-1);\n\n  const [currentActivityId, setCurrentActivityId] = useState<string>('');\n\n  const [showConfigModal, setShowConfigModal] = useState<boolean>(false);\n  const [configModalFullscreen, setConfigModalFullscreen] = useState<boolean>(false);\n  const [configPartId, setConfigPartId] = useState<string>('');\n\n  const [notificationStream, setNotificationStream] = useState<{\n    stamp: number;\n    type: NotificationType;\n    payload: any;\n  } | null>(null);\n\n  useEffect(() => {\n    let current = null;\n    if (currentActivityTree) {\n      current = currentActivityTree.slice(-1)[0];\n    }\n    setCurrentActivityId(current?.id || '');\n  }, [currentActivityTree]);\n\n  const handleSelectionChanged = (selected: string[]) => {\n    const [first] = selected;\n    /* console.log('[handleSelectionChanged]', { selected }); */\n    const newSelection = first || '';\n    dispatch(setCurrentSelection({ selection: newSelection }));\n    const selectedTab = newSelection ? RightPanelTabs.COMPONENT : RightPanelTabs.SCREEN;\n    dispatch(setRightPanelActiveTab({ rightPanelActiveTab: selectedTab }));\n  };\n\n  const handlePositionChanged = async (activityId: string, partId: string, dragData: any) => {\n    // if we haven't moved, no point\n    if (dragData.deltaX === 0 && dragData.deltaY === 0) {\n      return false;\n    }\n\n    // at this point, this handler's reference will have been set no matter the deps\n    // to a previous version, because the reference is passed into a DOM event\n    // when it is wired to listen to custom element events\n    // so we have to be able to simply dispatch the change to something that will\n    // be able to access the latest activity state\n\n    /* console.log('[handlePositionChanged]', { activityId, partId, dragData }); */\n\n    const newPosition = { x: dragData.x, y: dragData.y };\n\n    dispatch(updatePart({ activityId, partId, changes: { custom: newPosition } }));\n\n    return newPosition;\n  };\n\n  const handlePartSelect = async (id: string) => {\n    /* console.log('[handlePartSelect]', { id }); */\n    dispatch(setCurrentSelection({ selection: id }));\n\n    dispatch(\n      setRightPanelActiveTab({\n        rightPanelActiveTab: !id.length ? RightPanelTabs.SCREEN : RightPanelTabs.COMPONENT,\n      }),\n    );\n\n    return true;\n  };\n\n  const handlePartCopy = async (part: any) => {\n    dispatch(setCopiedPart({ copiedPart: part }));\n    return true;\n  };\n\n  const handleStageClick = (e: any) => {\n    if (e.target.className !== 'aa-stage') {\n      return;\n    }\n    /* console.log('[handleStageClick]', e); */\n    dispatch(setCurrentSelection({ selection: '' }));\n\n    dispatch(setRightPanelActiveTab({ rightPanelActiveTab: RightPanelTabs.SCREEN }));\n  };\n\n  // TODO: rename first param to partId\n  const handlePartConfigure = async (part: any, context: any) => {\n    /* console.log('[handlePartConfigure]', { part, context }); */\n    const { fullscreen = false } = context;\n    setConfigModalFullscreen(fullscreen);\n    setConfigPartId(part);\n    setShowConfigModal(true);\n  };\n\n  const handlePartCancelConfigure = async (partId: string) => {\n    /* console.log('[handlePartCancelConfigure]', { partId }); */\n    setConfigPartId('');\n    setConfigModalFullscreen(false);\n    setShowConfigModal(false);\n  };\n\n  const handlePartSaveConfigure = async (partId: string) => {\n    /* console.log('[handlePartSaveConfigure]', { partId }); */\n  };\n\n  // console.log('EC: RENDER', { layers });\n\n  useEffect(() => {\n    dispatch(setCurrentSelection({ selection: '' }));\n    dispatch(setRightPanelActiveTab({ rightPanelActiveTab: RightPanelTabs.SCREEN }));\n  }, [currentActivityId]);\n\n  const configEditorId = `config-editor-${currentActivityId}`;\n\n  return (\n    <React.Fragment>\n      <section className=\"aa-stage\" onClick={handleStageClick}>\n        {currentActivityTree &&\n          currentActivityTree.map((activity) => (\n            <AuthoringActivityRenderer\n              key={activity.id}\n              activityModel={activity}\n              editMode={activity.id === currentActivityId}\n              configEditorId={configEditorId}\n              onSelectPart={handlePartSelect}\n              onCopyPart={handlePartCopy}\n              onConfigurePart={handlePartConfigure}\n              onCancelConfigurePart={handlePartCancelConfigure}\n              onSaveConfigurePart={handlePartSaveConfigure}\n              onPartChangePosition={handlePositionChanged}\n              notificationStream={notificationStream}\n            />\n          ))}\n      </section>\n      <ConfigurationModal\n        fullscreen={configModalFullscreen}\n        headerText={`Configure: ${configPartId}`}\n        bodyId={configEditorId}\n        isOpen={showConfigModal}\n        onClose={() => {\n          setShowConfigModal(false);\n          setNotificationStream({\n            stamp: Date.now(),\n            type: NotificationType.CONFIGURE_CANCEL,\n            payload: { id: configPartId },\n          });\n          // after we send the notifcation we can clear the part id\n          setConfigPartId('');\n          // also reset fullscreen for the next part\n          setConfigModalFullscreen(false);\n        }}\n        onSave={() => {\n          setShowConfigModal(false);\n          setNotificationStream({\n            stamp: Date.now(),\n            type: NotificationType.CONFIGURE_SAVE,\n            payload: { id: configPartId }, // no other details are known at this level\n          });\n          // after we send the notifcation we can clear the part id\n          setConfigPartId('');\n          // also reset fullscreen for the next part\n          setConfigModalFullscreen(false);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default EditingCanvas;\n"]}