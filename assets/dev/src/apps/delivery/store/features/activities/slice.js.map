{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../../../../src/apps/delivery/store/features/activities/slice.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,EACnB,cAAc,EACd,WAAW,GAMZ,MAAM,kBAAkB,CAAC;AAwB1B,MAAM,OAAO,GAA6B,mBAAmB,EAAa,CAAC;AAE3E,MAAM,KAAK,GAA2B,WAAW,CAAC;IAChD,IAAI,EAAE,YAAY;IAClB,YAAY,EAAE,OAAO,CAAC,eAAe,CAAC;QACpC,iBAAiB,EAAE,EAAc;KAClC,CAAC;IACF,QAAQ,EAAE;QACR,aAAa,CAAC,KAAK,EAAE,MAAkD;YACrE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACnD,CAAC;QACD,cAAc,CAAC,KAAK,EAAE,MAA8C;YAClE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC;QACD,gBAAgB,CAAC,KAAK,EAAE,MAAkD;YACxE,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,CAAC;QACD,cAAc,CAAC,KAAK,EAAE,MAA6C;YACjE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtD,CAAC;QACD,gBAAgB,CAAC,KAAK,EAAE,MAAwC;YAC9D,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC;QACD,oBAAoB,CAAC,KAAK,EAAE,MAA+C;YACzE,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;QACtD,CAAC;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC;AAE1C,MAAM,CAAC,MAAM,EACX,aAAa,EACb,cAAc,EACd,gBAAgB,EAChB,cAAc,EACd,gBAAgB,EAChB,oBAAoB,GACrB,GAAG,KAAK,CAAC,OAAO,CAAC;AAElB,YAAY;AACZ,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAmB,EAAE,CAC/D,KAAK,CAAC,eAAe,CAAoB,CAAC;AAC5C,MAAM,CAAC,MAAM,uBAAuB,GAAG,cAAc,CACnD,WAAW,EACX,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,iBAAiB,CACnC,CAAC;AACF,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;AACjG,MAAM,CAAC,MAAM,mBAAmB,GAAG,SAAS,CAAC;AAC7C,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CAAC;AAC7C,MAAM,CAAC,MAAM,qBAAqB,GAAG,WAAW,CAAC;AAEjD,MAAM,CAAC,MAAM,qBAAqB,GAAG,cAAc,CACjD,CAAC,cAAc,EAAE,uBAAuB,CAAC,EACzC,CAAC,UAAU,EAAE,iBAAiB,EAAE,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CACjE,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,cAAc,CACxD,qBAAqB,EACrB,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAChC,CAAC;AAEF,eAAe,KAAK,CAAC,OAAO,CAAC","sourcesContent":["import {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityAdapter,\n  EntityId,\n  EntityState,\n  PayloadAction,\n  Slice,\n} from '@reduxjs/toolkit';\nimport { ObjectiveMap } from 'data/content/activity';\nimport { RootState } from '../../rootReducer';\nexport interface ActivityContent {\n  custom?: any;\n  partsLayout: any[];\n  [key: string]: any;\n}\nexport interface IActivity {\n  id: EntityId;\n  resourceId?: number;\n  authoring?: any;\n  content?: ActivityContent;\n  activityType?: any;\n  title?: string;\n  objectives?: ObjectiveMap;\n  tags: number[];\n  [key: string]: any;\n}\n\nexport interface ActivitiesState extends EntityState<IActivity> {\n  currentActivityId: EntityId;\n}\n\nconst adapter: EntityAdapter<IActivity> = createEntityAdapter<IActivity>();\n\nconst slice: Slice<ActivitiesState> = createSlice({\n  name: 'activities',\n  initialState: adapter.getInitialState({\n    currentActivityId: '' as EntityId,\n  }),\n  reducers: {\n    setActivities(state, action: PayloadAction<{ activities: IActivity[] }>) {\n      adapter.setAll(state, action.payload.activities);\n    },\n    upsertActivity(state, action: PayloadAction<{ activity: IActivity }>) {\n      adapter.upsertOne(state, action.payload.activity);\n    },\n    upsertActivities(state, action: PayloadAction<{ activities: IActivity[] }>) {\n      adapter.upsertMany(state, action.payload.activities);\n    },\n    deleteActivity(state, action: PayloadAction<{ activityId: string }>) {\n      adapter.removeOne(state, action.payload.activityId);\n    },\n    deleteActivities(state, action: PayloadAction<{ ids: string[] }>) {\n      adapter.removeMany(state, action.payload.ids);\n    },\n    setCurrentActivityId(state, action: PayloadAction<{ activityId: EntityId }>) {\n      state.currentActivityId = action.payload.activityId;\n    },\n  },\n});\n\nexport const ActivitiesSlice = slice.name;\n\nexport const {\n  setActivities,\n  upsertActivity,\n  upsertActivities,\n  deleteActivity,\n  deleteActivities,\n  setCurrentActivityId,\n} = slice.actions;\n\n// SELECTORS\nexport const selectState = (state: RootState): ActivitiesState =>\n  state[ActivitiesSlice] as ActivitiesState;\nexport const selectCurrentActivityId = createSelector(\n  selectState,\n  (state) => state.currentActivityId,\n);\nconst { selectAll, selectById, selectTotal, selectEntities } = adapter.getSelectors(selectState);\nexport const selectAllActivities = selectAll;\nexport const selectActivityById = selectById;\nexport const selectTotalActivities = selectTotal;\n\nexport const selectCurrentActivity = createSelector(\n  [selectEntities, selectCurrentActivityId],\n  (activities, currentActivityId) => activities[currentActivityId],\n);\n\nexport const selectCurrentActivityContent = createSelector(\n  selectCurrentActivity,\n  (activity) => activity?.content,\n);\n\nexport default slice.reducer;\n"]}