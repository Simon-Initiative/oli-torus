{"version":3,"file":"applyStateChange.js","sourceRoot":"","sources":["../../../../../../../../src/apps/delivery/store/features/adaptivity/actions/applyStateChange.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD,OAAO,EAEL,cAAc,EACd,gBAAgB,EAChB,yBAAyB,GAC1B,MAAM,wCAAwC,CAAC;AAChD,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AACxE,OAAO,EAAE,eAAe,EAAE,oBAAoB,EAAE,MAAM,UAAU,CAAC;AAEjE,MAAM,CAAC,MAAM,gBAAgB,GAAG,gBAAgB,CAC9C,GAAG,eAAe,mBAAmB,EACrC,CAAO,OAA8C,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC/E,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAErD,0EAA0E;IAC1E,MAAM,mBAAmB,GAAG,yBAAyB,CAAC,QAAQ,EAAe,CAAC,CAAC;IAE/E,MAAM,cAAc,GAAG,yBAAyB,CAAC,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/F,iIAAiI;IACjI,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,OAAY,EAAE,EAAuB,EAAE,EAAE;QAClF,MAAM,eAAe,GAAG,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,MAAM,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;YACvE,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;YACxD,OAAO,SAAS,CAAC;QACnB,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;QACd,OAAO,CAAC,eAAe,CAAC,GAAG,cAAc,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,QAAQ,CACN,oBAAoB,CAAC;QACnB,OAAO;KACR,CAAC,CACH,CAAC;AACJ,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from 'apps/delivery/store/rootReducer';\nimport {\n  ApplyStateOperation,\n  bulkApplyState,\n  defaultGlobalEnv,\n  getLocalizedStateSnapshot,\n} from '../../../../../../adaptivity/scripting';\nimport { selectCurrentActivityTree } from '../../groups/selectors/deck';\nimport { AdaptivitySlice, setMutationTriggered } from '../slice';\n\nexport const applyStateChange = createAsyncThunk(\n  `${AdaptivitySlice}/applyStateChange`,\n  async (payload: { operations: ApplyStateOperation[] }, { dispatch, getState }) => {\n    bulkApplyState(payload.operations, defaultGlobalEnv);\n\n    // TODO: this should only be a DECK LAYOUT concern, think of a cleaner way\n    const currentActivityTree = selectCurrentActivityTree(getState() as RootState);\n\n    const latestSnapshot = getLocalizedStateSnapshot((currentActivityTree || []).map((a) => a.id));\n    // instead of sending the entire enapshot, taking latest values from store and sending that as mutate state in all the components\n    const changes = payload.operations.reduce((collect: any, op: ApplyStateOperation) => {\n      const localizedTarget = currentActivityTree?.reduce((target, activity) => {\n        const localized = target.replace(`${activity.id}|`, '');\n        return localized;\n      }, op.target);\n      collect[localizedTarget] = latestSnapshot[op.target];\n      return collect;\n    }, {});\n\n    dispatch(\n      setMutationTriggered({\n        changes,\n      }),\n    );\n  },\n);\n"]}