{"version":3,"file":"triggerCheck.js","sourceRoot":"","sources":["../../../../../../../../src/apps/delivery/store/features/adaptivity/actions/triggerCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from 'apps/delivery/store/rootReducer';\nimport { PartResponse } from 'components/activities/types';\nimport { evalActivityAttempt, writePageAttemptState } from 'data/persistence/state/intrinsic';\nimport { check, CheckResult, ScoringContext } from '../../../../../../adaptivity/rules-engine';\nimport {\n  applyState,\n  ApplyStateOperation,\n  bulkApplyState,\n  defaultGlobalEnv,\n  getLocalizedStateSnapshot,\n  getValue,\n} from '../../../../../../adaptivity/scripting';\nimport { createActivityAttempt } from '../../attempt/actions/createActivityAttempt';\nimport { selectExtrinsicState, updateExtrinsicState } from '../../attempt/slice';\nimport {\n  selectCurrentActivityTree,\n  selectCurrentActivityTreeAttemptState,\n} from '../../groups/selectors/deck';\nimport { selectPreviewMode, selectResourceAttemptGuid, selectSectionSlug } from '../../page/slice';\nimport { AdaptivitySlice, setLastCheckResults, setLastCheckTriggered } from '../slice';\n\nconst handleParentChildActivityVariableSync = (\n  treeActivityIds: string[],\n  currentActivityId: string,\n  localizedSnapshot: Record<string, any>,\n) => {\n  // handle parent/child variable sync  - Block Start\n  const filteredTreeActivityIds: string[] = treeActivityIds.filter(\n    (activity) => activity !== currentActivityId,\n  );\n  const parentVariables = filteredTreeActivityIds.map((item: string) => {\n    //need to filter all the variable that belong to parents of the current activity\n    const filteredParentScreenIdVariables = Object.keys(localizedSnapshot).filter((gotid) => {\n      if (\n        gotid.indexOf(item) !== -1 &&\n        gotid.startsWith(item) &&\n        !gotid.startsWith(currentActivityId)\n      ) {\n        const variables = gotid.split('|');\n        const v = gotid.replace(`${variables[0]}|stage`, `${currentActivityId}|stage`);\n        //need to make sure that the variabled doesn't exist for the current activity as we don't want to update the values of current activity\n        return Object.keys(localizedSnapshot).indexOf(v) === -1;\n      }\n    });\n    return [...filteredParentScreenIdVariables];\n  });\n  const updatedCurrentActivityVariables: Record<string, any> = {};\n  //now we are replacing the parent activity id with current activity Id\n  parentVariables.forEach((key) => {\n    key.forEach((item) => {\n      const variables = item.split('|');\n      const v = item.replace(`${variables[0]}|stage`, `${currentActivityId}|stage`);\n      updatedCurrentActivityVariables[v] = localizedSnapshot[item];\n    });\n  });\n  if (Object.keys(updatedCurrentActivityVariables).length) {\n    //formatting the variables for sending it to scripting\n    const finalCurrentActivityVariables: ApplyStateOperation[] = Object.keys(\n      updatedCurrentActivityVariables,\n    ).map((yup) => {\n      const globalOp: ApplyStateOperation = {\n        target: yup,\n        operator: '=',\n        value: updatedCurrentActivityVariables[yup],\n      };\n      return globalOp;\n    });\n\n    bulkApplyState(finalCurrentActivityVariables, defaultGlobalEnv);\n  }\n  // handle parent/child variable sync  - Block End\n};\n\nexport const triggerCheck = createAsyncThunk(\n  `${AdaptivitySlice}/triggerCheck`,\n  async (options: { activityId: string; customRules?: any[] }, { dispatch, getState }) => {\n    const rootState = getState() as RootState;\n    const isPreviewMode = selectPreviewMode(rootState);\n    const sectionSlug = selectSectionSlug(rootState);\n    const resourceAttemptGuid = selectResourceAttemptGuid(rootState);\n\n    const currentActivityTreeAttempts = selectCurrentActivityTreeAttemptState(rootState) || [];\n    const currentAttempt = currentActivityTreeAttempts[currentActivityTreeAttempts?.length - 1];\n    const currentActivityAttemptGuid = currentAttempt?.attemptGuid || '';\n\n    const currentActivityTree = selectCurrentActivityTree(rootState);\n    if (!currentActivityTree || !currentActivityTree.length) {\n      throw new Error('No Activity Tree, something very wrong!');\n    }\n    const [currentActivity] = currentActivityTree.slice(-1);\n\n    // update time on question\n    applyState(\n      {\n        target: 'session.timeOnQuestion',\n        operator: '=',\n        value: `${Date.now()} - {session.timeStartQuestion}`,\n      },\n      defaultGlobalEnv,\n    );\n\n    // for history tracking\n    const trackingStampKey = `session.visitTimestamps.${currentActivity.id}`;\n    const isActivityAlreadyVisited = !!getValue(trackingStampKey, defaultGlobalEnv);\n    // don't update the time if student is revisiting that page\n    if (!isActivityAlreadyVisited) {\n      // looks like SS captures the date when we leave the page so we will capture the time here for tracking history\n      // update the scripting\n      const targetVisitTimeStampOp: ApplyStateOperation = {\n        target: trackingStampKey,\n        operator: '=',\n        value: Date.now(),\n      };\n      applyState(targetVisitTimeStampOp, defaultGlobalEnv);\n    }\n\n    //update the store with the latest changes\n    const currentTriggerStamp = Date.now();\n    await dispatch(setLastCheckTriggered({ timestamp: currentTriggerStamp }));\n\n    const treeActivityIds = currentActivityTree.map((a) => a.id);\n    const localizedSnapshot = getLocalizedStateSnapshot(treeActivityIds, defaultGlobalEnv);\n    handleParentChildActivityVariableSync(treeActivityIds, currentActivity.id, localizedSnapshot);\n    const extrinsicSnapshot = Object.keys(localizedSnapshot).reduce(\n      (acc: Record<string, any>, key) => {\n        const isSessionVariable = key.startsWith('session.');\n        const isVarVariable = key.startsWith('variables.');\n        //Once Beagle App functionality is integrated, this can be removed\n        const isBeagleVariable = key.startsWith('app.');\n        if (isSessionVariable || isVarVariable || isBeagleVariable) {\n          acc[key] = localizedSnapshot[key];\n        }\n        return acc;\n      },\n      {},\n    );\n    // update redux first because we need to get the latest full extrnisic state to write to the server\n    await dispatch(updateExtrinsicState({ state: extrinsicSnapshot }));\n\n    if (!isPreviewMode) {\n      // update the server with the latest changes\n      const extrnisicState = selectExtrinsicState(getState() as RootState);\n      /* console.log('trigger check last min extrinsic state', {\n        sectionSlug,\n        resourceAttemptGuid,\n        extrnisicState,\n      }); */\n      await writePageAttemptState(sectionSlug, resourceAttemptGuid, extrnisicState);\n    }\n\n    let checkResult;\n    let isCorrect = false;\n    let score = 0;\n    let outOf = 0;\n\n    const scoringContext: ScoringContext = {\n      currentAttemptNumber: currentAttempt?.attemptNumber || 1,\n      maxAttempt: currentActivity.content.custom.maxAttempt || 0,\n      maxScore: currentActivity.content.custom.maxScore || 0,\n      trapStateScoreScheme: currentActivity.content.custom.trapStateScoreScheme || false,\n      negativeScoreAllowed: currentActivity.content.custom.negativeScoreAllowed || false,\n    };\n\n    // if preview mode, gather up all state and rules from redux\n    if (isPreviewMode) {\n      // need to get this fresh right now so it is the latest\n      const rootState = getState() as RootState;\n      const currentActivityTreeAttempts = selectCurrentActivityTreeAttemptState(rootState) || [];\n      const [currentAttempt] = currentActivityTreeAttempts.slice(-1);\n\n      const treeActivityIds = currentActivityTree.map((a) => a.id).reverse();\n      const localizedSnapshot = getLocalizedStateSnapshot(treeActivityIds, defaultGlobalEnv);\n\n      const currentRules = JSON.parse(JSON.stringify(currentActivity?.authoring?.rules || []));\n      // custom rules can be provided via PreviewTools Adaptivity pane for specific rule triggering\n      const customRules = options.customRules || [];\n      const rulesToCheck = customRules.length > 0 ? customRules : currentRules;\n\n      console.log('PRE CHECK RESULT', { currentActivity, currentRules, localizedSnapshot });\n      const check_call_result = (await check(\n        localizedSnapshot,\n        rulesToCheck,\n        scoringContext,\n      )) as CheckResult;\n      checkResult = check_call_result.results;\n      isCorrect = check_call_result.correct;\n      score = check_call_result.score;\n      outOf = check_call_result.out_of;\n      console.log('CHECK RESULT', {\n        check_call_result,\n        currentActivity,\n        currentRules,\n        checkResult,\n        localizedSnapshot,\n        currentActivityTreeAttempts,\n        currentAttempt,\n        currentActivityTree,\n      });\n    } else {\n      // need to get this fresh right now so it is the latest\n      const rootState = getState() as RootState;\n      const currentActivityTreeAttempts = selectCurrentActivityTreeAttemptState(rootState) || [];\n      const [currentAttempt] = currentActivityTreeAttempts.slice(-1);\n\n      if (!currentActivityAttemptGuid) {\n        console.error('not current attempt, cannot eval', { currentActivityAttemptGuid });\n        return;\n      }\n\n      // we have to send all the current activity attempt state to the server\n      // because the server doesn't know the current sequence id and will strip out\n      // all sequence ids from the path for these only\n\n      const treeActivityIds = currentActivityTree.map((a) => a.id).reverse();\n      const localizedSnapshot = getLocalizedStateSnapshot(treeActivityIds, defaultGlobalEnv);\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const partResponses: PartResponse[] = currentAttempt!.parts.map(\n        ({ partId, attemptGuid, response }) => {\n          // snapshot is more up to date\n          // TODO: resolve syncing issue, this is a workaround\n          let finalResponse = response;\n          if (!finalResponse) {\n            // if a null response, it actually might live on a parent attempt\n            // walk backwards to find the parent\n            finalResponse = currentActivityTreeAttempts.reduce((acc, attempt) => {\n              const part = attempt?.parts.find((p) => p.partId === partId);\n              return part?.response || acc;\n            }, null);\n          }\n          if (finalResponse) {\n            finalResponse = Object.keys(finalResponse).reduce((acc: any, key) => {\n              acc[key] = { ...finalResponse[key] };\n              const item = acc[key];\n              if (item.path) {\n                const snapshotValue = localizedSnapshot[item.path];\n                if (snapshotValue !== undefined) {\n                  item.value = snapshotValue;\n                }\n              }\n              return acc;\n            }, {});\n          }\n          return {\n            attemptGuid,\n            response: { input: finalResponse },\n          };\n        },\n      );\n\n      /* console.log('CHECKING', {\n        sectionSlug,\n        currentActivityTreeAttempts,\n        currentAttempt,\n        currentActivityTree,\n        localizedSnapshot,\n        partResponses,\n      }); */\n\n      const evalResult = await evalActivityAttempt(\n        sectionSlug,\n        currentActivityAttemptGuid,\n        partResponses,\n      );\n\n      /* console.log('EVAL RESULT', { evalResult }); */\n      const resultData: CheckResult = (evalResult as any).result.actions;\n      checkResult = resultData.results;\n      isCorrect = resultData.correct;\n      score = resultData.score;\n      outOf = resultData.out_of;\n    }\n\n    let attempt: any = currentAttempt;\n    if (!isCorrect) {\n      /* console.log('Incorrect, time for new attempt'); */\n      const { payload: newAttempt } = await dispatch(\n        createActivityAttempt({ sectionSlug, attemptGuid: currentActivityAttemptGuid }),\n      );\n      attempt = newAttempt;\n      const updateAttempt: ApplyStateOperation[] = [\n        {\n          target: 'session.attemptNumber',\n          operator: '=',\n          value: attempt.attemptNumber,\n        },\n        {\n          target: `${currentActivity.id}|session.attemptNumber`,\n          operator: '=',\n          value: attempt.attemptNumber,\n        },\n      ];\n      bulkApplyState(updateAttempt, defaultGlobalEnv);\n      // need to write attempt number to extrinsic state?\n      // TODO: also get attemptNumber alwasy from the attempt and update scripting instead\n    }\n\n    // TODO: get score back from check result\n    bulkApplyState(\n      [\n        { target: 'session.currentQuestionScore', operator: '=', value: score },\n        { target: `session.visits.${currentActivity.id}`, operator: '=', value: 1 },\n      ],\n      defaultGlobalEnv,\n    );\n\n    await dispatch(\n      setLastCheckResults({\n        timestamp: currentTriggerStamp,\n        results: checkResult,\n        attempt,\n        correct: isCorrect,\n        score,\n        outOf,\n      }),\n    );\n  },\n);\n"]}