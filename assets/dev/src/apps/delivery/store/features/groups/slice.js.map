{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../../../../src/apps/delivery/store/features/groups/slice.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,EACnB,cAAc,EACd,WAAW,GAKZ,MAAM,kBAAkB,CAAC;AAG1B,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,2BAAa,CAAA;IACb,iCAAmB,CAAA;AACrB,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAiBD,MAAM,OAAO,GAA0B,mBAAmB,EAAU,CAAC;AAErE,MAAM,KAAK,GAAuB,WAAW,CAAC;IAC5C,IAAI,EAAE,QAAQ;IACd,YAAY,EAAE,OAAO,CAAC,eAAe,CAAC;QACpC,cAAc,EAAE,CAAC,CAAC;KACnB,CAAC;IACF,QAAQ,EAAE;QACR,iBAAiB,CAAC,KAAK,EAAE,MAA0C;YACjE,KAAK,CAAC,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;QAChD,CAAC;QACD,SAAS,CAAC,KAAK,EAAE,MAA2C;YAC1D,4EAA4E;YAC5E,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBACxD,MAAM,EAAE,GAAG,KAAK,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;gBACzD,wCAAwC;gBACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;oBAC5C,IAAI,KAAK,CAAC,IAAI,KAAK,oBAAoB,EAAE;wBACvC,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC;wBAC7E,uCAAY,KAAK,KAAE,UAAU,IAAG;qBACjC;oBACD,OAAO,KAAK,CAAC;gBACf,CAAC,CAAC,CAAC;gBACH,uCAAY,KAAK,KAAE,EAAE,EAAE,QAAQ,IAAG;YACpC,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC9B,2EAA2E;YAC3E,KAAK,CAAC,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtC,CAAC;QACD,WAAW,CAAC,KAAK,EAAE,MAAwC;YACzD,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC;AAEtC,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;AAE3E,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAe,EAAE,CAAC,KAAK,CAAC,WAAW,CAAgB,CAAC;AAChG,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;AACxF,MAAM,CAAC,MAAM,kBAAkB,GAAG,cAAc,CAC9C,WAAW,EACX,CAAC,KAAkB,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAC7D,CAAC;AAEF,eAAe,KAAK,CAAC,OAAO,CAAC","sourcesContent":["import {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityAdapter,\n  EntityState,\n  PayloadAction,\n  Slice,\n} from '@reduxjs/toolkit';\nimport { RootState } from '../../rootReducer';\n\nexport enum LayoutType {\n  DECK = 'deck',\n  UNKNOWN = 'unknown',\n}\n\nexport interface IGroup {\n  id?: number;\n  type: 'group';\n  layout: LayoutType;\n  children: any[]; // TODO: activity types\n}\n\nexport interface DeckLayoutGroup extends IGroup {\n  layout: LayoutType.DECK;\n}\n\nexport interface GroupsState extends EntityState<IGroup> {\n  currentGroupId: number;\n}\n\nconst adapter: EntityAdapter<IGroup> = createEntityAdapter<IGroup>();\n\nconst slice: Slice<GroupsState> = createSlice({\n  name: 'groups',\n  initialState: adapter.getInitialState({\n    currentGroupId: -1,\n  }),\n  reducers: {\n    setCurrentGroupId(state, action: PayloadAction<{ groupId: number }>) {\n      state.currentGroupId = action.payload.groupId;\n    },\n    setGroups(state, action: PayloadAction<{ groups: IGroup[] }>) {\n      // groups aren't currently having resourceIds so we need to set id via index\n      const groups = action.payload.groups.map((group, index) => {\n        const id = group.id !== undefined ? group.id : index + 1;\n        // careful, doesn't handle nested groups\n        const children = group.children.map((child) => {\n          if (child.type === 'activity-reference') {\n            const resourceId = child.activity_id || child.activityId || child.resourceId;\n            return { ...child, resourceId };\n          }\n          return child;\n        });\n        return { ...group, id, children };\n      });\n      adapter.setAll(state, groups);\n      // for now just select first one (dont even have a multi group concept yet)\n      state.currentGroupId = groups[0].id;\n    },\n    upsertGroup(state, action: PayloadAction<{ group: IGroup }>) {\n      adapter.upsertOne(state, action.payload.group);\n    },\n  },\n});\n\nexport const GroupsSlice = slice.name;\n\nexport const { setCurrentGroupId, setGroups, upsertGroup } = slice.actions;\n\nexport const selectState = (state: RootState): GroupsState => state[GroupsSlice] as GroupsState;\nexport const { selectAll, selectById, selectTotal } = adapter.getSelectors(selectState);\nexport const selectCurrentGroup = createSelector(\n  selectState,\n  (state: GroupsState) => state.entities[state.currentGroupId],\n);\n\nexport default slice.reducer;\n"]}