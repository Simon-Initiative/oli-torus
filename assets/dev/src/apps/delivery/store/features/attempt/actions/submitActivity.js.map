{"version":3,"file":"submitActivity.js","sourceRoot":"","sources":["../../../../../../../../src/apps/delivery/store/features/attempt/actions/submitActivity.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,yBAAyB,EAAE,MAAM,kCAAkC,CAAC;AAC7E,OAAO,EACL,gBAAgB,EAChB,UAAU,EACV,eAAe,GAChB,MAAM,wCAAwC,CAAC;AAEhD,OAAO,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACxE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,0BAA0B,EAAE,MAAM,UAAU,CAAC;AAEhF,MAAM,CAAC,MAAM,mBAAmB,GAAG,gBAAgB,CACjD,GAAG,YAAY,sBAAsB,EACrC,CAAO,OAAY,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC7C,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;IAC/C,MAAM,SAAS,GAAG,QAAQ,EAAe,CAAC;IAC1C,MAAM,aAAa,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACnD,MAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAEjD,6CAA6C;IAC7C,MAAM,aAAa,GAAG,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACzD,IAAI,aAAa,EAAE;QACjB,MAAM,OAAO,mCACR,aAAa,KAChB,KAAK,EAAE,aAAa,GACrB,CAAC;QACF,MAAM,QAAQ,CAAC,0BAA0B,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;KAClE;IAED,uCAAuC;IACvC,MAAM,YAAY,GAAG,eAAe,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACtE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAE5E,6DAA6D;IAC7D,IAAI,aAAa,EAAE;QACjB,sFAAsF;QACtF,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC;KACjC;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC;IAEtB,OAAO,yBAAyB,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;AACtF,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { writeActivityAttemptState } from 'data/persistence/state/intrinsic';\nimport {\n  defaultGlobalEnv,\n  evalScript,\n  getAssignScript,\n} from '../../../../../../adaptivity/scripting';\nimport { RootState } from '../../../rootReducer';\nimport { selectPreviewMode, selectSectionSlug } from '../../page/slice';\nimport { AttemptSlice, selectById, upsertActivityAttemptState } from '../slice';\n\nexport const submitActivityState = createAsyncThunk(\n  `${AttemptSlice}/submitActivityState`,\n  async (payload: any, { dispatch, getState }) => {\n    const { attemptGuid, partResponses } = payload;\n    const rootState = getState() as RootState;\n    const isPreviewMode = selectPreviewMode(rootState);\n    const sectionSlug = selectSectionSlug(rootState);\n\n    // update redux state to match optimistically\n    const attemptRecord = selectById(rootState, attemptGuid);\n    if (attemptRecord) {\n      const updated = {\n        ...attemptRecord,\n        parts: partResponses,\n      };\n      await dispatch(upsertActivityAttemptState({ attempt: updated }));\n    }\n\n    // update script env with latest values\n    const assignScript = getAssignScript(partResponses, defaultGlobalEnv);\n    const { result: scriptResult } = evalScript(assignScript, defaultGlobalEnv);\n\n    // in preview mode we don't talk to the server, so we're done\n    if (isPreviewMode) {\n      // TODO: normalize result response between client and server (currently nothing cares)\n      return { result: scriptResult };\n    }\n\n    const finalize = true;\n\n    return writeActivityAttemptState(sectionSlug, attemptGuid, partResponses, finalize);\n  },\n);\n"]}