{"version":3,"file":"createActivityAttempt.js","sourceRoot":"","sources":["../../../../../../../../src/apps/delivery/store/features/attempt/actions/createActivityAttempt.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAC5E,OAAO,IAAI,MAAM,YAAY,CAAC;AAE9B,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,0BAA0B,EAAE,MAAM,UAAU,CAAC;AAEhF,MAAM,CAAC,MAAM,qBAAqB,GAAG,gBAAgB,CACnD,GAAG,YAAY,wBAAwB,EACvC,CAAO,OAAY,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC7C,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IAC7C,MAAM,SAAS,GAAG,QAAQ,EAAe,CAAC;IAC1C,MAAM,aAAa,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAEnD,IAAI,OAAO,GAAG,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACjD,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,qCAAqC,WAAW,EAAE,CAAC,CAAC;KACrE;IACD,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACtC,IAAI,aAAa,EAAE;QACjB,eAAe;QACf,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAkB,CAAC;QAC/D,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC;QAC3B,OAAO,CAAC,WAAW,GAAG,YAAY,IAAI,EAAE,EAAE,CAAC;KAC5C;SAAM;QACL,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,kCAAkC;QAC9D,MAAM,kBAAkB,GAAG,MAAM,wBAAwB,CACvD,WAAW,EACX,WAAW,EACX,aAAa,CACd,CAAC;QACF,0CAA0C;QAC1C,OAAO,GAAG,kBAAkB,CAAC,YAA6B,CAAC;QAC3D,mFAAmF;QACnF,yDAAyD;QACzD,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;KACjC;IAED,MAAM,QAAQ,CAAC,0BAA0B,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAExD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { ActivityState } from 'components/activities/types';\nimport { createNewActivityAttempt } from 'data/persistence/state/intrinsic';\nimport guid from 'utils/guid';\nimport { RootState } from '../../../../store/rootReducer';\nimport { selectPreviewMode } from '../../page/slice';\nimport { AttemptSlice, selectById, upsertActivityAttemptState } from '../slice';\n\nexport const createActivityAttempt = createAsyncThunk(\n  `${AttemptSlice}/createActivityAttempt`,\n  async (payload: any, { dispatch, getState }) => {\n    const { sectionSlug, attemptGuid } = payload;\n    const rootState = getState() as RootState;\n    const isPreviewMode = selectPreviewMode(rootState);\n\n    let attempt = selectById(rootState, attemptGuid);\n    if (!attempt) {\n      throw new Error(`Unable to find attempt with guid: ${attemptGuid}`);\n    }\n    const resourceId = attempt.activityId;\n    if (isPreviewMode) {\n      // make mutable\n      attempt = JSON.parse(JSON.stringify(attempt)) as ActivityState;\n      attempt.attemptNumber += 1;\n      attempt.attemptGuid = `npreview_${guid()}`;\n    } else {\n      const seedResponses = true; // parameterize at function level?\n      const new_attempt_result = await createNewActivityAttempt(\n        sectionSlug,\n        attemptGuid,\n        seedResponses,\n      );\n      /* console.log({ new_attempt_result }); */\n      attempt = new_attempt_result.attemptState as ActivityState;\n      // this should be for the same resource id, which doesn't come back from the server\n      // because it's already based on the previous attemptGuid\n      attempt.activityId = resourceId;\n    }\n\n    await dispatch(upsertActivityAttemptState({ attempt }));\n\n    return attempt;\n  },\n);\n"]}