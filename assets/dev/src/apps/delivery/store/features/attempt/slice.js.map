{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../../../../src/apps/delivery/store/features/attempt/slice.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityAdapter,\n  EntityState,\n  PayloadAction,\n  Slice,\n} from '@reduxjs/toolkit';\nimport { ActivityState } from 'components/activities/types';\nimport { RootState } from '../../rootReducer';\n\ninterface ExtrinsicState extends Record<string, unknown> {\n  'session.attemptNumber': number;\n  'session.timeOnQuestion': number;\n  'session.timeQuestionStart': number;\n}\nexport interface AttemptState extends EntityState<ActivityState> {\n  resourceAttemptGuid: string;\n  extrinsic: ExtrinsicState;\n}\n\nconst adapter: EntityAdapter<ActivityState> = createEntityAdapter<ActivityState>({\n  selectId: (item) => item.attemptGuid,\n});\n\nconst slice: Slice<AttemptState> = createSlice({\n  name: 'attempt',\n  initialState: adapter.getInitialState({\n    resourceAttemptGuid: '',\n    extrinsic: {\n      'session.attemptNumber': 1,\n      'session.timeOnQuestion': 0,\n      'session.timeQuestionStart': 0,\n    },\n  }),\n  reducers: {\n    setResourceAttemptGuid(state, action: PayloadAction<{ guid: string }>) {\n      state.resourceAttemptGuid = action.payload.guid;\n    },\n    setExtrinsicState(state, action: PayloadAction<{ state: ExtrinsicState }>) {\n      state.extrinsic = action.payload.state;\n    },\n    updateExtrinsicState(state, action: PayloadAction<{ state: Partial<ExtrinsicState> }>) {\n      state.extrinsic = { ...state.extrinsic, ...action.payload.state };\n    },\n    loadActivityAttemptState(state, action: PayloadAction<{ attempts: ActivityState[] }>) {\n      adapter.setAll(state, action.payload.attempts);\n    },\n    upsertActivityAttemptState(state, action: PayloadAction<{ attempt: ActivityState }>) {\n      // we only want to keep the latest attempt record for any activityId\n      const existing = adapter\n        .getSelectors()\n        .selectAll(state)\n        .filter(\n          (attempt) =>\n            attempt.activityId === action.payload.attempt.activityId &&\n            attempt.attemptGuid !== action.payload.attempt.attemptGuid,\n        );\n      if (existing.length) {\n        adapter.removeMany(\n          state,\n          existing.map((e) => e.attemptGuid),\n        );\n      }\n      adapter.upsertOne(state, action.payload.attempt);\n    },\n  },\n});\n\nexport const AttemptSlice = slice.name;\n\nexport const {\n  setResourceAttemptGuid,\n  setExtrinsicState,\n  updateExtrinsicState,\n  loadActivityAttemptState,\n  upsertActivityAttemptState,\n} = slice.actions;\n\nexport const selectState = (state: RootState): AttemptState => state[AttemptSlice] as AttemptState;\nexport const { selectAll, selectById, selectTotal } = adapter.getSelectors(selectState);\n\nexport const selectActivityAttemptState = (\n  state: RootState,\n  activityId: number | undefined,\n): ActivityState | undefined => {\n  const attempts = selectAll(state);\n  const attempt = attempts.find((a) => a.activityId === activityId);\n  return attempt;\n};\n\nexport const selectExtrinsicState = createSelector(\n  selectState,\n  (state: AttemptState) => state.extrinsic,\n);\n\nexport default slice.reducer;\n"]}