{"version":3,"file":"FeedbackRenderer.jsx","sourceRoot":"","sources":["../../../../../../../src/apps/delivery/layouts/deck/components/FeedbackRenderer.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC1E,OAAO,mBAAmB,MAAM,uFAAuF,CAAC;AAOxH,MAAM,gBAAgB,GAAoC,CAAC,EAAE,SAAS,EAAE,QAAQ,GAAG,EAAE,EAAE,EAAE,EAAE;IACzF,2DAA2D;IAC3D,kDAAkD;IAClD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAS,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAE7D,SAAS,CAAC,GAAG,EAAE;QACb,kEAAkE;QAClE,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC1B,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,MAAM,cAAc,GAAG,WAAW,CAChC,CAAO,MAAc,EAAE,EAAE;QACvB,2DAA2D;QAC3D,OAAO,EAAE,QAAQ,EAAE,CAAC;IACtB,CAAC,CAAA,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,OAAO,CACL,CAAC,QAAQ,CACP;MAAA,CAAC,KAAK,CACJ;QAAA,CAAC;;;;;;;SAOA,CACH;MAAA,EAAE,KAAK,CACP;MAAA,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAC3B,CAAC,GAAG,CACF,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI,QAAQ,EAAE,CAAC,CAClC,KAAK,CAAC,CAAC;gBACL,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK;gBAC5B,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM;gBAC9B,eAAe,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe;gBACxD,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW;gBAChD,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW;gBAChD,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW;gBAChD,YAAY,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY;aACnD,CAAC,CACF,SAAS,CAAC,eAAe,CAEzB;UAAA,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,EAC/E;QAAA,EAAE,GAAG,CAAC,CACP,CAAC,CACJ;IAAA,EAAE,QAAQ,CAAC,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,gBAAgB,CAAC","sourcesContent":["import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport PartsLayoutRenderer from '../../../../../components/activities/adaptive/components/delivery/PartsLayoutRenderer';\n\ninterface FeedbackRendererProps {\n  feedbacks: any[];\n  snapshot?: any;\n}\n\nconst FeedbackRenderer: React.FC<FeedbackRendererProps> = ({ feedbacks, snapshot = {} }) => {\n  // use a key to force re-render when feedback array changes\n  // feedback might be the same but needs to refresh\n  const [renderId, setRenderId] = useState<number>(Date.now());\n\n  useEffect(() => {\n    // console.log('FEEDBACK ARRAY CHANGED', { feedbacks, snapshot });\n    setRenderId(Date.now());\n  }, [feedbacks]);\n\n  const handlePartInit = useCallback(\n    async (partId: string) => {\n      // console.log('FEEDBACK part init', { partId, snapshot });\n      return { snapshot };\n    },\n    [snapshot],\n  );\n\n  return (\n    <Fragment>\n      <style>\n        {`\n          .feedback-item > * {\n            position: static !important;\n          }\n          .feedback-item janus-text-flow {\n            width: auto !important;\n          }\n        `}\n      </style>\n      {feedbacks.map((feedback) => (\n        <div\n          key={`${feedback.id}_${renderId}`}\n          style={{\n            width: feedback.custom.width,\n            height: feedback.custom.height,\n            backgroundColor: feedback.custom.palette.backgroundColor,\n            borderWidth: feedback.custom.palette.borderWidth,\n            borderColor: feedback.custom.palette.borderColor,\n            borderStyle: feedback.custom.palette.borderStyle,\n            borderRadius: feedback.custom.palette.borderRadius,\n          }}\n          className=\"feedback-item\"\n        >\n          <PartsLayoutRenderer parts={feedback.partsLayout} onPartInit={handlePartInit} />\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default FeedbackRenderer;\n"]}