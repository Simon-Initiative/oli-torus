{"version":3,"file":"Inspector.jsx","sourceRoot":"","sources":["../../../../../../src/apps/delivery/components/preview-tools/Inspector.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-prototype-builtins */\n/* eslint-disable react/prop-types */\nimport debounce from 'lodash/debounce';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CapiVariable } from '../../../../adaptivity/capi';\nimport {\n  ApplyStateOperation,\n  defaultGlobalEnv,\n  getEnvState,\n} from '../../../../adaptivity/scripting';\nimport { applyStateChange } from '../../store/features/adaptivity/actions/applyStateChange';\nimport { selectCurrentActivityTree } from '../../store/features/groups/selectors/deck';\nimport StateDisplay from './inspector/StateDisplay';\nimport { unflatten } from './inspector/utils';\n\ninterface InspectorProps {\n  currentActivity: any;\n}\n// Inspector Placeholder\nconst Inspector: React.FC<InspectorProps> = ({ currentActivity }) => {\n  const dispatch = useDispatch();\n\n  const [globalState, setGlobalState] = useState<any>(null);\n  const [sessionState, setSessionState] = useState<any>({});\n  const [variablesState, setVariablesState] = useState<any>({});\n  const [stageState, setStageState] = useState<any>({});\n  const [appState, setAppState] = useState<Record<string, unknown>>({});\n\n  const [autoApplyChanges, setAutoApplyChanges] = useState(false);\n  const [changeOperations, setChangeOperations] = useState<ApplyStateOperation[]>([]);\n\n  // TODO: technically this tree concept only exists in the DECK layout\n  // another layout like single activity or stacked might not have layers to deal with\n  // so need to create some kind of generic layout method to get the needed info instead\n  // well actually the preview tools might only apply to deck layout\n  const currentActivityTree = useSelector(selectCurrentActivityTree);\n\n  const getAppState = () => {\n    const statePuff: any = unflatten(globalState);\n    const appSlice = { ...statePuff['app'] };\n    /* console.log('APP STATE PUFF', { statePuff, appSlice }); */\n    return setAppState(appSlice);\n  };\n\n  const getSessionState = () => {\n    const statePuff: any = unflatten(globalState);\n    const sessionSlice = { ...statePuff['session'] };\n    /* console.log('SESSION STATE PUFF', { statePuff, sessionSlice }); */\n    return setSessionState(sessionSlice);\n  };\n\n  const getVariablesState = () => {\n    const statePuff: any = unflatten(globalState);\n    const variablesSlice = { ...statePuff['variables'] };\n    /* console.log('VARIABLES STATE PUFF', { statePuff, variablesSlice }); */\n    return setVariablesState(variablesSlice);\n  };\n\n  const getStageState = () => {\n    const statePuff: any = unflatten(globalState);\n    const stageSlice = currentActivityTree?.reduce((collect: any, activity) => {\n      //A layer variable exist in state with owner screen Id as well as with it's child screen. So, we have to make sure that we only display the owner Id's variables in the inspector\n      const activityVars = statePuff[`${activity.id}|stage`];\n      let ownerVariables: Record<string, any> = {};\n      if (activityVars) {\n        ownerVariables = Object.keys(activityVars)?.reduce((col: any, part: any) => {\n          const ownerActivity = currentActivityTree?.find(\n            (activity) => !!activity.content.partsLayout.find((p: any) => p.id === part),\n          );\n          if (ownerActivity.id === activity.id) {\n            const partVariables = statePuff[`${activity.id}|stage`];\n            const partCol: Record<string, unknown> = {};\n            partCol[part] = partVariables[part];\n            const next = { ...col, ...partCol };\n            return next;\n          } else {\n            return { ...col };\n          }\n        }, {});\n      }\n      if (ownerVariables) {\n        const next = { ...collect, ...ownerVariables };\n        return next;\n      } else {\n        return { ...collect };\n      }\n    }, {});\n    /* console.log('STAGE STATE PUFF', { statePuff, stageSlice }); */\n    return setStageState(stageSlice);\n  };\n\n  // change handler fires for every key, and there are often several at once\n  const debounceStateChanges = useCallback(\n    debounce(() => {\n      const allState = getEnvState(defaultGlobalEnv);\n      const globalStateAsVars = Object.keys(allState).reduce((collect: any, key) => {\n        collect[key] = new CapiVariable({ key, value: allState[key] });\n        return collect;\n      }, {});\n      setGlobalState(globalStateAsVars);\n    }, 50),\n    [],\n  );\n\n  useEffect(() => {\n    setAppState({});\n    setStageState({});\n    setSessionState({});\n    setVariablesState({});\n    debounceStateChanges();\n    defaultGlobalEnv.addListener('change', debounceStateChanges);\n    return () => {\n      defaultGlobalEnv.removeListener('change', debounceStateChanges);\n    };\n  }, [currentActivityTree]);\n\n  useEffect(() => {\n    if (!globalState) {\n      return;\n    }\n    getAppState();\n    getSessionState();\n    getVariablesState();\n    getStageState();\n  }, [globalState]);\n\n  const handleValueChange = useCallback(\n    (changeOp: ApplyStateOperation) => {\n      /* console.log('INSPECTOR TOP CHANGES', { changeOp, changeOperations }); */\n      if (autoApplyChanges) {\n        dispatch(applyStateChange({ operations: [changeOp] }));\n      } else {\n        setChangeOperations([...changeOperations, changeOp]);\n      }\n    },\n    [changeOperations],\n  );\n\n  const handleApplyChanges = useCallback(\n    (e) => {\n      if (changeOperations.length === 0) {\n        return;\n      }\n      dispatch(applyStateChange({ operations: changeOperations }));\n      setChangeOperations([]);\n    },\n    [changeOperations],\n  );\n\n  const handleCancelChanges = (e: any) => {\n    debounceStateChanges();\n    setChangeOperations([]);\n  };\n\n  const changeCount = changeOperations.length;\n  const hasChanges = changeCount > 0;\n\n  return (\n    <div className=\"inspector\">\n      <div className=\"apply-changes btn-group-sm p-2\" role=\"group\" aria-label=\"Apply changes\">\n        <button\n          disabled={!hasChanges}\n          type=\"button\"\n          className=\"btn btn-secondary mr-1\"\n          onClick={handleCancelChanges}\n        >\n          Cancel\n        </button>\n        <button\n          disabled={!hasChanges}\n          type=\"button\"\n          className=\"btn btn-primary ml-1\"\n          onClick={handleApplyChanges}\n        >\n          Apply {hasChanges ? `(${changeCount})` : null}\n        </button>\n      </div>\n      <div className=\"accordion\">\n        <StateDisplay label=\"App\" state={appState} onChange={handleValueChange} />\n        <StateDisplay label=\"Session\" state={sessionState} onChange={handleValueChange} />\n        <StateDisplay label=\"Variables\" state={variablesState} onChange={handleValueChange} />\n        <StateDisplay label=\"Stage\" state={stageState} onChange={handleValueChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default Inspector;\n"]}