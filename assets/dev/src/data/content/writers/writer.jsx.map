{"version":3,"file":"writer.jsx","sourceRoot":"","sources":["../../../../../src/data/content/writers/writer.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AA2C7B,MAAM,UAAU,aAAa,CAAC,KAAU;IACtC,OAAO,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC;AAC3E,CAAC;AAID,MAAM,OAAO,aAAa;IAMxB,MAAM,CAAC,OAAsB,EAAE,OAAqB,EAAE,IAAgB;QACpE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC1B,OAAO,CACL,EACE;UAAA,CAAE,OAAsB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CACxC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CACzC;cAAA,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CACnC;YAAA,EAAE,KAAK,CAAC,QAAQ,CAAC,CAClB,CAAC,CACJ;QAAA,GAAG,CACJ,CAAC;SACH;QAED,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;YAC1B,OAAO,CACL,EACE;UAAA,CAAE,OAAO,CAAC,QAAuB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAC/C,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CACpF,CAAC,CACJ;QAAA,GAAG,CACJ,CAAC;SACH;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACpC;QAED,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,QAA0B,EAAE,IAAI,CAAC,CAAC;QAElF,QAAQ,OAAO,CAAC,IAAI,EAAE;YACpB,KAAK,GAAG;gBACN,OAAO,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACxC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1C,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC9C,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5C,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC3C,KAAK,WAAW;gBACd,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC/C,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC3C,KAAK,WAAW;gBACd,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC/C,KAAK,YAAY;gBACf,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACjD,KAAK,GAAG;gBACN,OAAO,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACxC,KAAK,WAAW;gBACd,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC/C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,KAAK,CACf,OAAO,EACP,IAAI,EACJ,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EACjD,OAAO,CACR,CAAC;YACJ;gBACE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC7C;IACH,CAAC;CACF","sourcesContent":["import { ModelElement } from 'data/content/model/elements/types';\nimport React from 'react';\nimport { Text } from 'slate';\nimport { WriterContext } from './context';\n\nexport type Next = () => React.ReactElement;\ntype ElementWriter = (ctx: WriterContext, next: Next, text: ModelElement) => React.ReactElement;\n\nexport interface WriterImpl {\n  text: (ctx: WriterContext, text: Text) => React.ReactElement;\n  p: ElementWriter;\n  h1: ElementWriter;\n  h2: ElementWriter;\n  h3: ElementWriter;\n  h4: ElementWriter;\n  h5: ElementWriter;\n  h6: ElementWriter;\n  img: ElementWriter;\n  youtube: ElementWriter;\n  iframe: ElementWriter;\n  audio: ElementWriter;\n  table: ElementWriter;\n  tr: ElementWriter;\n  th: ElementWriter;\n  td: ElementWriter;\n  ol: ElementWriter;\n  ul: ElementWriter;\n  li: ElementWriter;\n  math: ElementWriter;\n  mathLine: ElementWriter;\n  code: ElementWriter;\n  codeLine: ElementWriter;\n  blockquote: ElementWriter;\n  a: ElementWriter;\n  inputRef: ElementWriter;\n  popup: (\n    ctx: WriterContext,\n    anchorNext: Next,\n    contentNext: Next,\n    text: ModelElement,\n  ) => React.ReactElement;\n  unsupported: (ctx: WriterContext, element: ModelElement) => React.ReactElement;\n}\n\nexport type ContentItem = { type: 'content'; children: ModelElement[] };\nexport function isContentItem(value: any): value is ContentItem {\n  return value && value.type === 'content' && value.children !== undefined;\n}\n\nexport type ContentTypes = ContentItem[] | ContentItem | ModelElement[] | ModelElement | Text;\n\nexport class ContentWriter {\n  render(context: WriterContext, content: ContentItem[], impl: WriterImpl): React.ReactElement;\n  render(context: WriterContext, content: ContentItem, impl: WriterImpl): React.ReactElement;\n  render(context: WriterContext, content: ModelElement[], impl: WriterImpl): React.ReactElement;\n  render(context: WriterContext, content: ModelElement, impl: WriterImpl): React.ReactElement;\n  render(context: WriterContext, content: Text, impl: WriterImpl): React.ReactElement;\n  render(context: WriterContext, content: ContentTypes, impl: WriterImpl): React.ReactElement {\n    if (Array.isArray(content)) {\n      return (\n        <>\n          {(content as Array<any>).map((item, i) => (\n            <React.Fragment key={item.type + String(i)}>\n              {this.render(context, item, impl)}\n            </React.Fragment>\n          ))}\n        </>\n      );\n    }\n\n    if (isContentItem(content)) {\n      return (\n        <>\n          {(content.children as Array<any>).map((child) => (\n            <React.Fragment key={child.id}>{this.render(context, child, impl)}</React.Fragment>\n          ))}\n        </>\n      );\n    }\n\n    if (Text.isText(content)) {\n      return impl.text(context, content);\n    }\n\n    const next = () => this.render(context, content.children as ModelElement[], impl);\n\n    switch (content.type) {\n      case 'p':\n        return impl.p(context, next, content);\n      case 'h1':\n        return impl.h1(context, next, content);\n      case 'h2':\n        return impl.h2(context, next, content);\n      case 'h3':\n        return impl.h3(context, next, content);\n      case 'h4':\n        return impl.h4(context, next, content);\n      case 'h5':\n        return impl.h5(context, next, content);\n      case 'h6':\n        return impl.h6(context, next, content);\n      case 'img':\n        return impl.img(context, next, content);\n      case 'youtube':\n        return impl.youtube(context, next, content);\n      case 'iframe':\n        return impl.iframe(context, next, content);\n      case 'audio':\n        return impl.audio(context, next, content);\n      case 'table':\n        return impl.table(context, next, content);\n      case 'tr':\n        return impl.tr(context, next, content);\n      case 'th':\n        return impl.th(context, next, content);\n      case 'td':\n        return impl.td(context, next, content);\n      case 'ol':\n        return impl.ol(context, next, content);\n      case 'ul':\n        return impl.ul(context, next, content);\n      case 'li':\n        return impl.li(context, next, content);\n      case 'math':\n        return impl.math(context, next, content);\n      case 'math_line':\n        return impl.mathLine(context, next, content);\n      case 'code':\n        return impl.code(context, next, content);\n      case 'code_line':\n        return impl.codeLine(context, next, content);\n      case 'blockquote':\n        return impl.blockquote(context, next, content);\n      case 'a':\n        return impl.a(context, next, content);\n      case 'input_ref':\n        return impl.inputRef(context, next, content);\n      case 'popup':\n        return impl.popup(\n          context,\n          next,\n          () => this.render(context, content.content, impl),\n          content,\n        );\n      default:\n        return impl.unsupported(context, content);\n    }\n  }\n}\n"]}