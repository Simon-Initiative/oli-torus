{"version":3,"file":"resource.js","sourceRoot":"","sources":["../../../../src/data/content/resource.ts"],"names":[],"mappings":"AAMA,OAAO,IAAI,MAAM,YAAY,CAAC;AAmC9B,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,+CAAM,CAAA;IACN,2DAAY,CAAA;AACd,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAOD,MAAM,CAAC,MAAM,gBAAgB,GAAc;IACzC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE;IACpC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE;IAC5C,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,iBAAiB,EAAE;IAClD,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,gBAAgB,EAAE;CACnD,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAc;IACxC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE;IACnC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE;IACtC,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE;IAC3C,EAAE,KAAK,EAAE,oBAAoB,EAAE,KAAK,EAAE,sBAAsB,EAAE;CAC/D,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,GAAsB,EAAE;IACpE,OAAO;QACL,IAAI,EAAE,SAAS;QACf,EAAE,EAAE,IAAI,EAAE;QACV,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAC/D,OAAO,EAAE,MAAM;KAChB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,OAAO;QACL,IAAI,EAAE,WAAW;QACjB,EAAE,EAAE,IAAI,EAAE;QACV,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE;QAC3B,OAAO,EAAE,MAAM;KACS,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import { ActivityModelSchema } from 'components/activities/types';\nimport * as Bank from 'data/content/bank';\nimport { ModelElement } from 'data/content/model/elements/types';\nimport { Objective } from 'data/content/objective';\nimport { Tag } from 'data/content/tags';\nimport { ActivitySlug, ActivityTypeSlug, ProjectSlug, ResourceId, ResourceSlug } from 'data/types';\nimport guid from 'utils/guid';\nimport { ActivityEditContext } from './activity';\n\nexport type PageContent = {\n  model: ResourceContent[];\n  [key: string]: any;\n};\n\nexport type AttachedObjectives = {\n  attached: ResourceId[];\n};\n\n// The types of things that can be present as top level\n// entries in a resource content array\nexport type ResourceContent =\n  | GroupContent\n  | StructuredContent\n  | ActivityReference\n  | ActivityBankSelection;\n\n// The full context necessary to operate a resource editing session\nexport type ResourceContext = {\n  graded: boolean; // Page or assessment?\n  authorEmail: string; // The current author\n  projectSlug: ProjectSlug; // The current project\n  resourceSlug: ResourceSlug; // The current resource\n  resourceId: ResourceId; // The resource id\n  title: string; // The title of the resource\n  content: PageContent; // Content of the resource\n  objectives: AttachedObjectives; // Attached objectives\n  allObjectives: Objective[]; // All objectives\n  allTags: Tag[]; // All available tags\n  activityContexts: ActivityEditContext[]; // Contexts for inline activity editing\n};\n\nexport enum ResourceType {\n  'page',\n  'assessment',\n}\n\nexport type Purpose = {\n  value: string;\n  label: string;\n};\n\nexport const ActivityPurposes: Purpose[] = [\n  { value: 'none', label: 'Activity' },\n  { value: 'checkpoint', label: 'Checkpoint' },\n  { value: 'didigetthis', label: 'Did I get this?' },\n  { value: 'learnbydoing', label: 'Learn by doing' },\n];\n\nexport const ContentPurposes: Purpose[] = [\n  { value: 'none', label: 'Content' },\n  { value: 'example', label: 'Example' },\n  { value: 'learnmore', label: 'Learn more' },\n  { value: 'manystudentswonder', label: 'Many students wonder' },\n];\n\nexport const createDefaultStructuredContent = (): StructuredContent => {\n  return {\n    type: 'content',\n    id: guid(),\n    children: [{ type: 'p', id: guid(), children: [{ text: '' }] }],\n    purpose: 'none',\n  };\n};\n\nexport const createDefaultSelection = () => {\n  return {\n    type: 'selection',\n    id: guid(),\n    count: 1,\n    logic: { conditions: null },\n    purpose: 'none',\n  } as ActivityBankSelection;\n};\n\nexport interface StructuredContent {\n  type: 'content';\n  id: string;\n  children: ModelElement[];\n  purpose: string;\n}\n\nexport interface ActivityBankSelection {\n  type: 'selection';\n  id: string;\n  logic: Bank.Logic;\n  count: number;\n  purpose: string;\n}\n\nexport interface ActivityReference {\n  type: 'activity-reference';\n  id: string;\n  activitySlug: ActivitySlug;\n  purpose: string;\n  children: [];\n}\n\nexport interface GroupContent {\n  id: number | string;\n  type: 'group';\n  layout: string; // TODO define layout types\n  children: ResourceContent[];\n}\n\nexport interface Activity {\n  type: 'activity';\n  activitySlug: ActivitySlug;\n  typeSlug: ActivityTypeSlug;\n  model: ActivityModelSchema;\n  transformed: ActivityModelSchema | null;\n  // eslint-disable-next-line\n  objectives: Object;\n}\n\nexport interface ActivityMap {\n  [prop: string]: Activity;\n}\n"]}