{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../../src/data/content/model/elements/types.ts"],"names":[],"mappings":"","sourcesContent":["import { RichText } from 'components/activities/types';\nimport { MediaDisplayMode } from 'data/content/model/other';\nimport { OverlayTriggerType } from 'react-bootstrap/esm/OverlayTrigger';\nimport { BaseElement, Descendant, Text } from 'slate';\nimport { Identifiable } from '../other';\n\ninterface SlateElement<Children extends Descendant[]> extends BaseElement, Identifiable {\n  children: Children;\n}\n\nexport type ModelElement = TopLevel | Block | Inline;\n\ntype TopLevel = TextBlock | List | Media | Table | Math | Code | Blockquote;\ntype Block = TableRow | TableCell | ListItem | MathLine | CodeLine;\ntype Inline = Hyperlink | Popup | InputRef;\n\ntype TextBlock = Paragraph | Heading;\ntype Heading = HeadingOne | HeadingTwo | HeadingThree | HeadingFour | HeadingFive | HeadingSix;\ntype List = OrderedList | UnorderedList;\ntype Media = Image | YouTube | Audio | Webpage;\ntype TableCell = TableHeader | TableData;\n\ntype HeadingChildren = Text[];\nexport interface Paragraph extends SlateElement<(InputRef | Text)[]> {\n  type: 'p';\n}\n\nexport interface HeadingOne extends SlateElement<HeadingChildren> {\n  type: 'h1';\n}\n\nexport interface HeadingTwo extends SlateElement<HeadingChildren> {\n  type: 'h2';\n}\n\nexport interface HeadingThree extends SlateElement<HeadingChildren> {\n  type: 'h3';\n}\n\nexport interface HeadingFour extends SlateElement<HeadingChildren> {\n  type: 'h4';\n}\n\nexport interface HeadingFive extends SlateElement<HeadingChildren> {\n  type: 'h5';\n}\n\nexport interface HeadingSix extends SlateElement<HeadingChildren> {\n  type: 'h6';\n}\n\ntype ListChildren = (ListItem | OrderedList | UnorderedList | Text)[];\nexport interface OrderedList extends SlateElement<ListChildren> {\n  type: 'ol';\n}\n\nexport interface UnorderedList extends SlateElement<ListChildren> {\n  type: 'ul';\n}\n\ntype MediaChildren = Text[];\nexport interface Image extends SlateElement<MediaChildren> {\n  type: 'img';\n  src: string;\n  height?: number;\n  width?: number;\n  alt?: string;\n  caption?: string;\n  display?: MediaDisplayMode;\n}\n\nexport interface YouTube extends SlateElement<MediaChildren> {\n  type: 'youtube';\n  src: string;\n  height?: number;\n  width?: number;\n  alt?: string;\n  caption?: string;\n  display?: MediaDisplayMode;\n}\n\nexport interface Audio extends SlateElement<MediaChildren> {\n  type: 'audio';\n  src: string;\n  alt?: string;\n  caption?: string;\n}\n\n// Webpage and Iframe are synonymous. Webpage is used in most UI-related\n// code, and Iframe is used for the underlying slate data model.\nexport interface Webpage extends SlateElement<MediaChildren> {\n  type: 'iframe';\n  src: string;\n  height?: number;\n  width?: number;\n  alt?: string;\n  caption?: string;\n  display?: MediaDisplayMode;\n}\n\nexport interface Table extends SlateElement<TableRow[]> {\n  type: 'table';\n  caption?: string;\n}\n\nexport interface Math extends SlateElement<MathLine[]> {\n  type: 'math';\n}\n\nexport interface Code extends SlateElement<CodeLine[]> {\n  type: 'code';\n  language: string;\n  caption?: string;\n}\n\nexport interface Blockquote extends SlateElement<Paragraph[]> {\n  type: 'blockquote';\n}\n\nexport interface TableRow extends SlateElement<TableCell[]> {\n  type: 'tr';\n}\n\ntype TableCellChildren = (Paragraph | Image | YouTube | Audio | Math)[];\nexport interface TableHeader extends SlateElement<TableCellChildren> {\n  type: 'th';\n}\n\nexport interface TableData extends SlateElement<TableCellChildren> {\n  type: 'td';\n}\n\nexport interface ListItem extends SlateElement<(List | Text)[]> {\n  type: 'li';\n}\n\nexport interface MathLine extends SlateElement<Text[]> {\n  type: 'math_line';\n}\n\nexport interface CodeLine extends SlateElement<Text[]> {\n  type: 'code_line';\n}\n\nexport interface Hyperlink extends SlateElement<Text[]> {\n  type: 'a';\n  href: string;\n  target: string;\n}\n\nexport interface InputRef extends SlateElement<Text[]> {\n  type: 'input_ref';\n}\n\nexport interface Popup extends SlateElement<Text[]> {\n  type: 'popup';\n  trigger: OverlayTriggerType;\n  content: RichText;\n}\n"]}