{"version":3,"file":"DeliveryState.js","sourceRoot":"","sources":["../../../../src/data/activities/DeliveryState.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnyAction, createSlice, PayloadAction, ThunkAction } from '@reduxjs/toolkit';\nimport {\n  EvaluationResponse,\n  RequestHintResponse,\n  ResetActivityResponse,\n} from 'components/activities/DeliveryElement';\nimport {\n  ActivityState,\n  FeedbackAction,\n  Hint,\n  PartId,\n  PartResponse,\n  PartState,\n  Success,\n} from 'components/activities/types';\nimport { studentInputToString } from 'data/activities/utils';\nimport { Maybe } from 'tsmonad';\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  ActivityDeliveryState,\n  unknown,\n  AnyAction\n>;\nexport type StudentInput = string[];\nexport type PartInputs = Record<PartId, StudentInput>;\n\nexport interface ActivityDeliveryState {\n  attemptState: ActivityState;\n  partState: Record<\n    PartId,\n    {\n      studentInput: StudentInput;\n      hintsShown: Hint[];\n      hasMoreHints: boolean;\n    }\n  >;\n}\nexport const activityDeliverySlice = createSlice({\n  name: 'ActivityDelivery',\n  initialState: {} as ActivityDeliveryState,\n  reducers: {\n    activitySubmissionReceived(state, action: PayloadAction<EvaluationResponse>) {\n      if (action.payload.actions.length > 0) {\n        const { score, out_of } = action.payload.actions.reduce(\n          (acc, action: FeedbackAction) => ({\n            score: acc.score + action.score,\n            out_of: acc.out_of + action.out_of,\n          }),\n          {\n            score: 0,\n            out_of: 0,\n          },\n        );\n\n        state.attemptState = {\n          ...state.attemptState,\n          score,\n          outOf: out_of,\n          parts: state.attemptState.parts.map((part) => {\n            const feedbackAction = action.payload.actions.find(\n              (action: FeedbackAction) => action.attempt_guid === part.attemptGuid,\n            ) as FeedbackAction | undefined;\n            if (!feedbackAction) return part;\n            return Object.assign(part, {\n              score: feedbackAction.score,\n              outOf: feedbackAction.out_of,\n              feedback: feedbackAction.feedback,\n              error: feedbackAction.error,\n            } as Partial<PartState>);\n          }),\n        };\n      }\n    },\n    initializePartState(state, action: PayloadAction<ActivityState>) {\n      state.partState = action.payload.parts.reduce((acc, partState) => {\n        acc[String(partState.partId)] = { studentInput: [], hintsShown: [], hasMoreHints: false };\n        return acc;\n      }, {} as ActivityDeliveryState['partState']);\n    },\n    setPartInputs(state, action: PayloadAction<PartInputs>) {\n      Object.entries(action.payload).forEach(([partId, studentInput]) =>\n        Maybe.maybe(state.partState[partId]).lift(\n          (partState) => (partState.studentInput = studentInput),\n        ),\n      );\n    },\n    setStudentInputForPart(\n      state,\n      action: PayloadAction<{ partId: PartId; studentInput: StudentInput }>,\n    ) {\n      Maybe.maybe(state.partState[action.payload.partId]).lift(\n        (partState) => (partState.studentInput = action.payload.studentInput),\n      );\n    },\n    setAttemptState(state, action: PayloadAction<ActivityState>) {\n      state.attemptState = action.payload;\n    },\n    updateChoiceSelectionMultiple(\n      state,\n      action: PayloadAction<{ partId: PartId; selection: string }>,\n    ) {\n      const { partId, selection } = action.payload;\n      Maybe.maybe(state.partState[partId]).lift(\n        (partState) =>\n          (partState.studentInput = partState.studentInput.find(\n            (choiceId) => choiceId === selection,\n          )\n            ? partState.studentInput.filter((id) => id !== selection)\n            : partState.studentInput.concat(selection)),\n      );\n    },\n    setHintsShownForPart(state, action: PayloadAction<{ partId: PartId; hintsShown: Hint[] }>) {\n      Maybe.maybe(state.partState[action.payload.partId]).lift(\n        (partState) => (partState.hintsShown = action.payload.hintsShown),\n      );\n    },\n    showHintForPart(state, action: PayloadAction<{ partId: PartId; hint: Hint }>) {\n      Maybe.maybe(state.partState[action.payload.partId]).lift((partState) =>\n        partState.hintsShown.push(action.payload.hint),\n      );\n    },\n    setHasMoreHintsForPart(\n      state,\n      action: PayloadAction<{ partId: PartId; hasMoreHints: boolean }>,\n    ) {\n      Maybe.maybe(state.partState[action.payload.partId]).lift(\n        (partState) => (partState.hasMoreHints = action.payload.hasMoreHints),\n      );\n    },\n    hideAllHints(state) {\n      Object.values(state.partState).forEach((partState) => (partState.hintsShown = []));\n    },\n    hideHintsForPart(state, action: PayloadAction<PartId>) {\n      Maybe.maybe(state.partState[action.payload]).lift((partState) => (partState.hintsShown = []));\n    },\n  },\n});\nconst slice = activityDeliverySlice;\n\nexport const requestHint =\n  (\n    partId: PartId,\n    onRequestHint: (attemptGuid: string, partAttemptGuid: string) => Promise<RequestHintResponse>,\n  ): AppThunk =>\n  async (dispatch, getState) => {\n    const attemptGuid = getState().attemptState.parts.find(\n      (part) => String(part.partId) === partId,\n    )?.attemptGuid;\n    if (!attemptGuid) return;\n\n    const response = await onRequestHint(getState().attemptState.attemptGuid, attemptGuid);\n    Maybe.maybe(response.hint).lift((hint) =>\n      dispatch(slice.actions.showHintForPart({ partId, hint })),\n    );\n    dispatch(slice.actions.setHasMoreHintsForPart({ partId, hasMoreHints: response.hasMoreHints }));\n  };\n\nexport const selectAttemptState = (state: ActivityDeliveryState) => state.attemptState;\nexport const isEvaluated = (state: ActivityDeliveryState) =>\n  selectAttemptState(state).score !== null;\n\nexport const resetAction =\n  (\n    onResetActivity: (attemptGuid: string) => Promise<ResetActivityResponse>,\n    partInputs: PartInputs,\n  ): AppThunk =>\n  async (dispatch, getState) => {\n    const response = await onResetActivity(getState().attemptState.attemptGuid);\n    dispatch(slice.actions.setPartInputs(partInputs));\n    dispatch(slice.actions.hideAllHints());\n    dispatch(slice.actions.setAttemptState(response.attemptState));\n    getState().attemptState.parts.forEach((partState) =>\n      dispatch(\n        slice.actions.setHasMoreHintsForPart({\n          partId: String(partState.partId),\n          hasMoreHints: partState.hasMoreHints,\n        }),\n      ),\n    );\n  };\n\nexport const submit =\n  (\n    onSubmitActivity: (\n      attemptGuid: string,\n      partResponses: PartResponse[],\n    ) => Promise<EvaluationResponse>,\n  ): AppThunk =>\n  async (dispatch, getState) => {\n    const response = await onSubmitActivity(\n      getState().attemptState.attemptGuid,\n      getState().attemptState.parts.map((partState) => ({\n        attemptGuid: partState.attemptGuid,\n        response: {\n          input: studentInputToString(\n            Maybe.maybe(getState().partState[String(partState.partId)]?.studentInput).valueOr(['']),\n          ),\n        },\n      })),\n    );\n    dispatch(slice.actions.activitySubmissionReceived(response));\n  };\n\nexport const initializeState =\n  (state: ActivityState, initialPartInputs: PartInputs): AppThunk =>\n  async (dispatch, _getState) => {\n    dispatch(slice.actions.initializePartState(state));\n    state.parts.forEach((partState) => {\n      dispatch(\n        slice.actions.setHintsShownForPart({\n          partId: String(partState.partId),\n          hintsShown: partState.hints,\n        }),\n      );\n      dispatch(\n        slice.actions.setHasMoreHintsForPart({\n          partId: String(partState.partId),\n          hasMoreHints: partState.hasMoreHints,\n        }),\n      );\n    });\n    dispatch(slice.actions.setAttemptState(state));\n    dispatch(slice.actions.setPartInputs(initialPartInputs));\n  };\n\nexport const setSelection =\n  (\n    partId: PartId,\n    selection: string,\n    onSaveActivity: (attemptGuid: string, partResponses: PartResponse[]) => Promise<Success>,\n    type: 'single' | 'multiple',\n  ): AppThunk =>\n  async (dispatch, getState) => {\n    const attemptGuid = getState().attemptState.parts.find(\n      (part) => String(part.partId) === partId,\n    )?.attemptGuid;\n    if (!attemptGuid) return;\n\n    // Update local state by adding or removing the id\n    if (type === 'single') {\n      dispatch(slice.actions.setStudentInputForPart({ partId, studentInput: [selection] }));\n    } else if (type === 'multiple') {\n      dispatch(slice.actions.updateChoiceSelectionMultiple({ partId, selection }));\n    }\n\n    // Post the student response to save it\n    // Here we will make a list of the selected ids like { input: [id1, id2, id3].join(' ')}\n    // Then in the rule evaluator, we will say\n    // `input like id1 && input like id2 && input like id3`\n    const newSelection = getState().partState[partId]?.studentInput;\n    if (!newSelection) return;\n\n    return onSaveActivity(getState().attemptState.attemptGuid, [\n      {\n        attemptGuid,\n        response: { input: studentInputToString(newSelection) },\n      },\n    ]);\n  };\n"]}