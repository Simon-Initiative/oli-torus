{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../src/data/activities/model/utils.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,wCAAwC;AACxC,MAAM,UAAU,WAAW,CAAI,KAAU,EAAE,SAAuC;IAChF,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CACpD,IAAI,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAClE,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAe,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;AAEnE,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAe,EAAE,EAAU,EAAE,EAAE,CACzD,WAAW,CAAO,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAEzD,MAAM,CAAC,MAAM,SAAS,GAAG,QAAQ,CAAC;AAElC,MAAM,CAAC,MAAM,iBAAiB,GAAG,gBAAgB,CAAC","sourcesContent":["import { HasParts, Part } from 'components/activities/types';\nimport { Maybe } from 'tsmonad';\n\n// Helper. Assumes a correct ID is given\nexport function getByUnsafe<T>(slice: T[], predicate: (x: T, i: number) => boolean): T {\n  return Maybe.maybe(slice.find(predicate)).valueOrThrow(\n    new Error('Could not find item in list ' + JSON.stringify(slice)),\n  );\n}\n\nexport const getParts = (model: HasParts) => model.authoring.parts;\n\nexport const getPartById = (model: HasParts, id: string) =>\n  getByUnsafe<Part>(getParts(model), (p) => p.id === id);\n\nexport const STEM_PATH = '$.stem';\n\nexport const PREVIEW_TEXT_PATH = '$..previewText';\n"]}