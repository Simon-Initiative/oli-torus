{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../../../src/data/activities/model/list.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,MAAM,OAAO,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC;AAgBnD,MAAM,CAAC,MAAM,IAAI,GAAiC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC3D,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtF,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEzF,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IAEtF,MAAM,CAAC,CAAC;QACN,OAAO,CAAC,KAAU,EAAE,EAAE;YACpB,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,EAAE,EAAE,CAAC;QACV,OAAO,CAAC,KAAU,EAAE,EAAE;YACpB,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,EAAE;QACP,OAAO,CAAC,KAAU,EAAE,EAAE;YACpB,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,EAAU;QAClB,OAAO,CAAC,KAAU,EAAE,EAAE;YACpB,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { Operations } from 'utils/pathOperations';\n\nconst ID_PATH = (id: string) => `[?(@.id==${id})]`;\n\ntype Predicate<T> = (x: T) => boolean;\nexport interface List<T> {\n  getOne: (model: any, id: string) => T;\n  getOneBy: (model: any, pred: Predicate<T>) => T;\n\n  getAll: (model: any) => T[];\n  getAllBy: (model: any, pred: Predicate<T>) => T[];\n\n  addOne: (x: T) => (model: any) => void;\n  removeOne: (id: string) => (model: any) => void;\n\n  setOne: (id: string, x: T) => (model: any) => void;\n  setAll: (xs: T[]) => (model: any) => void;\n}\nexport const List: <T>(path: string) => List<T> = (path) => ({\n  getOne: (model, id) => Operations.apply(model, Operations.find(path + ID_PATH(id)))[0],\n  getOneBy: (model, pred) => Operations.apply(model, Operations.find(path)).filter(pred)[0],\n\n  getAll: (model) => Operations.apply(model, Operations.find(path)),\n  getAllBy: (model, pred) => Operations.apply(model, Operations.find(path)).filter(pred),\n\n  addOne(x) {\n    return (model: any) => {\n      Operations.apply(model, Operations.insert(path, x, -1));\n    };\n  },\n\n  setOne(id, x) {\n    return (model: any) => {\n      Operations.apply(model, Operations.replace(path + ID_PATH(id), x));\n    };\n  },\n\n  setAll(xs) {\n    return (model: any) => {\n      Operations.apply(model, Operations.replace(path, xs));\n    };\n  },\n\n  removeOne(id: string) {\n    return (model: any) => {\n      Operations.apply(model, Operations.filter(path, `[?(@.id!=${id})]`));\n    };\n  },\n});\n"]}