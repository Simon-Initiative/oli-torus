{"version":3,"file":"hints.js","sourceRoot":"","sources":["../../../../../src/data/activities/model/hints.ts"],"names":[],"mappings":"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","sourcesContent":["import { HasHints, Hint, makeUndoable, PostUndoable, RichText } from 'components/activities/types';\nimport { List } from 'data/activities/model/list';\nimport { clone } from 'utils/common';\nimport { Operations } from 'utils/pathOperations';\n\nconst PATH = '$..hints';\n\ninterface Hints extends Omit<List<Hint>, 'addOne' | 'removeOne'> {\n  path: string;\n  byPart: (model: HasHints, partId: string) => Hint[];\n  addOne: (hint: Hint, partId: string) => (model: any, post: PostUndoable) => void;\n  getDeerInHeadlightsHint: (model: HasHints, partId: string) => Hint;\n  getCognitiveHints: (model: HasHints, partId: string) => Hint[];\n  getBottomOutHint: (model: HasHints, partId: string) => Hint;\n  addCognitiveHint(hint: Hint, partId: string): (model: HasHints, _post: PostUndoable) => void;\n  setContent(id: string, content: RichText): (model: HasHints, _post: PostUndoable) => void;\n  removeOne: (id: string) => (model: any, post: PostUndoable) => void;\n}\n\nexport const HINTS_BY_PART_PATH = (partId: string) => `$..parts[?(@.id==${partId})].hints`;\n\nexport const Hints: Hints = {\n  path: PATH,\n  ...List<Hint>(PATH),\n\n  byPart: (model, partId) =>\n    Operations.apply(model, Operations.find(`$..parts[?(@.id==${partId})].hints`)),\n\n  // Native OLI activities split out hints into three types:\n  // a. (0-1) Deer in headlights (re-explain the problem for students who don't understand the prompt)\n  // b. (0-many) Cognitive hints (explain how to solve the problem)\n  // c. (0-1) Bottom out hint (explain the answer)\n  // These hints are saved in-order.\n  getDeerInHeadlightsHint: (model: HasHints, partId: string) => Hints.byPart(model, partId)[0],\n  getCognitiveHints: (model: HasHints, partId: string) =>\n    Hints.byPart(model, partId).slice(1, Hints.byPart(model, partId).length - 1),\n  getBottomOutHint: (model: HasHints, partId: string) =>\n    Hints.byPart(model, partId)[Hints.byPart(model, partId).length - 1],\n\n  addOne(hint: Hint, partId: string) {\n    return List<Hint>(HINTS_BY_PART_PATH(partId)).addOne(hint);\n  },\n\n  addCognitiveHint(hint: Hint, partId: string) {\n    return (model: HasHints, _post: PostUndoable) => {\n      // new cognitive hints are inserted\n      // right before the bottomOut hint at the end of the list\n      const bottomOutIndex = Hints.byPart(model, partId).length - 1;\n      model.authoring.parts.find((p) => p.id === partId)?.hints.splice(bottomOutIndex, 0, hint);\n    };\n  },\n\n  setContent(id: string, content: RichText) {\n    return (model: HasHints, _post: PostUndoable) => {\n      Hints.getOne(model, id).content = content;\n    };\n  },\n\n  removeOne(id: string) {\n    return (model: HasHints, post: PostUndoable) => {\n      const hint = Hints.getOne(model, id);\n      const index = Hints.getAll(model).findIndex((h) => h.id === id);\n\n      List<Hint>(PATH).removeOne(id)(model);\n      post(makeUndoable('Removed a hint', [Operations.insert(PATH, clone(hint), index)]));\n    };\n  },\n};\n"]}