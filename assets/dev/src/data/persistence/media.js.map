{"version":3,"file":"media.js","sourceRoot":"","sources":["../../../../src/data/persistence/media.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectSlug } from 'data/types';\nimport { makeRequest, ServerError } from './common';\nimport { PaginatedResponse, MediaItem } from 'types/media';\n\nexport type MediaItemCreated = {\n  title: 'success';\n  url: string;\n};\n\nfunction getFileName(file: File) {\n  const fileNameWithDot = file.name.slice(\n    0,\n    file.name.indexOf('.') !== -1 ? file.name.indexOf('.') + 1 : file.name.length,\n  );\n  const extension =\n    file.name.indexOf('.') !== -1 ? file.name.substr(file.name.indexOf('.') + 1).toLowerCase() : '';\n\n  return fileNameWithDot + extension;\n}\n\nfunction encodeFile(file: File): Promise<string> {\n  const reader = new FileReader();\n\n  if (file) {\n    return new Promise((resolve, reject) => {\n      reader.addEventListener(\n        'load',\n        () => {\n          if (reader.result !== null) {\n            resolve((reader.result as string).substr((reader.result as string).indexOf(',') + 1));\n          } else {\n            reject('failed to encode');\n          }\n        },\n        false,\n      );\n\n      reader.readAsDataURL(file);\n    });\n  }\n  return Promise.reject('file was null');\n}\n\nexport function createMedia(\n  project: ProjectSlug,\n  file: File,\n): Promise<MediaItemCreated | ServerError> {\n  const fileName = getFileName(file);\n  return encodeFile(file).then((encoding: string) => {\n    const body = {\n      file: encoding,\n      name: fileName,\n    };\n    const params = {\n      method: 'POST',\n      body: JSON.stringify(body),\n      url: `/media/project/${project}`,\n    };\n\n    return makeRequest<MediaItemCreated>(params);\n  });\n}\n\nexport function fetchMedia(\n  project: ProjectSlug,\n  offset?: number,\n  limit?: number,\n  mimeFilter?: string[],\n  urlFilter?: string,\n  searchText?: string,\n  orderBy?: string,\n  order?: string,\n): Promise<PaginatedResponse<MediaItem> | ServerError> {\n  const query = Object.assign(\n    {},\n    offset ? { offset } : {},\n    limit ? { limit } : {},\n    mimeFilter ? { mimeFilter } : {},\n    urlFilter ? { urlFilter } : {},\n    searchText ? { searchText } : {},\n    orderBy ? { orderBy } : {},\n    order ? { order } : {},\n  );\n\n  const params = {\n    method: 'GET',\n    query,\n    url: `/media/project/${project}`,\n  };\n\n  return makeRequest<PaginatedResponse<MediaItem>>(params);\n}\n"]}