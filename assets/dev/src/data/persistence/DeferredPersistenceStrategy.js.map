{"version":3,"file":"DeferredPersistenceStrategy.js","sourceRoot":"","sources":["../../../../src/data/persistence/DeferredPersistenceStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractPersistenceStrategy } from './AbstractPersistenceStrategy';\n\nexport interface DeferredPersistenceStrategy {\n  timer: any;\n  timerStart: number;\n  quietPeriodInMs: number;\n  maxDeferredTimeInMs: number;\n  pending: any; // A function to execute to initiate save\n  inFlight: boolean; // Document that is in flight\n  flushResolve: any; // Function to call to resolve inflight requests after destroy\n}\n\n/**\n * A persistence strategy that waits until user edits have ceased\n * for a specific amount of time but will auto save when a maximum\n * wait period has exceeded.\n */\nexport class DeferredPersistenceStrategy extends AbstractPersistenceStrategy {\n  constructor(quietPeriodInMs = 2000, maxDeferredTimeInMs = 5000) {\n    super();\n    this.quietPeriodInMs = quietPeriodInMs;\n    this.maxDeferredTimeInMs = maxDeferredTimeInMs;\n    this.timer = null;\n    this.timerStart = 0;\n    this.flushResolve = null;\n    this.inFlight = false;\n    this.pending = null;\n    this.destroyed = false;\n  }\n\n  now() {\n    return new Date().getTime();\n  }\n\n  save(saveFn: any) {\n    this.pending = saveFn;\n\n    if (this.stateChangeCallback !== null) {\n      this.stateChangeCallback(this.inFlight ? 'inflight' : 'pending');\n    }\n\n    this.queueSave();\n  }\n\n  saveImmediate(saveFn: any) {\n    this.save(saveFn);\n    this.flushPendingChanges();\n  }\n\n  queueSave() {\n    const startTimer = () =>\n      setTimeout(() => {\n        this.timer = null;\n        this.persist();\n      }, this.quietPeriodInMs);\n\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n      this.timer = null;\n\n      if (this.now() - this.timerStart > this.maxDeferredTimeInMs) {\n        this.persist();\n      } else {\n        this.timer = startTimer();\n      }\n    } else {\n      this.timerStart = this.now();\n      this.timer = startTimer();\n    }\n  }\n\n  persist(): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this.inFlight = true;\n      const saveFn = this.pending;\n      this.pending = null;\n\n      if (this.stateChangeCallback !== null) {\n        this.stateChangeCallback('inflight');\n      }\n\n      saveFn(false)\n        .then((result: any) => {\n          if (this.flushResolve !== null) {\n            this.flushResolve();\n            return;\n          }\n\n          if (this.successCallback !== null) {\n            this.successCallback();\n          }\n\n          this.inFlight = false;\n\n          if (this.stateChangeCallback !== null) {\n            this.stateChangeCallback(this.pending === null ? 'idle' : 'pending');\n          }\n\n          if (this.pending !== null) {\n            this.queueSave();\n          }\n          resolve(result);\n        })\n        .catch((err: any) => {\n          if (this.stateChangeCallback !== null) {\n            this.stateChangeCallback(this.pending === null ? 'idle' : 'pending');\n          }\n\n          this.inFlight = false;\n          if (this.failureCallback !== null) {\n            this.failureCallback(err);\n          }\n\n          reject(err);\n        });\n    });\n  }\n\n  doDestroy(): boolean {\n    if (!this.destroyed) {\n      this.destroyed = true;\n      return this.flushPendingChanges();\n    }\n    return false;\n  }\n\n  flushPendingChanges(): boolean {\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n    }\n\n    // Handle the case where we have a pending change\n    if (this.pending !== null) {\n      this.pending(true);\n      return true;\n    }\n    return false;\n  }\n}\n"]}