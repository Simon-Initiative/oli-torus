{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/data/persistence/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEtC,MAAM,KAAK,GAAI,MAAc,CAAC,KAAK,CAAC;AA+BpC,MAAM,UAAU,WAAW,CACzB,MAAyB;IAEzB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;IACrD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;IACzF,MAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;IAE1E,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IAEpC,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,6CAA6C;QAC7C,WAAW;YACT,GAAG;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;qBACf,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAE,KAAa,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC/E,IAAI,CAAC,GAAG,CAAC,CAAC;KAChB;IAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,OAAO,KAAK,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,WAAW,EAAE;YAC7C,MAAM;YACN,OAAO;YACP,IAAI;SACL,CAAC;aACC,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAChB,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC5B,uDAAuD;oBACvD,sCAAsC;oBACtC,IAAI,OAAO,CAAC;oBACZ,IAAI;wBACF,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC3B,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;4BACjC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;yBAC3B;qBACF;oBAAC,OAAO,CAAC,EAAE;wBACV,OAAO,GAAG,IAAI,CAAC;qBAChB;oBACD,MAAM,CAAC;wBACL,MAAM,EAAE,QAAQ,CAAC,MAAM;wBACvB,UAAU,EAAE,QAAQ,CAAC,UAAU;wBAC/B,OAAO;qBACR,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;aAC5D;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAA8D,EAAE,EAAE;YACxE,MAAM,CAAC;gBACL,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { getBaseURL } from './config';\n\nconst fetch = (window as any).fetch;\n\n// eslint-disable-next-line\nexport type Headers = Object;\n// eslint-disable-next-line\nexport type QueryParams = Object;\n\nexport type HttpRequestParams = {\n  method?: string;\n  url: string;\n  body?: string | FormData;\n  headers?: Headers;\n  query?: QueryParams;\n  hasTextResult?: boolean;\n};\n\nexport type Ok<Result = any> = {\n  type: 'Ok';\n  status: string;\n  statusText: string;\n  result: Result;\n};\n\nexport type ServerError = {\n  type: 'ServerError';\n  result: 'failure';\n  status: string;\n  statusText: string;\n  message: string;\n};\n\nexport function makeRequest<SuccessType>(\n  params: HttpRequestParams,\n): Promise<SuccessType | ServerError> {\n  const method = params.method ? params.method : 'GET';\n  const headers = params.headers ? params.headers : { 'Content-Type': 'application/json' };\n  const hasTextResult = params.hasTextResult ? params.hasTextResult : false;\n\n  const { body, url, query } = params;\n\n  let queryString = '';\n  if (query && Object.keys(query).length > 0) {\n    // convert query params to encoded url string\n    queryString =\n      '?' +\n      Object.keys(query)\n        .map((k) => encodeURIComponent(k) + '=' + encodeURIComponent((query as any)[k]))\n        .join('&');\n  }\n\n  return new Promise((resolve, reject) => {\n    return fetch(getBaseURL() + url + queryString, {\n      method,\n      headers,\n      body,\n    })\n      .then((response: Response) => {\n        if (!response.ok) {\n          response.text().then((text) => {\n            // Error responses from the server should always return\n            // objects of type { message: string }\n            let message;\n            try {\n              message = JSON.parse(text);\n              if (message.message !== undefined) {\n                message = message.message;\n              }\n            } catch (e) {\n              message = text;\n            }\n            reject({\n              status: response.status,\n              statusText: response.statusText,\n              message,\n            });\n          });\n        } else {\n          resolve(hasTextResult ? response.text() : response.json());\n        }\n      })\n      .catch((error: { status: string; statusText: string; message: string }) => {\n        reject({\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n        });\n      });\n  });\n}\n"]}