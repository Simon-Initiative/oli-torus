{"version":3,"file":"PersistenceStrategy.js","sourceRoot":"","sources":["../../../../src/data/persistence/PersistenceStrategy.ts"],"names":[],"mappings":"","sourcesContent":["import { LockResult } from './lock';\n\nexport type onSaveCompletedCallback = () => void;\n\nexport type onFailureCallback = (result: any) => void;\n\nexport type PersistenceState = 'idle' | 'pending' | 'inflight';\n\nexport type onStateChangeCallback = (state: PersistenceState) => void;\n\nexport interface PersistenceStrategy {\n  /**\n   * Enables the persistence strategy, can asynchronously return false to indicate\n   * that editing is not allowed.\n   */\n  initialize: (\n    lockFn: () => Promise<LockResult>,\n    releaseFn: () => Promise<LockResult>,\n    onSuccess: onSaveCompletedCallback,\n    onFailure: onFailureCallback,\n    onStateChange: onStateChangeCallback,\n  ) => Promise<boolean>;\n\n  /**\n   * Method called to request that the persistence strategy saves the document.\n   */\n  save: (saveFn: any) => void;\n\n  /**\n   * Method called to request that the persistence strategy saves the document immediately.\n   */\n  saveImmediate: (saveFn: any) => void;\n\n  /**\n   * Indicate to the persistence strategy that it is being shutdown and that it\n   * should clean up any resources and flush any pending changes immediately.\n   */\n  destroy: () => void;\n\n  getLockResult: () => LockResult;\n}\n"]}