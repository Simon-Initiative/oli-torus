{"version":3,"file":"activity.js","sourceRoot":"","sources":["../../../../src/data/persistence/activity.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectSlug, ActivityTypeSlug, ResourceId } from 'data/types';\nimport {\n  ActivityModelSchema,\n  Feedback,\n  FeedbackAction,\n  PartResponse,\n} from 'components/activities/types';\nimport { ObjectiveMap } from 'data/content/activity';\nimport { makeRequest } from './common';\n\nexport type ActivityUpdate = {\n  title: string;\n  objectives: ObjectiveMap;\n  tags: ResourceId[];\n  content: ActivityModelSchema;\n  authoring?: any;\n};\n\nexport type BulkActivityUpdate = {\n  resource_id: number;\n  title: string;\n  objectives: ObjectiveMap;\n  content: ActivityModelSchema;\n  authoring?: any;\n};\n\nexport type Created = {\n  result: 'success';\n  revisionSlug: string;\n  resourceId: ResourceId;\n};\n\nexport type Updated = {\n  result: 'success';\n  revisionSlug: string;\n};\n\nexport type Deleted = {\n  result: 'success';\n};\n\nexport type Transformed = {\n  result: 'success';\n  transformed: null | ActivityModelSchema;\n};\n\nexport type Evaluated = {\n  result: 'success';\n  evaluations: (\n    | { feedback: Feedback; part_id: string; result: { out_of: number; score: number } }\n    | { error: string; part_id: string }\n  )[];\n};\n\nexport type Retrieved = {\n  result: 'success';\n  resourceId: ResourceId;\n  title: string;\n  activityType: number;\n  content: ActivityModelSchema;\n  authoring?: any;\n  objectives?: any; // TODO typing\n};\n\nexport type BulkRetrieved = {\n  result: 'success';\n  results: Retrieved[];\n};\n\nexport type Edited = { result: 'success'; revisionSlug: string };\n\nexport const getActivityForAuthoring = (projectSlug: string, activityId: ResourceId) => {\n  const params = {\n    method: 'GET',\n    url: `/storage/project/${projectSlug}/resource/${activityId}`,\n  };\n\n  return makeRequest<Retrieved>(params);\n};\n\nexport const getBulkActivitiesForAuthoring = async (\n  projectSlug: string,\n  activityIds: ResourceId[],\n) => {\n  const params = {\n    method: 'POST',\n    url: `/storage/project/${projectSlug}/resource`,\n    body: JSON.stringify({ resourceIds: activityIds }),\n  };\n\n  const response = await makeRequest<BulkRetrieved>(params);\n  if (response.result !== 'success') {\n    throw new Error(`Server ${response.status} error: ${response.message}`);\n  }\n\n  return response.results.map((result: Retrieved) => {\n    const { resourceId: id, activityType, title, content, authoring, objectives } = result;\n    return {\n      id,\n      activityType,\n      title,\n      content,\n      authoring,\n      objectives,\n    };\n  });\n};\n\nexport const getActivityForDelivery = (sectionSlug: string, activityId: ResourceId) => {\n  const params = {\n    method: 'GET',\n    url: `/storage/course/${sectionSlug}/resource/${activityId}`,\n  };\n\n  return makeRequest<Retrieved>(params);\n};\n\nexport const getBulkActivitiesForDelivery = async (\n  sectionSlug: string,\n  activityIds: ResourceId[],\n) => {\n  const params = {\n    method: 'POST',\n    url: `/storage/course/${sectionSlug}/resource`,\n    body: JSON.stringify({ resourceIds: activityIds }),\n  };\n\n  const response = await makeRequest<BulkRetrieved>(params);\n  if (response.result !== 'success') {\n    throw new Error(`Server ${response.status} error: ${response.message}`);\n  }\n\n  return response.results.map((result: Retrieved) => {\n    const { resourceId: id, title, content } = result;\n    return {\n      id,\n      title,\n      content,\n    };\n  });\n};\n\nexport function create(\n  project: ProjectSlug,\n  activityTypeSlug: ActivityTypeSlug,\n  model: ActivityModelSchema,\n  objectives: ResourceId[],\n  scope = 'embedded',\n) {\n  const params = {\n    method: 'POST',\n    body: JSON.stringify({ model, objectives, scope }),\n    url: `/project/${project}/activity/${activityTypeSlug}`,\n  };\n\n  return makeRequest<Created>(params);\n}\n\nexport function deleteActivity(project: ProjectSlug, resourceId: ResourceId) {\n  const params = {\n    method: 'DELETE',\n    url: `/storage/project/${project}/resource/${resourceId}?lock=${resourceId}`,\n  };\n\n  return makeRequest<Deleted>(params);\n}\n\nexport function createBanked(\n  project: ProjectSlug,\n  activityTypeSlug: ActivityTypeSlug,\n  model: ActivityModelSchema,\n  objectives: ResourceId[],\n) {\n  return create(project, activityTypeSlug, model, objectives, 'banked');\n}\n\nexport function bulkEdit(\n  project: ProjectSlug,\n  resource: ResourceId,\n  updates: BulkActivityUpdate[],\n) {\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify({ updates }),\n    url: `/storage/project/${project}/resource?lock=${resource}`,\n  };\n\n  return makeRequest<Updated>(params);\n}\n\nexport function edit(\n  project: ProjectSlug,\n  resource: ResourceId,\n  activity: ResourceId,\n  pendingUpdate: ActivityUpdate,\n  releaseLock: boolean,\n) {\n  const update = Object.assign({}, pendingUpdate, { releaseLock });\n  update.content = Object.assign({}, update.content);\n\n  // Here we pull the \"authoring\" key out of \"content\" and elevate it\n  // as a top-level key\n  if (update.content.authoring !== undefined) {\n    update.authoring = update.content.authoring;\n    delete update.content.authoring;\n  }\n\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify(update),\n    url: `/storage/project/${project}/resource/${activity}?lock=${resource}`,\n  };\n\n  return makeRequest<Updated>(params);\n}\n\nexport function transform(model: ActivityModelSchema) {\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify({ model }),\n    url: '/project/test/transform',\n  };\n\n  return makeRequest<Transformed>(params);\n}\n\nexport function evaluate(model: ActivityModelSchema, partResponses: PartResponse[]) {\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify({ model, partResponses }),\n    url: '/project/test/evaluate',\n  };\n\n  return makeRequest<Evaluated>(params);\n}\n"]}