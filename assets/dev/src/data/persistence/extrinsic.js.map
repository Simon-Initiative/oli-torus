{"version":3,"file":"extrinsic.js","sourceRoot":"","sources":["../../../../src/data/persistence/extrinsic.ts"],"names":[],"mappings":"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","sourcesContent":["import { SectionSlug } from 'data/types';\nimport { makeRequest } from './common';\n\n// eslint-disable-next-line\nexport type ExtrinsicRead = Object;\n\n// eslint-disable-next-line\nexport type KeyValues = Object;\nexport type ExtrinsicUpsert = {\n  result: 'success';\n};\nexport type ExtrinsicDelete = {\n  result: 'success';\n};\n\nexport function readGlobal(keys: string[] | null = null) {\n  const params = {\n    method: 'GET',\n    url: '/state' + toKeyParams(keys),\n  };\n\n  return makeRequest<ExtrinsicRead>(params);\n}\n\nexport const readGlobalUserState = async (\n  keys: string[] | null = null,\n  useLocalStorage = false,\n) => {\n  let result: any = {};\n  if (useLocalStorage) {\n    // localStorage API doesn't support the \"get all\" behavior, so we need to put everything into a single object\n    const storedUserState = JSON.parse(localStorage.getItem('torus.userState') || '{}');\n    if (keys) {\n      keys.forEach((key) => {\n        result[key] = storedUserState[key];\n      });\n    } else {\n      result = storedUserState;\n    }\n  } else {\n    const serverUserState = await readGlobal(keys);\n    // merge server state with result\n    if ((serverUserState as any).type !== 'ServerError') {\n      result = serverUserState;\n    }\n  }\n  return result;\n};\n\nexport const updateGlobalUserState = async (\n  updates: { [topKey: string]: { [key: string]: any } },\n  useLocalStorage = false,\n) => {\n  const topLevelKeys = Object.keys(updates);\n  const currentState = await readGlobalUserState(topLevelKeys, useLocalStorage);\n\n  const newState = { ...currentState };\n  topLevelKeys.forEach((topKey) => {\n    const actualKeys = Object.keys(updates[topKey]);\n    actualKeys.forEach((actualKey) => {\n      newState[topKey] = { ...newState[topKey], [actualKey]: updates[topKey][actualKey] };\n    });\n  });\n\n  if (useLocalStorage) {\n    const existingState = localStorage.getItem('torus.userState') || '{}';\n    const parsedState = JSON.parse(existingState);\n\n    const mergedState = { ...parsedState, ...newState };\n\n    localStorage.setItem('torus.userState', JSON.stringify(mergedState));\n  } else {\n    await upsertGlobal(newState);\n  }\n  return newState;\n};\n\nexport function deleteGlobal(keys: string[]) {\n  const params = {\n    method: 'DELETE',\n    url: '/state' + toKeyParams(keys),\n  };\n\n  return makeRequest<ExtrinsicRead>(params);\n}\n\nexport function upsertGlobal(keyValues: KeyValues) {\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify(keyValues),\n    url: '/state',\n  };\n\n  return makeRequest<ExtrinsicDelete>(params);\n}\n\nexport function readSection(slug: SectionSlug, keys: string[] | null = null) {\n  const params = {\n    method: 'GET',\n    url: `/state/course/${slug}` + toKeyParams(keys),\n  };\n\n  return makeRequest<ExtrinsicRead>(params);\n}\n\nexport function deleteSection(slug: SectionSlug, keys: string[]) {\n  const params = {\n    method: 'DELETE',\n    url: `/state/course/${slug}` + toKeyParams(keys),\n  };\n\n  return makeRequest<ExtrinsicRead>(params);\n}\n\nexport function upsertSection(slug: SectionSlug, keyValues: KeyValues) {\n  const params = {\n    method: 'PUT',\n    body: JSON.stringify(keyValues),\n    url: `/state/course/${slug}`,\n  };\n\n  return makeRequest<ExtrinsicDelete>(params);\n}\n\n// Take a list of string key names and turn it into the form expected by\n// Phoenix: foo[]=bar&foo[]=baz&foo[]=qux.\nfunction toKeyParams(keys: string[] | null = null) {\n  return keys === null\n    ? ''\n    : '?' +\n        keys\n          .reduce((p, k) => {\n            return p + '&keys[]=' + k;\n          }, '')\n          .substr(1);\n}\n"]}