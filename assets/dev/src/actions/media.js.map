{"version":3,"file":"media.js","sourceRoot":"","sources":["../../../src/actions/media.ts"],"names":[],"mappings":"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","sourcesContent":["import { List, Map } from 'immutable';\nimport { State, Dispatch } from 'state/index';\nimport { ProjectSlug } from 'data/types';\nimport * as persistence from 'data/persistence/media';\nimport { Maybe } from 'tsmonad';\nimport { MediaItem, MediaRef } from 'types/media';\nimport guid from 'utils/guid';\n\nconst MEDIA_PAGE_SIZE = 60;\n\nexport type MediaActions =\n  | FetchMediaPageAction\n  | ReceiveMediaPageAction\n  | ResetMediaAction\n  | LoadMediaReferencesAction\n  | SideloadDataAction;\n\nexport type FETCH_MEDIA_PAGE = 'media/FETCH_MEDIA_PAGE';\nexport const FETCH_MEDIA_PAGE: FETCH_MEDIA_PAGE = 'media/FETCH_MEDIA_PAGE';\n\nexport type FetchMediaPageAction = {\n  type: FETCH_MEDIA_PAGE;\n  courseId: ProjectSlug;\n  reqId: string;\n};\n\nexport const fetchMediaPage = (courseId: ProjectSlug, reqId: string): FetchMediaPageAction => ({\n  type: FETCH_MEDIA_PAGE,\n  courseId,\n  reqId,\n});\n\nexport type RESET_MEDIA = 'media/RESET_MEDIA';\nexport const RESET_MEDIA: RESET_MEDIA = 'media/RESET_MEDIA';\n\nexport type ResetMediaAction = {\n  type: RESET_MEDIA;\n};\n\nexport const resetMedia = (): ResetMediaAction => ({\n  type: RESET_MEDIA,\n});\n\nexport type RECEIVE_MEDIA_PAGE = 'media/RECEIVE_MEDIA_PAGE';\nexport const RECEIVE_MEDIA_PAGE: RECEIVE_MEDIA_PAGE = 'media/RECEIVE_MEDIA_PAGE';\n\nexport type ReceiveMediaPageAction = {\n  type: RECEIVE_MEDIA_PAGE;\n  courseId: ProjectSlug;\n  items: List<MediaItem>;\n  totalItems: number;\n};\n\nexport const receiveMediaPage = (\n  courseId: ProjectSlug,\n  items: List<MediaItem>,\n  totalItems: number,\n): ReceiveMediaPageAction => ({\n  type: RECEIVE_MEDIA_PAGE,\n  courseId,\n  items,\n  totalItems,\n});\n\nexport type SIDELOAD_DATA = 'media/SIDELOAD_DATA';\nexport const SIDELOAD_DATA: SIDELOAD_DATA = 'media/SIDELOAD_DATA';\n\nexport type SideloadDataAction = {\n  type: SIDELOAD_DATA;\n  courseId: ProjectSlug;\n  data: Map<string, MediaItem>;\n};\n\nexport const sideloadData = (\n  courseId: ProjectSlug,\n  data: Map<string, MediaItem>,\n): SideloadDataAction => ({\n  type: SIDELOAD_DATA,\n  courseId,\n  data,\n});\n\nexport type LOAD_MEDIA_REFS = 'media/LOAD_MEDIA_REFS';\nexport const LOAD_MEDIA_REFS: LOAD_MEDIA_REFS = 'media/LOAD_MEDIA_REFS';\n\nexport type LoadMediaReferencesAction = {\n  type: LOAD_MEDIA_REFS;\n  courseId: ProjectSlug;\n  references: Map<string, List<MediaRef>>;\n};\n\nexport const loadMediaReferences = (\n  courseId: ProjectSlug,\n  references: Map<string, List<MediaRef>>,\n): LoadMediaReferencesAction => ({\n  type: LOAD_MEDIA_REFS,\n  courseId,\n  references,\n});\n\nexport const fetchCourseMedia =\n  (\n    courseId: ProjectSlug,\n    offset?: number,\n    limit?: number,\n    mimeFilter?: string[],\n    searchText?: string,\n    orderBy?: string,\n    order?: string,\n  ) =>\n  (dispatch: Dispatch, getState: () => State): Promise<Maybe<List<MediaItem>>> => {\n    const reqId = guid();\n    dispatch(fetchMediaPage(courseId, reqId));\n\n    const handleError = (err: any) => {\n      /*\n        const content = new Messages.TitledContent().with({\n          title: 'Failed to load media',\n          message: 'There was a problem loading media for this course. '\n            + 'Please check your internet connection and try again.',\n        });\n\n        const failedMessage = new Messages.Message().with({\n          content,\n          scope: Messages.Scope.Resource,\n          severity: Messages.Severity.Error,\n          canUserDismiss: true,\n        });\n\n        dispatch(messageActions.showMessage(failedMessage));\n        */\n    };\n\n    return persistence\n      .fetchMedia(courseId, offset, limit, mimeFilter, undefined, searchText, orderBy, order)\n      .then((response) => {\n        if (response.type === 'success') {\n          const items = List<MediaItem>(response.results);\n\n          // check if the response is for the latest request\n          if (getState().media.lastReqId === reqId) {\n            // request is latest, update state\n            dispatch(receiveMediaPage(courseId, items, response.totalResults));\n            // dispatch(fetchMediaReferences(courseId) as any);\n          }\n\n          return Maybe.just<List<MediaItem>>(items);\n        }\n        return Maybe.nothing<List<MediaItem>>();\n      })\n      .catch(() => {\n        return Maybe.nothing<List<MediaItem>>();\n      });\n  };\n\nexport const fetchCourseMediaNextPage =\n  (\n    courseId: ProjectSlug,\n    mimeFilter?: string[],\n    searchText?: string,\n    orderBy?: string,\n    order?: string,\n  ) =>\n  (dispatch: Dispatch, getState: () => State): Promise<Maybe<List<MediaItem>>> => {\n    const limit = MEDIA_PAGE_SIZE;\n    const offset = getState().media.items.size || 0;\n\n    return dispatch(\n      fetchCourseMedia(courseId, offset, limit, mimeFilter, searchText, orderBy, order),\n    );\n  };\n\nexport const fetchMediaItemByPath =\n  (courseId: ProjectSlug, url: string) =>\n  (dispatch: Dispatch, getState: () => State): Promise<Maybe<MediaItem>> => {\n    const limit = 1;\n    const offset = 0;\n\n    return persistence.fetchMedia(courseId, offset, limit, undefined, url).then((response) => {\n      if (response.type === 'success') {\n        const data = Map<string, MediaItem>(response.results.map((item) => [item.guid, item]));\n        return Maybe.just<MediaItem>(data.first() as any);\n      }\n      return Maybe.nothing<MediaItem>();\n    });\n  };\n"]}