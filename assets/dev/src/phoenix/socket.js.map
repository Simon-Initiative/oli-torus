{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../../src/phoenix/socket.ts"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,iDAAiD;AAEjD,+DAA+D;AAC/D,2DAA2D;AAC3D,EAAE;AACF,kDAAkD;AAClD,uDAAuD;AAEvD,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AAEjC,kEAAkE;AAClE,kEAAkE;AAClE,iEAAiE;AACjE,gEAAgE;AAChE,wCAAwC;AACxC,EAAE;AACF,+BAA+B;AAC/B,EAAE;AACF,2BAA2B;AAC3B,YAAY;AACZ,oBAAoB;AACpB,6BAA6B;AAC7B,UAAU;AACV,EAAE;AACF,sCAAsC;AACtC,yDAAyD;AACzD,2EAA2E;AAC3E,2CAA2C;AAC3C,aAAa;AACb,eAAe;AACf,YAAY;AACZ,UAAU;AACV,EAAE;AACF,+DAA+D;AAC/D,kEAAkE;AAClE,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,qEAAqE;AACrE,wCAAwC;AACxC,EAAE;AACF,iEAAiE;AACjE,iEAAiE;AACjE,qFAAqF;AACrF,4BAA4B;AAC5B,kDAAkD;AAClD,8BAA8B;AAC9B,mBAAmB;AACnB,YAAY;AACZ,UAAU;AACV,EAAE;AACF,kCAAkC;AAElC,MAAM,UAAU,UAAU;IACxB,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAG,MAAc,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC7F,MAAM,CAAC,OAAO,EAAE,CAAC;IAEjB,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"assets/js/app.js\".\n\n// To use Phoenix channels, the first step is to import Socket,\n// and connect at the socket path in \"lib/web/endpoint.ex\".\n//\n// Pass the token on params as below. Or remove it\n// from the params if you are not using authentication.\n\nimport { Socket } from 'phoenix';\n\n// When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"lib/web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n//\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"lib/web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/3\" function\n// in \"lib/web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket, _connect_info) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, connect to the socket:\n\nexport function initSocket() {\n  const socket = new Socket('/v1/api/state', { params: { token: (window as any).userToken } });\n  socket.connect();\n\n  return socket;\n}\n"]}