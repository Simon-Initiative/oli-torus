{"version":3,"file":"ActivityTypeSelection.jsx","sourceRoot":"","sources":["../../../../src/components/logic/ActivityTypeSelection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,IAAI,MAAM,YAAY,CAAC;AAe9B,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAiC,EAAE,EAAE;IACzE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEzD,6DAA6D;IAC7D,+CAA+C;IAC/C,MAAM,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAE9B,sEAAsE;IACtE,2EAA2E;IAC3E,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAuB,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAiB,CAAC,CAAC;IAErE,OAAO,CACL,CAAC,SAAS,CACR,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,QAAQ,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CACzB,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CACpB,QAAQ,CAAC,CAAC,CAAC,OAAsD,EAAE,EAAE;YACnE,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE;gBACtC,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACnD,MAAM,CAAC,iBAAiB,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CACF,OAAO,CAAC,CAAC,UAAU,CAAC,CACpB,QAAQ,CAAC,CAAC,IAAI,CAAC,CACf,iBAAiB,CAAC,CAAC,IAAI,CAAC,CACxB,QAAQ,CAAC,OAAO,CAChB,QAAQ,CAAC,CAAC,YAAY,CAAC,CACvB,WAAW,CAAC,0BAA0B,EACtC,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { useState } from 'react';\nimport * as Immutable from 'immutable';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport guid from 'utils/guid';\n\nexport type ActivityType = {\n  id: number;\n  label: string;\n};\n\nexport type ActivityTypeSelectionProps = {\n  activities: ActivityType[];\n  selected: number[];\n  editMode: boolean;\n  onEdit: (ids: number[]) => void;\n  multiple: boolean;\n};\n\nexport const ActivityTypeSelection = (props: ActivityTypeSelectionProps) => {\n  const { activities, editMode, selected, onEdit } = props;\n\n  // Typeahead throws a bunch of warnings if it doesn't contain\n  // a unique DOM id.  So we generate one for it.\n  const [id] = useState(guid());\n\n  // The current 'selected' state of Typeahead must be the same shape as\n  // the options objects. So we look up from our list of slugs those objects.\n  const map = Immutable.Map<number, ActivityType>(activities.map((o) => [o.id, o]));\n  const asActivities = selected.map((s) => map.get(s) as ActivityType);\n\n  return (\n    <Typeahead\n      id={id}\n      multiple={props.multiple}\n      disabled={!editMode}\n      onChange={(updated: (ActivityType & { customOption?: boolean })[]) => {\n        if (updated.length !== selected.length) {\n          const updatedObjectives = updated.map((o) => o.id);\n          onEdit(updatedObjectives);\n        }\n      }}\n      options={activities}\n      allowNew={true}\n      selectHintOnEnter={true}\n      labelKey=\"label\"\n      selected={asActivities}\n      placeholder=\"Select activity types...\"\n    />\n  );\n};\n"]}