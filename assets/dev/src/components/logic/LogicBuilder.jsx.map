{"version":3,"file":"LogicBuilder.jsx","sourceRoot":"","sources":["../../../../src/components/logic/LogicBuilder.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,IAAI,MAAM,mBAAmB,CAAC;AAE1C,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAOlC,MAAM,CAAC,MAAM,YAAY,GAAgC,CAAC,KAAwB,EAAE,EAAE;IACpF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAElC,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,CAAC,UAAe,EAAE,EAAE;QACrC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QACzD,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,IAAI,QAAQ,CAAC;IACb,IAAI,KAAK,CAAC,UAAU,KAAK,IAAI,EAAE;QAC7B,QAAQ,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;KAC1B;SAAM;QACL,QAAQ;YACN,KAAK,CAAC,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,GAAG;gBACrD,KAAK,CAAC,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CACtD,CAAC,MAAM,CACL,IAAI,KAAK,CAAC,CACV,MAAM,CAAC,CAAC,KAAK,CAAC,UAAyB,CAAC,CACxC,QAAQ,CAAC,CAAC,UAAU,CAAC,CACrB,QAAQ,CAAC,CAAC,UAAU,CAAC,EACrB,CACH,CAAC,CAAC,CAAC,CACF,CAAC,UAAU,CACT,IAAI,KAAK,CAAC,CACV,UAAU,CAAC,CAAC,KAAK,CAAC,UAA6B,CAAC,CAChD,QAAQ,CAAC,CAAC,UAAU,CAAC,CACrB,QAAQ,CAAC,CAAC,UAAU,CAAC,EACrB,CACH,CAAC;KACL;IAED,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as Bank from 'data/content/bank';\nimport { LogicProps } from './common';\nimport { Expression } from './Expression';\nimport { Clause } from './Clause';\n\nexport interface LogicBuilderProps extends LogicProps {\n  logic: Bank.Logic;\n  onChange: (logic: Bank.Logic) => void;\n}\n\nexport const LogicBuilder: React.FC<LogicBuilderProps> = (props: LogicBuilderProps) => {\n  const { logic, onChange } = props;\n\n  const removeRoot = () => {\n    const removed = Object.assign({}, logic, { conditions: null });\n    onChange(removed);\n  };\n\n  const changeRoot = (conditions: any) => {\n    const updated = Object.assign({}, logic, { conditions });\n    onChange(updated);\n  };\n\n  let rootNode;\n  if (logic.conditions === null) {\n    rootNode = <span></span>;\n  } else {\n    rootNode =\n      logic.conditions.operator === Bank.ClauseOperator.all ||\n      logic.conditions.operator === Bank.ClauseOperator.any ? (\n        <Clause\n          {...props}\n          clause={logic.conditions as Bank.Clause}\n          onChange={changeRoot}\n          onRemove={removeRoot}\n        />\n      ) : (\n        <Expression\n          {...props}\n          expression={logic.conditions as Bank.Expression}\n          onChange={changeRoot}\n          onRemove={removeRoot}\n        />\n      );\n  }\n\n  return <div className=\"logic\">{rootNode}</div>;\n};\n"]}