{"version":3,"file":"useDimensions.jsx","sourceRoot":"","sources":["../../../../../src/components/misc/resizer/useDimensions.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AACvF,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1D,oEAAoE;AACpE,sDAAsD;AACtD,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,MAAM,GAAG,KAAK,EAC4C,EAAE;IAC5D,MAAM,GAAG,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IACtC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,EAA4B,CAAC;IACzE,eAAe,CAAC,GAAG,EAAE;QACnB,IAAI,CAAC,GAAG,CAAC,OAAO;YAAE,OAAO;QACzB,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5F,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAElB,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { BoundingRect } from 'components/misc/resizer/types';\nimport { clientBoundingRect, offsetBoundingRect } from 'components/misc/resizer/utils';\nimport { useState, useLayoutEffect, useRef } from 'react';\n\n// Hook to give a client (default) or offset bounding rect and a ref\n// to point at the element you want the dimensions for\nexport const useDimensions = (\n  offset = false,\n): [React.RefObject<HTMLElement>, BoundingRect | undefined] => {\n  const ref = useRef<HTMLElement>(null);\n  const [dimensions, setDimensions] = useState<BoundingRect | undefined>();\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setDimensions(offset ? offsetBoundingRect(ref.current) : clientBoundingRect(ref.current));\n  }, [ref.current]);\n\n  return [ref, dimensions];\n};\n"]}