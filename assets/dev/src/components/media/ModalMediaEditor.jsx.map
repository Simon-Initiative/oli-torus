{"version":3,"file":"ModalMediaEditor.jsx","sourceRoot":"","sources":["../../../../src/components/media/ModalMediaEditor.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,cAAc,EAAE,EAAE,KAAK,EAAE,MAAM,iCAAiC,CAAC;AAkBxE,MAAM,gBAAiB,SAAQ,KAAK,CAAC,aAA2D;IAC9F,YAAY,KAA4B;QACtC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,KAAU;QACf,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED,cAAc;QACZ,MAAM,eAAe,GAAG;YACtB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;QACF,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;YACnD,OAAO,KAAK,CAAC,YAAY,CAAC,CAAQ,EAAE,eAAe,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO,CACL,CAAC,cAAc,CACb,KAAK,CAAC,MAAM,CACZ,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CACvB,OAAO,CAAC,MAAM,CACd,WAAW,CAAC,QAAQ,CACpB,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAC9B,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAEtD;QAAA,CAAC,IAAI,CAAC,cAAc,EAAE,CACxB;MAAA,EAAE,cAAc,CAAC,CAClB,CAAC;IACJ,CAAC;CACF;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["import * as React from 'react';\nimport ModalSelection, { sizes } from 'components/modal/ModalSelection';\n// eslint-disable-next-line\ninterface ModalMediaEditor {\n\n}\n\nexport interface ModalMediaEditorProps {\n  onInsert: (model: any) => void;\n  onCancel: () => void;\n  model: any;\n  editMode: boolean;\n  projectSlug: string;\n}\n\nexport interface ModalMediaEditorState {\n  model: any;\n}\n\nclass ModalMediaEditor extends React.PureComponent<ModalMediaEditorProps, ModalMediaEditorState> {\n  constructor(props: ModalMediaEditorProps) {\n    super(props);\n\n    this.state = {\n      model: props.model,\n    };\n\n    this.onEdit = this.onEdit.bind(this);\n  }\n\n  onEdit(model: any) {\n    this.setState({ model });\n  }\n\n  renderChildren() {\n    const additionalProps = {\n      model: this.state.model,\n      onEdit: this.onEdit,\n    };\n    return React.Children.map(this.props.children, (c) => {\n      return React.cloneElement(c as any, additionalProps);\n    });\n  }\n\n  render() {\n    return (\n      <ModalSelection\n        title=\"Edit\"\n        size={sizes.extraLarge}\n        okLabel=\"Done\"\n        cancelLabel=\"Cancel\"\n        onCancel={this.props.onCancel}\n        onInsert={() => this.props.onInsert(this.state.model)}\n      >\n        {this.renderChildren()}\n      </ModalSelection>\n    );\n  }\n}\n\nexport default ModalMediaEditor;\n"]}