{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../../src/components/media/manager/upload.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,WAAW,MAAM,wBAAwB,CAAC;AAEtD,wEAAwE;AACxE,qEAAqE;AACrE,mCAAmC;AACnC,MAAM,CAAC,MAAM,WAAW,GAAG,CAAO,WAAmB,EAAE,KAAa,EAAE,EAAE;IACtE,MAAM,OAAO,GAAU,EAAE,CAAC;IAE1B,MAAM,UAAU,GAAG,CAAO,IAAU,EAAgB,EAAE;QACpD,OAAA,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACzD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAErB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,EAAU,CAAC,CAAC;aACxC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAA;MAAA,CAAC;IAEL,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,EAAU,CAAC,CAAC;AACzC,CAAC,CAAA,CAAC","sourcesContent":["import * as persistence from 'data/persistence/media';\n\n// the server creates a lock on upload, so we must upload files one at a\n// time. This factory function returns a new promise to upload a file\n// recursively until files is empty\nexport const uploadFiles = async (projectSlug: string, files: File[]) => {\n  const results: any[] = [];\n\n  const uploadFile = async (file: File): Promise<any> =>\n    persistence.createMedia(projectSlug, file).then((result) => {\n      results.push(result);\n\n      if (files.length > 0) {\n        return uploadFile(files.pop() as File);\n      }\n\n      return results;\n    });\n\n  return uploadFile(files.pop() as File);\n};\n"]}