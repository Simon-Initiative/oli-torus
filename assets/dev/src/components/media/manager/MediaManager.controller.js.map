{"version":3,"file":"MediaManager.controller.js","sourceRoot":"","sources":["../../../../../src/components/media/manager/MediaManager.controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAGtC,OAAO,EAAE,wBAAwB,EAAE,UAAU,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAG3F,OAAO,EAAE,YAAY,EAAmB,MAAM,gBAAgB,CAAC;AAE/D,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AA6BnE,MAAM,eAAe,GAAG,CAAC,KAAY,EAAE,SAAmB,EAAc,EAAE;IACxE,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAE,SAAmB,EAAiB,EAAE;IACpF,OAAO;QACL,yBAAyB,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;YACjF,OAAO,QAAQ,CACb,wBAAwB,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,CAAQ,CACrF,CAAC;QACJ,CAAC;QACD,YAAY,EAAE,GAAG,EAAE;YACjB,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACzB,CAAC;QACD,qBAAqB,EAAE,CAAC,WAAmB,EAAE,IAAY,EAAE,EAAE,CAC3D,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,IAAI,CAAQ,CAAC;KAC3D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,OAAO,CAC/B,eAAe,EACf,kBAAkB,CACnB,CAAC,YAAY,CAAC,CAAC;AAEhB,OAAO,EAAE,UAAU,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import { connect } from 'react-redux';\nimport { Maybe } from 'tsmonad';\nimport { State, Dispatch } from 'state';\nimport { fetchCourseMediaNextPage, resetMedia, fetchMediaItemByPath } from 'actions/media';\nimport { OrderedMediaLibrary } from '../OrderedMediaLibrary';\nimport { MediaLibraryOption, MediaItem } from 'types/media';\nimport { MediaManager, SELECTION_TYPES } from './MediaManager';\n\nexport { MIMETYPE_FILTERS, SELECTION_TYPES } from './MediaManager';\n\ninterface StateProps {\n  media: OrderedMediaLibrary;\n}\n\ninterface DispatchProps {\n  onLoadCourseMediaNextPage: (\n    projectSlug: string,\n    mimeFilter: string[] | undefined,\n    searchText: string,\n    orderBy: string,\n    order: string,\n  ) => void;\n  onResetMedia: () => void;\n  onLoadMediaItemByPath: (projectSlug: string, path: string) => Promise<Maybe<MediaItem>>;\n}\n\ninterface OwnProps {\n  disabled?: boolean;\n  className?: string;\n  projectSlug: string;\n  mimeFilter?: string[] | undefined;\n  selectionType: SELECTION_TYPES;\n  initialSelectionPaths?: string[];\n  onEdit: (updated: MediaLibraryOption) => void;\n  onSelectionChange: (selection: MediaItem[]) => void;\n}\n\nconst mapStateToProps = (state: State, _ownProps: OwnProps): StateProps => {\n  return {\n    media: state.media,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch, _ownProps: OwnProps): DispatchProps => {\n  return {\n    onLoadCourseMediaNextPage: (projectSlug, mimeFilter, searchText, orderBy, order) => {\n      return dispatch(\n        fetchCourseMediaNextPage(projectSlug, mimeFilter, searchText, orderBy, order) as any,\n      );\n    },\n    onResetMedia: () => {\n      dispatch(resetMedia());\n    },\n    onLoadMediaItemByPath: (projectSlug: string, path: string) =>\n      dispatch(fetchMediaItemByPath(projectSlug, path) as any),\n  };\n};\n\nexport const controller = connect<StateProps, DispatchProps, OwnProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MediaManager);\n\nexport { controller as MediaManager };\n"]}