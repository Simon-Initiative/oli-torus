{"version":3,"file":"OrderedMediaLibrary.js","sourceRoot":"","sources":["../../../../src/components/media/OrderedMediaLibrary.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AAavC,MAAM,cAAc,GAAG;IACrB,IAAI,EAAE,SAAS,CAAC,GAAG,EAAqB;IACxC,KAAK,EAAE,SAAS,CAAC,IAAI,EAAU;IAC/B,UAAU,EAAE,SAAS,CAAC,GAAG,EAAoC;IAC7D,UAAU,EAAE,CAAC,QAAQ;IACrB,gBAAgB,EAAE,CAAC;IACnB,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,EAAE;CACd,CAAC;AAEF,MAAM,OAAO,mBAAoB,SAAQ,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC;IASvE,YAAY,MAAkC;QAC5C,KAAK,CAAC,MAAM,CAAC,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,MAAiC;QACpC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAS,CAAC;IACpC,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,QAAgB,IAAI,CAAC,KAAK,CAAC,IAAI;QAClD,OAAO,IAAI,CAAC,KAAK;aACd,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;aACpB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAClC,OAAO,EAAE,CAAC;IACf,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC;IACjF,CAAC;IAED,IAAI,CAAC,KAAgC,EAAE,UAAkB;QACvD,OAAO,IAAI,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CACnB,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG,EAAqB,CAAC,CACjF;YACD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAA2B;YAC5E,UAAU;YACV,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,IAAI;SACrD,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,IAAsC;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,cAAc,CAAC,UAA2D;QACxE,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACtE,CAAC;IAED,UAAU;QACR,wDAAwD;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,SAAS,CAAC,IAAI,EAAU;YAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,UAAU,EAAE,CAAC,QAAQ;YACrB,gBAAgB,EAAE,CAAC;YACnB,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import * as Immutable from 'immutable';\nimport { MediaItem, MediaRef } from 'types/media';\n\ntype OrderedMediaLibraryParams = {\n  data?: Immutable.Map<string, MediaItem>;\n  items?: Immutable.List<string>;\n  references?: Immutable.Map<string, Immutable.List<MediaRef>>;\n  totalItems?: number;\n  totalItemsLoaded?: number;\n  isLoading?: boolean;\n  lastReqId?: string;\n};\n\nconst defaultContent = {\n  data: Immutable.Map<string, MediaItem>(),\n  items: Immutable.List<string>(),\n  references: Immutable.Map<string, Immutable.List<MediaRef>>(),\n  totalItems: -Infinity,\n  totalItemsLoaded: 0,\n  isLoading: false,\n  lastReqId: '',\n};\n\nexport class OrderedMediaLibrary extends Immutable.Record(defaultContent) {\n  data: Immutable.Map<string, MediaItem>;\n  items: Immutable.List<string>;\n  references: Immutable.Map<string, Immutable.List<MediaRef>>;\n  totalItems: number;\n  totalItemsLoaded: number;\n  isLoading: boolean;\n  lastReqId: string;\n\n  constructor(params?: OrderedMediaLibraryParams) {\n    super(params);\n  }\n\n  with(values: OrderedMediaLibraryParams) {\n    return this.merge(values) as this;\n  }\n\n  getItem(guid: string) {\n    return this.data.get(guid);\n  }\n\n  getItems(offset = 0, count: number = this.items.size) {\n    return this.items\n      .slice(offset, count)\n      .map((guid) => this.data.get(guid))\n      .toArray();\n  }\n\n  allItemsLoaded() {\n    return this.totalItems > -Infinity && this.totalItemsLoaded >= this.totalItems;\n  }\n\n  load(items: Immutable.List<MediaItem>, totalItems: number) {\n    return this.with({\n      data: this.data.merge(\n        items.reduce((acc, i) => acc.set(i.guid, i), Immutable.Map<string, MediaItem>()),\n      ),\n      items: this.items.concat(items.map((i) => i.guid)) as Immutable.List<string>,\n      totalItems,\n      totalItemsLoaded: this.totalItemsLoaded + items.size,\n    });\n  }\n\n  sideloadData(data: Immutable.Map<string, MediaItem>) {\n    return this.with({ data: this.data.merge(data) });\n  }\n\n  getReferences(guid: string) {\n    return this.references.get(guid);\n  }\n\n  loadReferences(references: Immutable.Map<string, Immutable.List<MediaRef>>) {\n    return this.with({ references: this.references.merge(references) });\n  }\n\n  clearItems() {\n    // reset media library but keep data and reference cache\n    return this.with({\n      data: this.data,\n      items: Immutable.List<string>(),\n      references: this.references,\n      totalItems: -Infinity,\n      totalItemsLoaded: 0,\n      isLoading: false,\n    });\n  }\n}\n"]}