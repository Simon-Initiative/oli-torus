{"version":3,"file":"responseActions.js","sourceRoot":"","sources":["../../../../../../src/components/activities/common/responses/responseActions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,EAGL,YAAY,GAKb,MAAM,6BAA6B,CAAC;AACrC,OAAO,EACL,aAAa,EACb,aAAa,EACb,oBAAoB,EACpB,cAAc,GACf,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,WAAW,CAAC,QAAkB,EAAE,MAAc,EAAE,IAAI,GAAG,cAAc;QACnE,OAAO,CAAC,KAAe,EAAE,EAAE;YACzB,uFAAuF;YACvF,MAAM,SAAS,GAAG,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACtD,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QAChF,CAAC,CAAC;IACJ,CAAC;IAED,oBAAoB,CAAC,UAAsB,EAAE,OAAiB;QAC5D,OAAO,CAAC,KAAe,EAAE,EAAE;YACzB,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAC9E,CAAC,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,UAAsB,EAAE,IAAI,GAAG,cAAc;QAC1D,OAAO,CAAC,KAAe,EAAE,EAAE;YACzB,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE;oBACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC;iBACvE;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,EAAc,EAAE,IAAY;QACnC,OAAO,CAAC,UAAoB,EAAE,EAAE;YAC9B,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5D,CAAC,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,UAAsB,EAAE,IAAI,GAAG,cAAc;QAClE,OAAO,CACL,KAAsE,EACtE,IAAkB,EAClB,EAAE;YACF,IAAI,CACF,YAAY,CAAC,kBAAkB,EAAE;gBAC/B,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aAC1D,CAAC,CACH,CAAC;YAEF,eAAe,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,CACJ,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,UAAU,CAAC,EAC7E,KAAK,CAAC,SAAS,CAAC,QAAQ,CACzB,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { remove } from 'components/activities/common/utils';\nimport {\n  ChoiceIdsToResponseId,\n  HasParts,\n  makeUndoable,\n  PostUndoable,\n  Response,\n  ResponseId,\n  RichText,\n} from 'components/activities/types';\nimport {\n  getResponseBy,\n  getResponseId,\n  getResponsesByPartId,\n  RESPONSES_PATH,\n} from 'data/activities/model/responses';\nimport { getParts } from 'data/activities/model/utils';\nimport { clone } from 'utils/common';\nimport { Operations } from 'utils/pathOperations';\n\nexport const ResponseActions = {\n  addResponse(response: Response, partId: string, path = RESPONSES_PATH) {\n    return (model: HasParts) => {\n      // Insert a new reponse just before the last response (which is the catch-all response)\n      const responses = getResponsesByPartId(model, partId);\n      getResponsesByPartId(model, partId).splice(responses.length - 1, 0, response);\n    };\n  },\n\n  editResponseFeedback(responseId: ResponseId, content: RichText) {\n    return (model: HasParts) => {\n      getResponseBy(model, (r) => r.id === responseId).feedback.content = content;\n    };\n  },\n\n  removeResponse(responseId: ResponseId, path = RESPONSES_PATH) {\n    return (model: HasParts) => {\n      getParts(model).forEach((part) => {\n        if (part.responses.find(({ id }) => id === responseId)) {\n          part.responses = part.responses.filter(({ id }) => id !== responseId);\n        }\n      });\n    };\n  },\n\n  editRule(id: ResponseId, rule: string) {\n    return (draftState: HasParts) => {\n      getResponseBy(draftState, (r) => r.id === id).rule = rule;\n    };\n  },\n\n  removeTargetedFeedback(responseId: ResponseId, path = RESPONSES_PATH) {\n    return (\n      model: HasParts & { authoring: { targeted: ChoiceIdsToResponseId[] } },\n      post: PostUndoable,\n    ) => {\n      post(\n        makeUndoable('Removed feedback', [\n          Operations.replace('$.authoring', clone(model.authoring)),\n        ]),\n      );\n\n      ResponseActions.removeResponse(responseId, path)(model);\n      remove(\n        model.authoring.targeted.find((assoc) => getResponseId(assoc) === responseId),\n        model.authoring.targeted,\n      );\n    };\n  },\n};\n"]}