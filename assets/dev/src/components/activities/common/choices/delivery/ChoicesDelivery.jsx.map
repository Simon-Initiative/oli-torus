{"version":3,"file":"ChoicesDelivery.jsx","sourceRoot":"","sources":["../../../../../../../src/components/activities/common/choices/delivery/ChoicesDelivery.tsx"],"names":[],"mappings":"AAEA,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,wBAAwB,CAAC;AAWhC,MAAM,CAAC,MAAM,eAAe,GAAoB,CAAC,EAC/C,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,GACb,EAAE,EAAE;IACH,MAAM,UAAU,GAAG,CAAC,QAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;IAClF,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,UAAU,CAAC,gBAAgB,CAC7D;MAAA,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAC9B,CAAC,GAAG,CACF,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CACf,UAAU,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,EAAE,CAAC,CAClC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAC/D,SAAS,CAAC,CAAC,uBAAuB,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAE5E;UAAA,CAAC,GAAG,CAAC,SAAS,CAAC,yBAAyB,CACtC;YAAA,CAAC,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,UAAU,KAAK,EAAE,CAAC,CAClE;cAAA,CAAC,GAAG,CAAC,SAAS,CAAC,2BAA2B,CACxC;gBAAA,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,cAAc,CACtD;gBAAA,CAAC,GAAG,CAAC,SAAS,CAAC,yBAAyB,CACtC;kBAAA,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACtE;gBAAA,EAAE,GAAG,CACP;cAAA,EAAE,GAAG,CACP;YAAA,EAAE,KAAK,CACT;UAAA,EAAE,GAAG,CACP;QAAA,EAAE,GAAG,CAAC,CACP,CAAC,CACJ;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Choice, ChoiceId } from 'components/activities/types';\nimport { WriterContext } from 'data/content/writers/context';\nimport { HtmlContentModelRenderer } from 'data/content/writers/renderer';\nimport React from 'react';\nimport './ChoicesDelivery.scss';\n\ninterface Props {\n  choices: Choice[];\n  selected: ChoiceId[];\n  context: WriterContext;\n  onSelect: (id: ChoiceId) => void;\n  isEvaluated: boolean;\n  unselectedIcon: React.ReactNode;\n  selectedIcon: React.ReactNode;\n}\nexport const ChoicesDelivery: React.FC<Props> = ({\n  choices,\n  selected,\n  context,\n  onSelect,\n  isEvaluated,\n  unselectedIcon,\n  selectedIcon,\n}) => {\n  const isSelected = (choiceId: ChoiceId) => !!selected.find((s) => s === choiceId);\n  return (\n    <div className=\"choices__container\" aria-label=\"answer choices\">\n      {choices.map((choice, index) => (\n        <div\n          key={choice.id}\n          aria-label={`choice ${index + 1}`}\n          onClick={() => (isEvaluated ? undefined : onSelect(choice.id))}\n          className={`choices__choice-row ${isSelected(choice.id) ? 'selected' : ''}`}\n        >\n          <div className=\"choices__choice-wrapper\">\n            <label className=\"choices__choice-label\" htmlFor={`choice-${index}`}>\n              <div className=\"d-flex align-items-center\">\n                {isSelected(choice.id) ? selectedIcon : unselectedIcon}\n                <div className=\"choices__choice-content\">\n                  <HtmlContentModelRenderer content={choice.content} context={context} />\n                </div>\n              </div>\n            </label>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n"]}