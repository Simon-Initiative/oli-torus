{"version":3,"file":"utils.jsx","sourceRoot":"","sources":["../../../../../src/components/activities/common/utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAkB,MAAM,UAAU,CAAC;AAEzE,uFAAuF;AACvF,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,CAAC;AAEnC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,eAAiC,EAAW,EAAE,CACvE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,OAAO,CAAC,CAAC;AAE3E,MAAM,CAAC,MAAM,2BAA2B,GAAG,GAAG,EAAE;IAC9C,OAAO,CAAC,KAA2D,EAAQ,EAAE;QAC3E,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC;QAExD,UAAU,CAAC,eAAe,CAAC;YACzB,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,GAAG,eAAe,CAAC,MAAM,CACvD,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,OAAO,CACjD,CAAC;YACJ,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7F,CAAC,CAAC;AACJ,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,oBAAoB,GAAwC,CAAC,EACxE,SAAS,EACT,KAAK,GACqB,EAAE,EAAE,CAAC,CAC/B,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAC9B;IAAA,CAAC,KAAK,CACJ,QAAQ,CAAC,CAAC,SAAS,CAAC,CACpB,SAAS,CAAC,kBAAkB,CAC5B,IAAI,CAAC,UAAU,CACf,KAAK,CAAC,EAAE,CACR,OAAO,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CACrD,EAAE,CAAC,iBAAiB,EAEtB;IAAA,CAAC,KAAK,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,CAC3D;;IACF,EAAE,KAAK,CACT;EAAA,EAAE,GAAG,CAAC,CACP,CAAC;AAEF,MAAM,UAAU,WAAW,CAAI,IAAO,EAAE,IAAS;IAC/C,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;QAChC,OAAO,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3B;IACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,MAAM,CAAI,IAAO,EAAE,IAAS;IAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;IAChD,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACvB;AACH,CAAC;AAED,MAAM,UAAU,aAAa,CAAI,cAAmB,EAAE,UAAe;IACnE,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,QAAQ,CAAI,KAAU,EAAE,KAAU;IAChD,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC","sourcesContent":["import React from 'react';\nimport { makeTransformation, Transform, Transformation } from '../types';\n\n// Activities with one part have a hard-coded ID. This makes some lookup logic simpler.\nexport const DEFAULT_PART_ID = '1';\n\nexport const isShuffled = (transformations: Transformation[]): boolean =>\n  !!transformations.find((xform) => xform.operation === Transform.shuffle);\n\nexport const toggleAnswerChoiceShuffling = () => {\n  return (model: { authoring: { transformations: Transformation[] } }): void => {\n    const transformations = model.authoring.transformations;\n\n    isShuffled(transformations)\n      ? (model.authoring.transformations = transformations.filter(\n          (xform) => xform.operation !== Transform.shuffle,\n        ))\n      : model.authoring.transformations.push(makeTransformation('choices', Transform.shuffle));\n  };\n};\n\ninterface ShuffleChoicesOptionProps {\n  onShuffle: () => void;\n  model: { authoring: { transformations: Transformation[] } };\n}\nexport const ShuffleChoicesOption: React.FC<ShuffleChoicesOptionProps> = ({\n  onShuffle,\n  model,\n}: ShuffleChoicesOptionProps) => (\n  <div className=\"form-check mb-2\">\n    <input\n      onChange={onShuffle}\n      className=\"form-check-input\"\n      type=\"checkbox\"\n      value=\"\"\n      checked={isShuffled(model.authoring.transformations)}\n      id=\"shuffle-choices\"\n    />\n    <label className=\"form-check-label\" htmlFor=\"shuffle-choices\">\n      Shuffle answer choices\n    </label>\n  </div>\n);\n\nexport function addOrRemove<T>(item: T, list: T[]) {\n  if (list.find((x) => x === item)) {\n    return remove(item, list);\n  }\n  return list.push(item);\n}\n\nexport function remove<T>(item: T, list: T[]) {\n  const index = list.findIndex((x) => x === item);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\nexport function setDifference<T>(subtractedFrom: T[], toSubtract: T[]) {\n  return subtractedFrom.filter((x) => !toSubtract.includes(x));\n}\n\nexport function setUnion<T>(list1: T[], list2: T[]) {\n  return [...list2.reduce((acc, curr) => acc.add(curr), new Set(list1))];\n}\n"]}