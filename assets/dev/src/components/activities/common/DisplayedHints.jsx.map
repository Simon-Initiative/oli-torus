{"version":3,"file":"DisplayedHints.jsx","sourceRoot":"","sources":["../../../../../src/components/activities/common/DisplayedHints.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AASzE,MAAM,aAAa,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAsB,EAAE,EAAE;IACrE,OAAO,CACL,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,QAAQ,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAC9E;MAAA,CAAC,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,CACnC;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAC7B;QAAA,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACpE;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,KAAiB,EAAE,EAAE;IACzC,MAAM,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;IAElD,4FAA4F;IAC5F,kDAAkD;IAClD,IAAI,gBAAgB,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;QAC3C,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CACzB;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,GAAG,CACtC;MAAA,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CACb;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CACzB;QAAA,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAChC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAG,CAClF,CAAC,CACJ;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,KAAK,CAAC,YAAY,IAAI,CACrB,CAAC,MAAM,CACL,UAAU,CAAC,cAAc,CACzB,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CACvB,QAAQ,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CACnD,SAAS,CAAC,mCAAmC,CAE7C;;QACF,EAAE,MAAM,CAAC,CACV,CACH;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport * as ActivityTypes from '../types';\nimport { HtmlContentModelRenderer } from 'data/content/writers/renderer';\nimport { WriterContext } from 'data/content/writers/context';\n\ninterface DisplayedHintProps {\n  hint: ActivityTypes.Hint;\n  context: WriterContext;\n  index: number;\n}\n\nconst DisplayedHint = ({ hint, context, index }: DisplayedHintProps) => {\n  return (\n    <div key={hint.id} aria-label={`hint ${index + 1}`} className=\"hint mb-2 d-flex\">\n      <i className=\"fas fa-lightbulb\"></i>\n      <div className=\"flex-fill ml-2\">\n        <HtmlContentModelRenderer content={hint.content} context={context} />\n      </div>\n    </div>\n  );\n};\n\ninterface HintsProps {\n  isEvaluated: boolean;\n  hints: ActivityTypes.Hint[];\n  hasMoreHints: boolean;\n  context: WriterContext;\n  onClick: () => void;\n}\n\nexport const Hints = (props: HintsProps) => {\n  const noHintsRequested = props.hints.length === 0;\n\n  // Display nothing if the question has no hints, meaning no hints have been requested so far\n  // and there are no more available to be requested\n  if (noHintsRequested && !props.hasMoreHints) {\n    return null;\n  }\n\n  return (\n    <div className=\"hints my-2\">\n      <div className=\"hints-adornment\"></div>\n      <h6>Hints</h6>\n      <div className=\"hints-list\">\n        {props.hints.map((hint, index) => (\n          <DisplayedHint index={index} key={hint.id} hint={hint} context={props.context} />\n        ))}\n      </div>\n      {props.hasMoreHints && (\n        <button\n          aria-label=\"request hint\"\n          onClick={props.onClick}\n          disabled={props.isEvaluated || !props.hasMoreHints}\n          className=\"btn btn-sm btn-primary muted mt-2\"\n        >\n          Request Hint\n        </button>\n      )}\n    </div>\n  );\n};\n"]}