{"version":3,"file":"HintsDeliveryConnected.jsx","sourceRoot":"","sources":["../../../../../../../src/components/activities/common/hints/delivery/HintsDeliveryConnected.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,2DAA2D,CAAC;AAC1F,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAC;AAElF,OAAO,EAAyB,WAAW,EAAE,WAAW,EAAE,MAAM,+BAA+B,CAAC;AAChG,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAMvD,MAAM,CAAC,MAAM,sBAAsB,GAAoB,CAAC,KAAK,EAAE,EAAE;;IAC/D,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,yBAAyB,EAAY,CAAC;IACvF,MAAM,OAAO,GAAG,WAAW,CAAC,CAAC,KAA4B,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;IACrE,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAE/B,OAAO,CACL,CAAC,aAAa,CACZ,UAAU,CAAC,CACT,CAAC,OAAO,KAAK,CAAC,UAAU,KAAK,WAAW,IAAI,KAAK,CAAC,UAAU,CAAC;YAC7D,CAAC,WAAW,CAAC,OAAO,CAAC;YACrB,CAAC,MAAM,CACR,CACD,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAClE,KAAK,CAAC,CAAC,CAAA,MAAA,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,0CAAE,UAAU,KAAI,EAAE,CAAC,CACzD,YAAY,CAAC,CAAC,CAAA,MAAA,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,0CAAE,YAAY,KAAI,KAAK,CAAC,CACrE,WAAW,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAClC,OAAO,CAAC,CAAC,aAAa,CAAC,EACvB,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { HintsDelivery } from 'components/activities/common/hints/delivery/HintsDelivery';\nimport { useDeliveryElementContext } from 'components/activities/DeliveryElement';\nimport { HasHints, PartId } from 'components/activities/types';\nimport { ActivityDeliveryState, isEvaluated, requestHint } from 'data/activities/DeliveryState';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface Props {\n  partId: PartId;\n  shouldShow?: boolean;\n}\nexport const HintsDeliveryConnected: React.FC<Props> = (props) => {\n  const { onRequestHint, graded, writerContext } = useDeliveryElementContext<HasHints>();\n  const uiState = useSelector((state: ActivityDeliveryState) => state);\n  const dispatch = useDispatch();\n\n  return (\n    <HintsDelivery\n      shouldShow={\n        (typeof props.shouldShow === 'undefined' || props.shouldShow) &&\n        !isEvaluated(uiState) &&\n        !graded\n      }\n      onClick={() => dispatch(requestHint(props.partId, onRequestHint))}\n      hints={uiState.partState[props.partId]?.hintsShown || []}\n      hasMoreHints={uiState.partState[props.partId]?.hasMoreHints || false}\n      isEvaluated={isEvaluated(uiState)}\n      context={writerContext}\n    />\n  );\n};\n"]}