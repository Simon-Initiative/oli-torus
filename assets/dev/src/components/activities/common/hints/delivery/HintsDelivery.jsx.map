{"version":3,"file":"HintsDelivery.jsx","sourceRoot":"","sources":["../../../../../../../src/components/activities/common/hints/delivery/HintsDelivery.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAEzE,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAY5C,MAAM,CAAC,MAAM,aAAa,GAAoB,CAAC,EAC7C,WAAW,EACX,KAAK,EACL,YAAY,EACZ,OAAO,EACP,OAAO,EACP,UAAU,GAAG,IAAI,GAClB,EAAE,EAAE;IACH,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IACD,4FAA4F;IAC5F,kDAAkD;IAClD,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;IAC5C,IAAI,gBAAgB,IAAI,CAAC,YAAY,EAAE;QACrC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,CACL,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAC1B;MAAA,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAC7B;MAAA,CAAC,IAAI,CAAC,OAAO,CACX;QAAA,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAC1B,CAAC,GAAG,CACF,UAAU,CAAC,CAAC,QAAQ,KAAK,GAAG,CAAC,EAAE,CAAC,CAChC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CACb,SAAS,CAAC,gCAAgC,CAE1C;YAAA,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CACzC;YAAA,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACpE;UAAA,EAAE,GAAG,CAAC,CACP,CAAC,CACF;QAAA,CAAC,YAAY,IAAI,CACf,CAAC,MAAM,CACL,UAAU,CAAC,cAAc,CACzB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,QAAQ,CAAC,CAAC,WAAW,IAAI,CAAC,YAAY,CAAC,CACvC,SAAS,CAAC,qBAAqB,CAC/B,KAAK,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAEtB;;UACF,EAAE,MAAM,CAAC,CACV,CACH;MAAA,EAAE,IAAI,CAAC,OAAO,CAChB;IAAA,EAAE,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { HtmlContentModelRenderer } from 'data/content/writers/renderer';\nimport { WriterContext } from 'data/content/writers/context';\nimport { Card } from 'components/misc/Card';\nimport { Hint } from 'components/activities/types';\n\ninterface Props {\n  isEvaluated: boolean;\n  hints: Hint[];\n  hasMoreHints: boolean;\n  context: WriterContext;\n  onClick: () => void;\n  shouldShow?: boolean;\n}\n\nexport const HintsDelivery: React.FC<Props> = ({\n  isEvaluated,\n  hints,\n  hasMoreHints,\n  context,\n  onClick,\n  shouldShow = true,\n}) => {\n  if (!shouldShow) {\n    return null;\n  }\n  // Display nothing if the question has no hints, meaning no hints have been requested so far\n  // and there are no more available to be requested\n  const noHintsRequested = hints.length === 0;\n  if (noHintsRequested && !hasMoreHints) {\n    return null;\n  }\n  return (\n    <Card.Card className=\"hints\">\n      <Card.Title>Hints</Card.Title>\n      <Card.Content>\n        {hints.map((hint, index) => (\n          <div\n            aria-label={`hint ${index + 1}`}\n            key={hint.id}\n            className=\"d-flex align-items-center mb-2\"\n          >\n            <span className=\"mr-2\">{index + 1}.</span>\n            <HtmlContentModelRenderer content={hint.content} context={context} />\n          </div>\n        ))}\n        {hasMoreHints && (\n          <button\n            aria-label=\"request hint\"\n            onClick={onClick}\n            disabled={isEvaluated || !hasMoreHints}\n            className=\"btn btn-sm btn-link\"\n            style={{ padding: 0 }}\n          >\n            Request Hint\n          </button>\n        )}\n      </Card.Content>\n    </Card.Card>\n  );\n};\n"]}