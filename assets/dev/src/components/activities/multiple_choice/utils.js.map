{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../src/components/activities/multiple_choice/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAErE,OAAO,EAGL,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,kBAAkB,EAClB,SAAS,GACV,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AAChF,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,CAAC,MAAM,cAAc,GAAmB,GAAG,EAAE;IACjD,MAAM,OAAO,GAAW,UAAU,CAAC,UAAU,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAW,UAAU,CAAC,UAAU,CAAC,CAAC;IAE/C,OAAO;QACL,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC;QAClB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;QAC3B,SAAS,EAAE;YACT,OAAO,EAAE,CAAC;YACV,KAAK,EAAE;gBACL,QAAQ,CACN,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,EACvC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,EAC1C,eAAe,CAChB;aACF;YACD,QAAQ,EAAE,EAAE;YACZ,eAAe,EAAE,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;YACnE,WAAW,EAAE,EAAE;SAChB;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAe,EAAE,MAAM,GAAG,eAAe,EAAE,EAAE;IAC5E,MAAM,eAAe,GAAG,KAAK,CAAC,KAAK,CACjC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CACvD,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC,CAAC;IAE1E,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import { DEFAULT_PART_ID } from 'components/activities/common/utils';\nimport { MCSchema } from 'components/activities/multiple_choice/schema';\nimport {\n  Choice,\n  HasParts,\n  makeChoice,\n  makeHint,\n  makePart,\n  makeStem,\n  makeTransformation,\n  Transform,\n} from 'components/activities/types';\nimport { Choices } from 'data/activities/model/choices';\nimport { getCorrectResponse, Responses } from 'data/activities/model/responses';\nimport { Maybe } from 'tsmonad';\n\nexport const defaultMCModel: () => MCSchema = () => {\n  const choiceA: Choice = makeChoice('Choice A');\n  const choiceB: Choice = makeChoice('Choice B');\n\n  return {\n    stem: makeStem(''),\n    choices: [choiceA, choiceB],\n    authoring: {\n      version: 2,\n      parts: [\n        makePart(\n          Responses.forMultipleChoice(choiceA.id),\n          [makeHint(''), makeHint(''), makeHint('')],\n          DEFAULT_PART_ID,\n        ),\n      ],\n      targeted: [],\n      transformations: [makeTransformation('choices', Transform.shuffle)],\n      previewText: '',\n    },\n  };\n};\n\nexport const getCorrectChoice = (model: HasParts, partId = DEFAULT_PART_ID) => {\n  const responseIdMatch = Maybe.maybe(\n    getCorrectResponse(model, partId).rule.match(/{(.*)}/),\n  ).valueOrThrow(new Error('Could not find choice id in correct response'));\n\n  return Choices.getOne(model, responseIdMatch[1]);\n};\n"]}