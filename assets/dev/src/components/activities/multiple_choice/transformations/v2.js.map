{"version":3,"file":"v2.js","sourceRoot":"","sources":["../../../../../../src/components/activities/multiple_choice/transformations/v2.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAUrE,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AAC9F,OAAO,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAC;AAcxD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAiB,EAAc,EAAE;IACxD,MAAM,QAAQ,GAAe;QAC3B,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,SAAS,EAAE;YACT,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK;YAC5B,eAAe,EAAE,KAAK,CAAC,SAAS,CAAC,eAAe;YAChD,WAAW,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW;YACxC,QAAQ,EAAE,EAAE;SACb;KACF,CAAC;IAEF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;QACnE,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG;YACtC,kBAAkB,CAAC,QAAQ,EAAE,eAAe,CAAC;YAC7C,SAAS,CAAC,QAAQ,EAAE;SACrB,CAAC;KACH;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { DEFAULT_PART_ID } from 'components/activities/common/utils';\nimport { MCSchemaV1 } from 'components/activities/multiple_choice/transformations/v1';\nimport {\n  ActivityModelSchema,\n  Choice,\n  ChoiceIdsToResponseId,\n  Part,\n  Stem,\n  Transformation,\n} from 'components/activities/types';\nimport { getCorrectResponse, getResponses, Responses } from 'data/activities/model/responses';\nimport { matchRule } from 'data/activities/model/rules';\n\nexport interface MCSchemaV2 extends ActivityModelSchema {\n  stem: Stem;\n  choices: Choice[];\n  authoring: {\n    version: 2;\n    targeted: ChoiceIdsToResponseId[];\n    parts: Part[];\n    transformations: Transformation[];\n    previewText: string;\n  };\n}\n\nexport const mcV1toV2 = (model: MCSchemaV1): MCSchemaV2 => {\n  const newModel: MCSchemaV2 = {\n    stem: model.stem,\n    choices: model.choices,\n    authoring: {\n      version: 2,\n      parts: model.authoring.parts,\n      transformations: model.authoring.transformations,\n      previewText: model.authoring.previewText,\n      targeted: [],\n    },\n  };\n\n  if (!getResponses(newModel).find((r) => r.rule === matchRule('.*'))) {\n    newModel.authoring.parts[0].responses = [\n      getCorrectResponse(newModel, DEFAULT_PART_ID),\n      Responses.catchAll(),\n    ];\n  }\n\n  return newModel;\n};\n"]}