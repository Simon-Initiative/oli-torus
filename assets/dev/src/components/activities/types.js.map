{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/components/activities/types.ts"],"names":[],"mappings":"AAIA,OAAO,IAAI,MAAM,YAAY,CAAC;AAE9B,OAAO,EAAE,MAAM,EAAE,MAAM,6CAA6C,CAAC;AAiBrE,MAAM,UAAU,YAAY,CAAC,WAAmB,EAAE,UAA2B;IAC3E,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,WAAW;QACX,UAAU;KACX,CAAC;AACJ,CAAC;AAeD,MAAM,UAAU,WAAW,CAAC,IAAY,EAAE,EAAW;IACnD,OAAO;QACL,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;QACpB,OAAO,EAAE;YACP,MAAM,CAAC;gBACL,IAAI,EAAE,GAAG;gBACT,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;gBACpB,EAAE,EAAE,IAAI,EAAE;aACX,CAAC;SACH;KACF,CAAC;AACJ,CAAC;AAqED,MAAM,CAAC,MAAM,UAAU,GAA0C,WAAW,CAAC;AAU7E,MAAM,CAAC,MAAM,QAAQ,GAA2B,WAAW,CAAC;AAG5D,MAAM,CAAC,MAAM,QAAQ,GAA2B,WAAW,CAAC;AAE5D,MAAM,CAAC,MAAM,YAAY,GAA+B,WAAW,CAAC;AAWpE,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAY,EAAE,SAAoB,EAAkB,EAAE,CAAC,CAAC;IACzF,EAAE,EAAE,IAAI,EAAE;IACV,IAAI;IACJ,SAAS;CACV,CAAC,CAAC;AASH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,KAAa,EAAE,IAAI,GAAG,EAAE,EAAY,EAAE,CAAC,CAAC;IACjF,EAAE,EAAE,IAAI,EAAE;IACV,IAAI;IACJ,KAAK;IACL,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC;CAC7B,CAAC,CAAC;AA8DH,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,SAAqB;AACrB,6EAA6E;AAC7E,qDAAqD;AACrD,KAAK,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,EAClD,EAAO,EACD,EAAE,CAAC,CAAC;IACV,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;IACpB,eAAe,EAAE,eAAe,CAAC,OAAO;IACxC,SAAS;IACT,KAAK;CACN,CAAC,CAAC;AAQH,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,sCAAqB,CAAA;IACrB,gCAAe,CAAA;IACf,8CAA6B,CAAA;AAC/B,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED,MAAM,CAAN,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,qCAAiB,CAAA;IACjB,yCAAqB,CAAA;IACrB,mCAAe,CAAA;AACjB,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;AAED,MAAM,CAAN,IAAY,SAEX;AAFD,WAAY,SAAS;IACnB,gCAAqB,CAAA;AACvB,CAAC,EAFW,SAAS,KAAT,SAAS,QAEpB;AAeD,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC","sourcesContent":["import { ModelElement } from 'data/content/model/elements/types';\nimport { ID, Identifiable } from 'data/content/model/other';\nimport { ResourceContext } from 'data/content/resource';\nimport { ResourceId } from 'data/types';\nimport guid from 'utils/guid';\nimport { PathOperation } from 'utils/pathOperations';\nimport { create } from '../../data/content/model/elements/factories';\n\nexport type PostUndoable = (undoable: Undoable) => void;\n\nexport type DeliveryMode = 'delivery' | 'review' | 'preview';\n\nexport type MediaItemRequest = {\n  type: 'MediaItemRequest';\n  mimeTypes: string[];\n};\n\nexport type Undoable = {\n  type: 'Undoable';\n  description: string;\n  operations: PathOperation[];\n};\n\nexport function makeUndoable(description: string, operations: PathOperation[]): Undoable {\n  return {\n    type: 'Undoable',\n    description,\n    operations,\n  };\n}\n\nexport type ChoiceId = ID;\nexport type PartId = ID;\nexport type ResponseId = ID;\n\nexport type RichText = ModelElement[];\n\nexport interface Success {\n  type: 'success';\n}\n\nexport interface HasContent {\n  content: RichText;\n}\nexport function makeContent(text: string, id?: string): { id: string; content: RichText } {\n  return {\n    id: id ? id : guid(),\n    content: [\n      create({\n        type: 'p',\n        children: [{ text }],\n        id: guid(),\n      }),\n    ],\n  };\n}\n\nexport interface StudentResponse {\n  input: any;\n}\n\nexport type ModeSpecification = {\n  element: string;\n  entry: string;\n};\n\nexport type PartResponse = {\n  attemptGuid: string;\n  response: StudentResponse;\n};\n\nexport type ClientEvaluation = {\n  attemptGuid: string;\n  score: number | null;\n  outOf: number | null;\n  response: any;\n  feedback: any;\n};\n\nexport type Manifest = {\n  id: ID;\n  friendlyName: string;\n  description: string;\n  delivery: ModeSpecification;\n  authoring: ModeSpecification;\n};\n\nexport interface ActivityModelSchema {\n  resourceId?: number;\n  authoring?: any;\n  content?: any;\n  activityType?: any;\n  id?: string; // maybe slug\n}\n\nexport interface PartState {\n  attemptGuid: string;\n  attemptNumber: number;\n  dateEvaluated: Date | null;\n  score: number | null;\n  outOf: number | null;\n  response: any;\n  feedback: Feedback | null;\n  hints: [];\n  partId: string | number;\n  hasMoreAttempts: boolean;\n  hasMoreHints: boolean;\n  error?: string;\n}\n\nexport interface ActivityState {\n  activityId?: ResourceId;\n  attemptGuid: string;\n  attemptNumber: number;\n  dateEvaluated: Date | null;\n  score: number | null;\n  outOf: number | null;\n  parts: PartState[];\n  hasMoreAttempts: boolean;\n  hasMoreHints: boolean;\n  snapshot?: any;\n}\n\nexport interface Choice extends Identifiable, HasContent {}\nexport const makeChoice: (text: string, id?: string) => Choice = makeContent;\nexport interface HasChoices {\n  choices: Choice[];\n}\n\nexport interface Stem extends Identifiable, HasContent {}\nexport interface HasStem {\n  stem: Stem;\n}\nexport type HasStems = { stems: Stem[] };\nexport const makeStem: (text: string) => Stem = makeContent;\nexport interface Hint extends Identifiable, HasContent {}\nexport type HasHints = HasParts;\nexport const makeHint: (text: string) => Hint = makeContent;\nexport interface Feedback extends Identifiable, HasContent {}\nexport const makeFeedback: (text: string) => Feedback = makeContent;\nexport interface Transformation extends Identifiable {\n  path: string;\n  operation: Transform;\n}\nexport interface HasTransformations {\n  authoring: {\n    transformations: Transformation[];\n  };\n}\n\nexport const makeTransformation = (path: string, operation: Transform): Transformation => ({\n  id: guid(),\n  path,\n  operation,\n});\n\nexport interface Response extends Identifiable {\n  // see `parser.ex` and `rule.ex`\n  rule: string;\n  // `score >= 0` indicates the feedback corresponds to a correct choice\n  score: number;\n  feedback: Feedback;\n}\nexport const makeResponse = (rule: string, score: number, text = ''): Response => ({\n  id: guid(),\n  rule,\n  score,\n  feedback: makeFeedback(text),\n});\n\nexport interface ConditionalOutcome extends Identifiable {\n  // eslint-disable-next-line\n  rule: Object;\n  actions: ActionDesc[];\n}\n\nexport interface IsAction {\n  attempt_guid: string;\n  error?: string;\n}\n\nexport type Action = NavigationAction | FeedbackAction | StateUpdateAction;\nexport type ActionDesc = NavigationActionDesc | FeedbackActionDesc | StateUpdateActionDesc;\n\nexport interface FeedbackActionCore {\n  score: number;\n  feedback: Feedback;\n}\n\nexport interface NavigationActionCore {\n  to: string;\n}\n\nexport interface StateUpdateActionCore {\n  // eslint-disable-next-line\n  update: Object;\n}\n\nexport interface NavigationActionDesc extends Identifiable, NavigationActionCore {\n  type: 'NavigationActionDesc';\n}\n\nexport interface NavigationAction extends NavigationActionCore, IsAction {\n  type: 'NavigationAction';\n}\n\nexport interface FeedbackActionDesc extends Identifiable, FeedbackActionCore {\n  type: 'FeedbackActionDesc';\n}\n\nexport interface FeedbackAction extends FeedbackActionCore, IsAction {\n  type: 'FeedbackAction';\n  out_of: number;\n}\n\nexport interface StateUpdateActionDesc extends Identifiable, StateUpdateActionCore {\n  type: 'StateUpdateActionDesc';\n}\n\nexport interface StateUpdateAction extends StateUpdateActionCore, IsAction {\n  type: 'StateUpdateAction';\n}\n\nexport interface Part extends Identifiable {\n  responses: Response[];\n  outcomes?: ConditionalOutcome[];\n  hints: Hint[];\n  scoringStrategy: ScoringStrategy;\n}\n\nexport const makePart = (\n  responses: Response[],\n  // By default, parts have 3 hints (deer in headlights, cognitive, bottom out)\n  // Multiinput activity parts start with just one hint\n  hints = [makeHint(''), makeHint(''), makeHint('')],\n  id?: ID,\n): Part => ({\n  id: id ? id : guid(),\n  scoringStrategy: ScoringStrategy.average,\n  responses,\n  hints,\n});\n\nexport interface HasParts {\n  authoring: {\n    parts: Part[];\n  };\n}\n\nexport enum ScoringStrategy {\n  'average' = 'average',\n  'best' = 'best',\n  'most_recent' = 'most_recent',\n}\n\nexport enum EvaluationStrategy {\n  'regex' = 'regex',\n  'numeric' = 'numeric',\n  'none' = 'none',\n}\n\nexport enum Transform {\n  'shuffle' = 'shuffle',\n}\n\nexport interface CreationContext extends ResourceContext {}\n\nexport interface PartComponentDefinition {\n  id: string;\n  type: string;\n  custom: Record<string, any>;\n}\n\nexport interface HasPreviewText {\n  authoring: {\n    previewText: string;\n  };\n}\nexport const makePreviewText = () => '';\n\nexport type ChoiceIdsToResponseId = [ChoiceId[], ResponseId];\n"]}