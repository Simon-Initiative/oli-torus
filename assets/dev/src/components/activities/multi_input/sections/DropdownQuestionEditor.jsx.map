{"version":3,"file":"DropdownQuestionEditor.jsx","sourceRoot":"","sources":["../../../../../../src/components/activities/multi_input/sections/DropdownQuestionEditor.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAE,OAAO,IAAI,gBAAgB,EAAE,MAAM,iEAAiE,CAAC;AAC9G,OAAO,EAAE,iBAAiB,EAAE,MAAM,2CAA2C,CAAC;AAE9E,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,KAAK,MAAM,OAAO,CAAC;AAK1B,MAAM,CAAC,MAAM,sBAAsB,GAAoB,CAAC,KAAK,EAAE,EAAE;IAC/D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,0BAA0B,EAAoB,CAAC;IAE3E,OAAO,CACL,EACE;MAAA,CAAC,gBAAgB,CACf,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CACvC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAC9E,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACpF,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CACzF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CACnE,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAC/E,UAAU,EAEd;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useAuthoringElementContext } from 'components/activities/AuthoringElement';\nimport { Choices as ChoicesAuthoring } from 'components/activities/common/choices/authoring/ChoicesAuthoring';\nimport { MultiInputActions } from 'components/activities/multi_input/actions';\nimport { Dropdown, MultiInputSchema } from 'components/activities/multi_input/schema';\nimport { makeChoice } from 'components/activities/types';\nimport { Choices } from 'data/activities/model/choices';\nimport React from 'react';\n\ninterface Props {\n  input: Dropdown;\n}\nexport const DropdownQuestionEditor: React.FC<Props> = (props) => {\n  const { model, dispatch } = useAuthoringElementContext<MultiInputSchema>();\n\n  return (\n    <>\n      <ChoicesAuthoring\n        icon={(_c, i) => <span>{i + 1}.</span>}\n        choices={model.choices.filter(({ id }) => props.input.choiceIds.includes(id))}\n        addOne={() => dispatch(MultiInputActions.addChoice(props.input.id, makeChoice('')))}\n        setAll={(choices) => dispatch(MultiInputActions.reorderChoices(props.input.id, choices))}\n        onEdit={(id, content) => dispatch(Choices.setContent(id, content))}\n        onRemove={(id) => dispatch(MultiInputActions.removeChoice(props.input.id, id))}\n        simpleText\n      />\n    </>\n  );\n};\n"]}