{"version":3,"file":"MultiInputStem.jsx","sourceRoot":"","sources":["../../../../../../src/components/activities/multi_input/sections/MultiInputStem.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAE,iBAAiB,EAAE,MAAM,2CAA2C,CAAC;AAE9E,OAAO,EAAE,eAAe,EAAE,MAAM,4DAA4D,CAAC;AAC7F,OAAO,EAAE,uBAAuB,EAAE,MAAM,mCAAmC,CAAC;AAE5E,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAE3D,OAAO,KAAK,MAAM,OAAO,CAAC;AAS1B,MAAM,CAAC,MAAM,cAAc,GAAoB,CAAC,KAAK,EAAE,EAAE;IACvD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,0BAA0B,EAAoB,CAAC;IAExF,MAAM,cAAc,GAAmB;QACrC,WAAW;QACX,eAAe,EAAE;YACf,YAAY,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAC9E,MAAM,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACnD,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,mBAAmB,EAAE,KAAK,CAAC,mBAAmB;SAC/C;KACF,CAAC;IAEF,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAC/B;MAAA,CAAC,uBAAuB,CACtB,iBAAiB,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAChD,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAC1B,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE;YACtC,QAAQ,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;YAChF,IAAI,eAAe,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvD,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CACF,WAAW,CAAC,aAAa,CACzB,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,KAAK,CAAC,CAAC,EAAE,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAElC;QAAA,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,EAC9C;MAAA,EAAE,uBAAuB,CAC3B;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useAuthoringElementContext } from 'components/activities/AuthoringElement';\nimport { MultiInputActions } from 'components/activities/multi_input/actions';\nimport { MultiInputSchema } from 'components/activities/multi_input/schema';\nimport { InputRefToolbar } from 'components/activities/multi_input/sections/InputRefToolbar';\nimport { RichTextEditorConnected } from 'components/content/RichTextEditor';\nimport { CommandContext } from 'components/editing/commands/interfaces';\nimport { elementsRemoved } from 'components/editing/utils';\nimport { InputRef } from 'data/content/model/elements/types';\nimport React from 'react';\nimport { Editor } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\ninterface Props {\n  selectedInputRef: InputRef | undefined;\n  setSelectedInputRef: React.Dispatch<React.SetStateAction<InputRef | undefined>>;\n  setEditor: React.Dispatch<React.SetStateAction<(ReactEditor & Editor) | undefined>>;\n}\nexport const MultiInputStem: React.FC<Props> = (props) => {\n  const { model, dispatch, projectSlug } = useAuthoringElementContext<MultiInputSchema>();\n\n  const commandContext: CommandContext = {\n    projectSlug,\n    inputRefContext: {\n      setInputType: (id, type) => dispatch(MultiInputActions.setInputType(id, type)),\n      inputs: new Map(model.inputs.map((v) => [v.id, v])),\n      selectedInputRef: props.selectedInputRef,\n      setSelectedInputRef: props.setSelectedInputRef,\n    },\n  };\n\n  return (\n    <div className=\"flex-grow-1 mb-3\">\n      <RichTextEditorConnected\n        normalizerContext={{ whitelist: ['input_ref'] }}\n        value={model.stem.content}\n        onEdit={(content, editor, operations) => {\n          dispatch(MultiInputActions.editStemAndPreviewText(content, editor, operations));\n          if (elementsRemoved(operations, 'input_ref').length > 0) {\n            props.setSelectedInputRef(undefined);\n          }\n        }}\n        placeholder=\"Question...\"\n        commandContext={commandContext}\n        style={{ borderTopLeftRadius: 0 }}\n      >\n        <InputRefToolbar setEditor={props.setEditor} />\n      </RichTextEditorConnected>\n    </div>\n  );\n};\n"]}