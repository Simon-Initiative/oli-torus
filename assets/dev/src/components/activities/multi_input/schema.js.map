{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../src/components/activities/multi_input/schema.ts"],"names":[],"mappings":"AAWA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAkB3C,MAAM,CAAC,MAAM,eAAe,GAAqB,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAEjF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAoB,EAAU,EAAE,CACrE,KAAK,CAAC,KAAK,CACT;IACE,QAAQ,EAAE,UAAU;IACpB,OAAO,EAAE,QAAQ;IACjB,IAAI,EAAE,MAAM;CACb,CAAC,IAAI,CAAC,CACR,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC","sourcesContent":["import { SelectOption } from 'components/activities/common/authoring/InputTypeDropdown';\nimport {\n  Stem,\n  ActivityModelSchema,\n  ChoiceIdsToResponseId,\n  Part,\n  Transformation,\n  Choice,\n  ChoiceId,\n} from 'components/activities/types';\nimport { Identifiable } from 'data/content/model/other';\nimport { Maybe } from 'tsmonad';\nimport { assertNever } from 'utils/common';\n\nexport type MultiInput = Dropdown | FillInTheBlank;\nexport type MultiInputDelivery =\n  | { id: string; inputType: 'dropdown'; options: SelectOption[] }\n  | { id: string; inputType: 'text' | 'numeric' };\n\nexport interface Dropdown extends Identifiable {\n  inputType: 'dropdown';\n  partId: string;\n  choiceIds: ChoiceId[];\n}\nexport interface FillInTheBlank extends Identifiable {\n  inputType: 'text' | 'numeric';\n  partId: string;\n}\n\nexport type MultiInputType = 'dropdown' | 'text' | 'numeric';\nexport const multiInputTypes: MultiInputType[] = ['dropdown', 'text', 'numeric'];\n\nexport const multiInputTypeFriendly = (type: MultiInputType): string =>\n  Maybe.maybe(\n    {\n      dropdown: 'Dropdown',\n      numeric: 'Number',\n      text: 'Text',\n    }[type],\n  ).valueOr(assertNever(type));\n\nexport interface MultiInputSchema extends ActivityModelSchema {\n  stem: Stem;\n  // This is a separated out rather than putting a dropdown's choices under\n  // its item in the `inputs` array because the backend transformation logic\n  // take a string key to shuffle, and doesn't allow for predicate logic.\n  choices: Choice[];\n  // The actual student-answerable inputs, designated by their type\n  inputs: MultiInput[];\n  authoring: {\n    targeted: ChoiceIdsToResponseId[];\n    parts: Part[];\n    transformations: Transformation[];\n    previewText: string;\n  };\n}\n"]}