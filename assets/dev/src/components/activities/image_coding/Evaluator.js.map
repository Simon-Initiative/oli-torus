{"version":3,"file":"Evaluator.js","sourceRoot":"","sources":["../../../../../src/components/activities/image_coding/Evaluator.ts"],"names":[],"mappings":"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","sourcesContent":["export type EvalContext = {\n  getResource: (name: string) => HTMLImageElement | string | null;\n  getCanvas: (n: number) => HTMLCanvasElement | null;\n  // getTempCanvas: () => HTMLCanvasElement | null;\n  getResult: (solution: boolean) => HTMLCanvasElement | null;\n  appendOutput: (s: string) => void;\n  solutionRun: boolean;\n};\n\ndeclare global {\n  interface Window {\n    // eslint-disable-next-line\n    SimpleImage: Function;\n    // eslint-disable-next-line\n    SimpleTable: Function;\n    print: () => void;\n    // eslint-disable-next-line\n    Evaluator: Function;\n  }\n}\n\nexport class Evaluator {\n  static printOne(something: any, ctx: EvalContext) {\n    // special case for rendering result image\n    if (something instanceof SimpleImageImpl) {\n      const canvas = ctx.getResult(ctx.solutionRun);\n      if (canvas) {\n        something.drawTo(canvas);\n      }\n      return;\n    }\n\n    let toPrint = something;\n\n    // If there's a .getString() function, use it (Row SimplePixel Histogram)\n    // This spares us from depending on instanceof/classname.\n    if (something.getString) {\n      toPrint = something.getString();\n    }\n\n    // hack: make array look like string\n    if (something instanceof Array) {\n      toPrint = '[' + something.join(', ') + ']';\n    }\n\n    ctx.appendOutput(toPrint);\n  }\n\n  static myprint(ctx: EvalContext, ...args: any): void {\n    for (let i = 0; i < args.length; i += 1) {\n      // add space between arguments\n      if (i > 0) {\n        this.printOne(' ', ctx);\n      }\n      this.printOne(args[i], ctx);\n    }\n\n    const lastArg = args[args.length - 1];\n    const hasBreak = lastArg instanceof SimpleImageImpl;\n    if (!hasBreak) {\n      this.printOne('\\n', ctx);\n    }\n  }\n\n  // -- special for-loop syntax --//\n\n  // Given code, return sugared up code, or may throw error.\n  // expands: for (part: composite) {\n  static sugarCode(code: string) {\n    const reWeak = /for *\\([ \\w+().-]*:[ \\w+().-]*\\) *\\{/g;\n    // important: the g is required to avoid infinite loop\n    // weak: for ( stuff* : stuff*) {\n    // weak not allowing newline etc., or the * goes too far\n    const reStrong = /for\\s*\\(\\s*(?:var\\s+)?(\\w+)\\s*:\\s*(\\w+(\\(.*?\\))?)\\s*\\)\\s*\\{/;\n    // strong: for([var ]x : y|foo(.*?) ) {\n\n    // Find all occurences of weak, check that each is also strong.\n    // e.g. \"for (x: 1 +1) {\" should throw this error\n    let result;\n    while ((result = reWeak.exec(code)) !== null) {\n      // have result[0] result.index, reWeak.lastIndex\n      const matched = result[0];\n      // alert(matched);\n      if (matched.search(reStrong) === -1) {\n        throw new Error(\n          \"Attempt to use 'for(part: composite)' form, but it looks wrong: \" + result[0],\n        );\n      }\n    }\n\n    // Loop, finding the next\n    let newCode = code;\n    let gensym = 0;\n\n    // eslint-disable-next-line\n    while (1) {\n      const oldCode = newCode;\n      const pvar = 'pxyz' + gensym;\n      const ivar = 'ixyz' + gensym;\n      gensym += 1;\n      const replacement =\n        'var ' +\n        pvar +\n        ' = Evaluator.getArray($2); ' +\n        'for (var ' +\n        ivar +\n        '=0; ' +\n        ivar +\n        '<' +\n        pvar +\n        '.length; ' +\n        ivar +\n        '++) {' +\n        'var $1 = ' +\n        pvar +\n        '[' +\n        ivar +\n        '];';\n      newCode = newCode.replace(reStrong, replacement);\n      if (newCode === oldCode) {\n        break;\n      }\n    }\n    return newCode;\n    // return code.replace(reStrong, replacement);\n\n    // someday: could look for reWeak, compare to where reStrong applied,\n    // see if there is a case where they are trying but failing to use the for(part) form.\n    // Or an easy to implement form would be to look for \"for (a b c)\" or whatever\n    // where the lexemes look wrong, and flag it before the sugaring even happens.\n    // var reWeak = /for\\s*\\((.*?)\\)\\s*\\{/;\n    // while ((result = reWeak.exec(code)) !== null) {\n    // have result[0] result.index, reWeak.lastIndex\n  }\n\n  // Wrapper called on the composite by the for(part: composite) sugar, and it does\n  // some basic error checking.\n  static getArray(obj: any) {\n    if (obj && typeof obj === 'object') {\n      if (obj instanceof Array) {\n        return obj;\n      }\n      if ('toArray' in obj) {\n        return obj.toArray();\n      }\n    } else {\n      throw new Error(\"'for (part: composite)' used, but composite is wrong.\");\n    }\n  }\n\n  // Called from user-facing functions, checks number of arguments.\n  static funCheck(funName: string, expectedLen: number, actualLen: number) {\n    if (expectedLen !== actualLen) {\n      const s1 = actualLen === 1 ? '' : 's'; // pluralize correctly\n      const s2 = expectedLen === 1 ? '' : 's';\n      const message =\n        funName +\n        '() called with ' +\n        actualLen +\n        ' value' +\n        s1 +\n        ', but expected ' +\n        expectedLen +\n        ' value' +\n        s2 +\n        '.';\n      // someday: think about \"values\" vs. \"arguments\" here\n      throw new Error(message);\n    }\n  }\n\n  static execute(src: string, ctx: EvalContext): Error | null {\n    // set up environment for calls by user code\n    const print = (...args: any) => {\n      Evaluator.myprint(ctx, ...args);\n    };\n\n    class SimpleImage extends SimpleImageImpl {\n      constructor(name: string) {\n        super(name, ctx);\n      }\n    }\n\n    class SimpleTable extends SimpleTableImpl {\n      constructor(name: string) {\n        super(name, ctx);\n      }\n    }\n\n    // install these into global scope for access by user code\n    window.SimpleImage = SimpleImage;\n    window.SimpleTable = SimpleTable;\n    window.print = print;\n    window.Evaluator = Evaluator;\n\n    try {\n      const code = Evaluator.sugarCode(src);\n\n      // Use Function to execute in global scope. Note user vars persist.\n      Function(code)();\n    } catch (e) {\n      e.userError = true;\n      return e;\n    }\n\n    return null;\n  }\n\n  // Computes and returns the image diff, or 999 for error.\n  // todo: structure error cases better.\n  static getResultDiff = function (ctx: EvalContext) {\n    const studentCanvas = ctx.getResult(false);\n    if (!studentCanvas) throw new Error('Failed to get student result image');\n\n    // width = 0 => student run failed or they didn't run at all. Can't getImageData\n    // this is possible, not a system error.\n    if (studentCanvas.width === 0) {\n      return 999;\n    }\n\n    const solnCanvas = ctx.getResult(true);\n    if (!solnCanvas || solnCanvas.width === 0) {\n      throw new Error('Failed to get solution image');\n    }\n\n    let studentData = new Uint8ClampedArray();\n    let context = studentCanvas.getContext('2d');\n    if (context) {\n      studentData = context.getImageData(0, 0, studentCanvas.width, studentCanvas.height).data;\n    }\n\n    let solnData = new Uint8ClampedArray();\n    context = solnCanvas.getContext('2d');\n    if (context) {\n      solnData = context.getImageData(0, 0, solnCanvas.width, solnCanvas.height).data;\n    }\n\n    let diff = 999; // default if imageDiff throws size mismatch error\n    try {\n      diff = Evaluator.imageDiff(studentData, solnData);\n    } finally {\n      // eslint-disable-next-line\n      return diff;\n    }\n  };\n\n  // Given the student and ans data arrays, compute per-pixel diff number.\n  static imageDiff = function (studentData: Uint8ClampedArray, ansData: Uint8ClampedArray) {\n    if (studentData.length === 0) {\n      throw 'Could not get student image data';\n    }\n    if (ansData.length === 0) {\n      throw 'Could not get solution image data';\n    }\n    if (studentData.length !== ansData.length) {\n      throw \"image array lengths don't match \" + studentData.length + ' ' + ansData.length;\n    }\n\n    let diff = 0;\n    for (let i = 0; i < studentData.length; i += 4) {\n      diff += Math.abs(studentData[i] - ansData[i]); // R\n      diff += Math.abs(studentData[i + 1] - ansData[i + 1]); // G\n      diff += Math.abs(studentData[i + 2] - ansData[i + 2]); // B\n    }\n    diff = diff / (studentData.length / 4.0); // error-per-pixel\n\n    return diff;\n  };\n}\n\n// -- SimpleImage support -- //\n\n// References one pixel in a SimpleImage, supports rgb get/set.\nexport class SimplePixel {\n  simpleImage: SimpleImageImpl;\n  x: number;\n  y: number;\n\n  constructor(simpleImage: SimpleImageImpl, x: number, y: number) {\n    this.simpleImage = simpleImage;\n    this.x = x;\n    this.y = y;\n  }\n\n  getRed = function () {\n    Evaluator.funCheck('getRed', 0, arguments.length);\n    return this.simpleImage.getRed(this.x, this.y);\n  };\n  setRed = function (val: number) {\n    Evaluator.funCheck('setRed', 1, arguments.length);\n    this.simpleImage.setRed(this.x, this.y, val);\n  };\n  getGreen = function () {\n    Evaluator.funCheck('getGreen', 0, arguments.length);\n    return this.simpleImage.getGreen(this.x, this.y);\n  };\n  setGreen = function (val: number) {\n    Evaluator.funCheck('setGreen', 1, arguments.length);\n    this.simpleImage.setGreen(this.x, this.y, val);\n  };\n  getBlue = function () {\n    Evaluator.funCheck('getBlue', 0, arguments.length);\n    return this.simpleImage.getBlue(this.x, this.y);\n  };\n  setBlue = function (val: number) {\n    Evaluator.funCheck('setBlue', 1, arguments.length);\n    this.simpleImage.setBlue(this.x, this.y, val);\n  };\n\n  getX = function () {\n    Evaluator.funCheck('getX', 0, arguments.length);\n    return this.x;\n  };\n  getY = function () {\n    Evaluator.funCheck('getY', 0, arguments.length);\n    return this.y;\n  };\n\n  // copy values from source pixel\n  setPixel = function (pixel: SimplePixel) {\n    this.setRed(pixel.getRed());\n    this.setGreen(pixel.getGreen());\n    this.setBlue(pixel.getBlue());\n  };\n\n  // Render pixel as string -- print() uses this\n  getString = function () {\n    return 'r:' + this.getRed() + ' g:' + this.getGreen() + ' b:' + this.getBlue();\n  };\n}\n\n// Relies on invisible canvas, inited either with a \"foo.jpg\" url,\n// or an htmlImage from loadImage().\nexport class SimpleImageImpl {\n  width: number;\n  height: number;\n  zoom: number;\n  imageData: ImageData;\n  ctx: EvalContext;\n\n  constructor(imageName: string, ctx: EvalContext) {\n    let htmlImage = null;\n    if (typeof imageName === 'string') {\n      htmlImage = ctx.getResource(imageName) as HTMLImageElement;\n    } else {\n      throw new Error('new SimpleImage(...) requires an image name.');\n    }\n\n    if (!htmlImage) {\n      throw new Error('Image not found: ' + imageName);\n    }\n    if (!htmlImage.complete) {\n      throw new Error('Image still loading -- wait a bit and retry');\n    }\n\n    this.width = htmlImage.width;\n    this.height = htmlImage.height;\n    this.ctx = ctx;\n\n    // render to temp canvas to get image data\n    const canvas = ctx.getCanvas(0);\n    if (!canvas) throw new Error('Failed to get canvas for ' + name);\n    const context = canvas.getContext('2d');\n    if (!context) throw new Error('getContext failed for ' + name);\n\n    context.canvas.width = this.width;\n    context.canvas.height = this.height;\n    context.drawImage(htmlImage, 0, 0);\n\n    // Do this last so it gets the actual image data.\n    this.imageData = context.getImageData(0, 0, this.width, this.height);\n  }\n\n  getWidth = function () {\n    return this.width;\n  };\n\n  getHeight = function () {\n    return this.height;\n  };\n\n  // Computes index into 1-d array, and checks correctness of x,y values\n  getIndex = function (x: number, y: number) {\n    if (x === null || y === null) {\n      throw new Error('need x and y values passed to this function');\n    } else if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      throw new Error('x/y out of bounds x:' + x + ' y:' + y);\n    } else return (x + y * this.width) * 4;\n  };\n\n  // --setters--\n\n  // Clamp values to be in the range 0..255. Used by setRed() et al.\n  clamp = function (value: number) {\n    // value = Math.floor(value);  // .js is always float, so this line\n    // is probably unncessary, unless we get into some deep JIT level.\n    if (value < 0) return 0;\n    if (value > 255) {\n      return 255;\n    }\n    return value;\n  };\n\n  // Sets the red value for the given x,y\n  setRed = function (x: number, y: number, value: number) {\n    Evaluator.funCheck('setRed', 3, arguments.length);\n    const index = this.getIndex(x, y);\n    this.imageData.data[index] = this.clamp(value);\n\n    // This is how you would write back each pixel individually.\n    // It gives terrible performance (on Firefox anyway).\n    // this.context.putImageData(this.imageData, 0, 0, x, y, 1, 1);\n    // dx dy dirtyX dirtyY dirtyWidth dirtyHeight\n  };\n\n  // Sets the green value for the given x,y\n  setGreen = function (x: number, y: number, value: number) {\n    Evaluator.funCheck('setGreen', 3, arguments.length);\n    const index = this.getIndex(x, y);\n    this.imageData.data[index + 1] = this.clamp(value);\n  };\n\n  // Sets the blue value for the given x,y\n  setBlue = function (x: number, y: number, value: number) {\n    Evaluator.funCheck('setBlue', 3, arguments.length);\n    const index = this.getIndex(x, y);\n    this.imageData.data[index + 2] = this.clamp(value);\n  };\n\n  // Sets the alpha value for the given x,y\n  setAlpha = function (x: number, y: number, value: number) {\n    Evaluator.funCheck('setAlpha', 3, arguments.length);\n    const index = this.getIndex(x, y);\n    this.imageData.data[index + 3] = this.clamp(value);\n  };\n\n  setZoom = function (n: number) {\n    this.zoom = n;\n  };\n\n  getRed = function (x: number, y: number) {\n    Evaluator.funCheck('getRed', 2, arguments.length);\n    const index = this.getIndex(x, y);\n    return this.imageData.data[index];\n  };\n\n  getGreen = function (x: number, y: number) {\n    Evaluator.funCheck('getGreen', 2, arguments.length);\n    const index = this.getIndex(x, y);\n    return this.imageData.data[index + 1];\n  };\n\n  getBlue = function (x: number, y: number) {\n    Evaluator.funCheck('getBlue', 2, arguments.length);\n    const index = this.getIndex(x, y);\n    return this.imageData.data[index + 2];\n  };\n\n  getAlpha = function (x: number, y: number) {\n    Evaluator.funCheck('getAlpha', 2, arguments.length);\n    const index = this.getIndex(x, y);\n    return this.imageData.data[index + 3];\n  };\n\n  // Gets the pixel object for this x,y. Changes to the\n  // pixel write back to the image.\n  getPixel = function (x: number, y: number) {\n    Evaluator.funCheck('getPixel', 2, arguments.length);\n    return new SimplePixel(this, x, y);\n  };\n\n  // Export an image as an array of pixel refs for the for-loop.\n  toArray = function () {\n    const array = [];\n    // 1. simple-way (this is as good or faster in various browser tests)\n    // var array = new Array(this.getWidth() * this.getHeight()); // 2. alloc way\n    // var i = 0;  // 2.\n    // nip 2012-7  .. change to cache-friendly y/x ordering\n    // Non-firefox browsers may benefit.\n    for (let y = 0; y < this.getHeight(); y += 1) {\n      for (let x = 0; x < this.getWidth(); x += 1) {\n        // array[i += 1] = new SimplePixel(this, x, y);  // 2.\n        array.push(new SimplePixel(this, x, y)); // 1.\n      }\n    }\n    return array;\n  };\n\n  // Change the size of the image to the given, scaling the pixels.\n  setSize = function (newWidth: number, newHeight: number) {\n    // flush any changes from buffer to a temp canvas to be used as src\n    const srcCanvas = this.ctx.getCanvas(0);\n    srcCanvas.width = this.width;\n    srcCanvas.height = this.height;\n\n    const srcContext = srcCanvas.getContext('2d');\n    srcContext.putImageData(this.imageData, 0, 0);\n\n    // get second temp canvas of new size\n    const dstCanvas = this.ctx.getCanvas(1);\n    dstCanvas.width = newWidth;\n    dstCanvas.height = newHeight;\n\n    // scale by canvas-to-canvas drawing to get image smoothing\n    const dstContext = dstCanvas.getContext('2d');\n    dstContext.drawImage(srcCanvas, 0, 0, dstCanvas.width, dstCanvas.height);\n\n    // reload this image's data from dst canvas\n    this.width = dstCanvas.width;\n    this.height = dstCanvas.height;\n    this.imageData = dstContext.getImageData(0, 0, dstCanvas.width, dstCanvas.height);\n  };\n\n  // Set this image to be the same size to the passed in image.\n  // This image may end up a little bigger than the passed image\n  // to keep its proportions.\n  // Useful to set a back image to match the size of the front\n  // image for bluescreen.\n  setSameSize = function (otherImage: SimpleImageImpl) {\n    if (!this.width) return;\n\n    const wscale = otherImage.width / this.width;\n    const hscale = otherImage.height / this.height;\n\n    const scale = Math.max(wscale, hscale);\n\n    if (scale !== 1) {\n      this.setSize(Math.floor(this.width * scale), Math.floor(this.height * scale));\n    }\n  };\n\n  // Draws to the given canvas, setting its size.\n  // Used to implement printing of an image.\n  drawTo = function (toCanvas: HTMLCanvasElement) {\n    if (!this.zoom) {\n      toCanvas.width = this.width;\n      toCanvas.height = this.height;\n    } else {\n      toCanvas.width = this.width * this.zoom;\n      toCanvas.height = this.height * this.zoom;\n    }\n\n    // AW: put bits from image's data cache without going via canvas\n    const toContext = toCanvas.getContext('2d');\n    if (toContext === null) throw new Error('Error getting drawing context');\n\n    // drawImage() takes either an htmlImg or a canvas\n    if (!this.zoom) {\n      toContext.putImageData(this.imageData, 0, 0);\n    } else {\n      // in effect we want this:\n      // toContext.drawImage(this.canvas, 0, 0, toCanvas.width, toCanvas.height);\n\n      // Manually scale/copy the pixels, to avoid the default smoothing effect.\n      // changed: createImageData apparently better than getImageData here.\n      const toData = toContext.createImageData(toCanvas.width, toCanvas.height);\n      for (let x = 0; x < toCanvas.width; x += 1) {\n        for (let y = 0; y < toCanvas.height; y += 1) {\n          const iNew = (x + y * toCanvas.width) * 4;\n          const iOld = (Math.floor(x / this.zoom) + Math.floor(y / this.zoom) * this.width) * 4;\n          for (let j = 0; j < 4; j += 1) {\n            toData.data[iNew + j] = this.imageData.data[iOld + j];\n          }\n        }\n      }\n      toContext.putImageData(toData, 0, 0);\n    }\n  };\n\n  /*\n  // debugging aid to show image data. Use on tiny test images only!\n  dump = function () {\n    for (let x = 0; x < this.width; x += 1) {\n      for (let y = 0; y < this.height; y += 1) {\n        const i =  (x + y * this.width) * 4;\n         console.log(x + ',' + y + ':' +\n          this.imageData.data[i] + ',' +\n          this.imageData.data[i + 1] + ',' +\n          this.imageData.data[i + 2]);\n      }\n    }\n  };\n  */\n}\n\n// Simple Table Support //\n\nexport class Row {\n  table: SimpleTableImpl;\n  array: string[];\n\n  constructor(table: SimpleTableImpl, rowArray: string[]) {\n    this.table = table;\n    this.array = rowArray;\n  }\n\n  // Returns the nth value from this row.\n  getColumn = function (n: number) {\n    // todo: could do bounds checking here to be more friendly\n    return this.array[n];\n  };\n\n  // Returns the value for the named field.\n  getField = function (fieldName: string) {\n    const index = this.table.getFieldIndex(fieldName);\n    if (index === -1) {\n      throw new Error('getField() unknown field name: ' + fieldName);\n    }\n    return this.array[index];\n  };\n\n  // Returns the raw array; used for printing.\n  getArray = function () {\n    return this.array;\n  };\n\n  getString = function () {\n    return this.array.join(', ');\n  };\n}\n\n// Creates a new table with the given file\nexport class SimpleTableImpl {\n  fields: string[];\n  rows: Row[];\n\n  constructor(filename: string, ctx: EvalContext) {\n    const text = ctx.getResource(filename) as string;\n\n    const lines = text.split(/\\n|\\r\\n/); // test: this does work with DOS line endings\n\n    // todo: could have some logic about if the first row is the field names or not\n    this.fields = SimpleTableImpl.splitCSV(lines[0], 0);\n    lines.splice(0, 1); // remove 0th element\n\n    const rows = [];\n    for (const line of lines) {\n      const parts = SimpleTableImpl.splitCSV(line, this.fields.length);\n      if (parts.length !== 0) {\n        // essentially we skip blank lines\n        rows.push(new Row(this, parts));\n      }\n    }\n    this.rows = rows;\n  }\n\n  // Given a text line, explode the CSV and return an array elements.\n  // Columns is the expected number of columns to fill out to, or 0 to ignore.\n  // Returns [] on empty string, as you might see with a blank line.\n  // The elements are whitespace trimmed.\n  // Can make this more sophisticated about CSV format later.\n  static splitCSV(line: string, columns: number) {\n    const trimmed = line.replace(/^\\s+|\\s+$/g, ''); // .trim() effectively, and below\n    if (trimmed === '') return [];\n\n    const fields = trimmed.split(/,/, -1).map((field) => field.replace(/^\\s+|\\s+$/g, ''));\n\n    // hack: file can omit blank data from RHS .. add it back on\n    while (columns && fields.length < columns) {\n      fields.push('');\n    }\n    return fields;\n  }\n\n  getColumnCount = function () {\n    return this.fields.length;\n  };\n\n  // Returns an array of the field names.\n  getFields = function () {\n    return this.fields;\n  };\n\n  // Limits the table to just n rows.\n  limitRows = function (n: number) {\n    this.rows.splice(n, this.rows.length - n);\n  };\n\n  // Returns the index for a field name (case sensitive).\n  // Used internally by row.getField()\n  getFieldIndex = function (fieldName: string) {\n    return this.fields.findIndex((f: string) => f === fieldName);\n  };\n\n  // Returns the number of rows.\n  getRowCount = function () {\n    return this.rows.length;\n  };\n\n  // Returns the nth row.\n  getRow = function (n: number) {\n    if (n < 0 || n >= this.rows.length) {\n      throw 'Count of rows is ' + this.rows.length + ', but attempting to get row:' + n;\n    }\n    return this.rows[n];\n  };\n\n  // toArray() adapter so for (part: composite) works.\n  // In this case, we just return the internal array of row objects.\n  toArray = function () {\n    return this.rows;\n  };\n}\n"]}