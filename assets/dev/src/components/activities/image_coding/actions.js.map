{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../../../../src/components/activities/image_coding/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageCodingModelSchema } from './schema';\nimport { RichText, Hint as HintType, makeHint } from '../types';\nimport { Maybe } from 'tsmonad';\nimport { Identifiable } from 'data/content/model/other';\nimport { PostUndoable, makeUndoable } from 'components/activities/types';\nimport { clone } from 'utils/common';\nimport { Operations } from 'utils/pathOperations';\nimport { toSimpleText } from 'components/editing/utils';\nimport { Descendant } from 'slate';\n\nexport class ICActions {\n  private static getById<T extends Identifiable>(slice: T[], id: string): Maybe<T> {\n    return Maybe.maybe(slice.find((c) => c.id === id));\n  }\n\n  private static getHint = (draftState: ImageCodingModelSchema, id: string) =>\n    ICActions.getById(draftState.authoring.parts[0].hints, id);\n\n  static editStem(content: RichText) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.stem.content = content;\n      const previewText = toSimpleText(content);\n      draftState.authoring.previewText = previewText;\n    };\n  }\n\n  static editStarterCode(text: string) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.starterCode = text;\n    };\n  }\n\n  static editSolutionCode(text: string) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.solutionCode = text;\n    };\n  }\n\n  static editIsExample(value: boolean) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.isExample = value;\n    };\n  }\n\n  static addResourceURL(value: string) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      if (draftState.resourceURLs.indexOf(value) === -1) {\n        draftState.resourceURLs.push(value);\n      }\n    };\n  }\n\n  static removeResourceURL(value: string) {\n    return (draftState: ImageCodingModelSchema, post: PostUndoable) => {\n      const index = draftState.resourceURLs.findIndex((url) => url === value);\n      const item = draftState.resourceURLs[index];\n      post(\n        makeUndoable('Removed a file', [Operations.insert('$.resourceURLs', clone(item), index)]),\n      );\n\n      draftState.resourceURLs = draftState.resourceURLs.filter((url) => url !== value);\n    };\n  }\n\n  static editTolerance(value: number) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.tolerance = value;\n    };\n  }\n\n  static editRegex(value: string) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.regex = value;\n    };\n  }\n\n  static editFeedback(score: number, content: Descendant[]) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      draftState.feedback[score].content = content;\n    };\n  }\n\n  static addCognitiveHint() {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      const newHint: HintType = makeHint('');\n      // new hints are always cognitive hints. they should be inserted\n      // right before the bottomOut hint at the end of the list\n      const bottomOutIndex = draftState.authoring.parts[0].hints.length - 1;\n      draftState.authoring.parts[0].hints.splice(bottomOutIndex, 0, newHint);\n    };\n  }\n\n  static editHint(id: string, content: RichText) {\n    return (draftState: ImageCodingModelSchema, _post: PostUndoable) => {\n      ICActions.getHint(draftState, id).lift((hint) => (hint.content = content));\n    };\n  }\n\n  static removeHint(id: string) {\n    return (draftState: ImageCodingModelSchema, post: PostUndoable) => {\n      const hint = draftState.authoring.parts[0].hints.find((h) => h.id === id);\n      const index = draftState.authoring.parts[0].hints.findIndex((h) => h.id === id);\n      post(\n        makeUndoable('Removed a hint', [\n          Operations.insert('$.authoring.parts[0].hints', clone(hint), index),\n        ]),\n      );\n\n      draftState.authoring.parts[0].hints = draftState.authoring.parts[0].hints.filter(\n        (h) => h.id !== id,\n      );\n    };\n  }\n}\n"]}