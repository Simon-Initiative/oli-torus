{"version":3,"file":"PartsLayoutRenderer.jsx","sourceRoot":"","sources":["../../../../../../../src/components/activities/adaptive/components/delivery/PartsLayoutRenderer.tsx"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,aAAa,MAAM,yBAAyB,CAAC;AAcpD,MAAM,cAAc,GAAG,GAAS,EAAE;IAChC,OAAO;QACL,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC,CAAA,CAAC;AAEF,MAAM,mBAAmB,GAAuC,CAAC,EAC/D,KAAK,EACL,KAAK,GAAG,EAAE,EACV,UAAU,GAAG,cAAc,EAC3B,WAAW,GAAG,cAAc,EAC5B,UAAU,GAAG,cAAc,EAC3B,YAAY,GAAG,cAAc,EAC7B,YAAY,GAAG,cAAc,EAC7B,aAAa,EACb,aAAa,GACd,EAAE,EAAE;IACH,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;IACnE,MAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;IAE/E,MAAM,YAAY,GAAG,CAAC,GAAG,kBAAkB,EAAE,GAAG,MAAM,CAAC,CAAC;IACxD,OAAO,CACL,CAAC,KAAK,CAAC,QAAQ,CACb;MAAA,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,cAAuC,EAAE,EAAE;YAC5D,MAAM,SAAS,GAAG;gBAChB,EAAE,EAAE,cAAc,CAAC,EAAE;gBACrB,IAAI,EAAE,cAAc,CAAC,IAAI;gBACzB,KAAK,EAAE,cAAc,CAAC,MAAM;gBAC5B,KAAK;gBACL,MAAM,EAAE,UAAU;gBAClB,OAAO,EAAE,WAAW;gBACpB,MAAM,EAAE,UAAU;gBAClB,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE,aAAa;aACzB,CAAC;YACF,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC,EAAG,CAAC;QAClE,CAAC,CAAC,CACJ;IAAA,EAAE,KAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import { ActivityState, PartComponentDefinition } from 'components/activities/types';\nimport React from 'react';\nimport PartComponent from '../common/PartComponent';\n\ninterface PartsLayoutRendererProps {\n  parts: PartComponentDefinition[];\n  state?: ActivityState;\n  onPartInit?: any;\n  onPartReady?: any;\n  onPartSave?: any;\n  onPartSubmit?: any;\n  onPartResize?: any;\n  onPartSetData?: (payload: any) => Promise<any>;\n  onPartGetData?: (payload: any) => Promise<any>;\n}\n\nconst defaultHandler = async () => {\n  return {\n    type: 'success',\n    snapshot: {},\n  };\n};\n\nconst PartsLayoutRenderer: React.FC<PartsLayoutRendererProps> = ({\n  parts,\n  state = {},\n  onPartInit = defaultHandler,\n  onPartReady = defaultHandler,\n  onPartSave = defaultHandler,\n  onPartSubmit = defaultHandler,\n  onPartResize = defaultHandler,\n  onPartSetData,\n  onPartGetData,\n}) => {\n  const popups = parts.filter((part) => part.type === 'janus-popup');\n  const partsWithoutPopups = parts.filter((part) => part.type !== 'janus-popup');\n\n  const updatedParts = [...partsWithoutPopups, ...popups];\n  return (\n    <React.Fragment>\n      {updatedParts.map((partDefinition: PartComponentDefinition) => {\n        const partProps = {\n          id: partDefinition.id,\n          type: partDefinition.type,\n          model: partDefinition.custom,\n          state,\n          onInit: onPartInit,\n          onReady: onPartReady,\n          onSave: onPartSave,\n          onSubmit: onPartSubmit,\n          onResize: onPartResize,\n          onSetData: onPartSetData,\n          onGetData: onPartGetData,\n        };\n        return <PartComponent key={partDefinition.id} {...partProps} />;\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default PartsLayoutRenderer;\n"]}