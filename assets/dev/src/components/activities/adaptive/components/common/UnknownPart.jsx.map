{"version":3,"file":"UnknownPart.jsx","sourceRoot":"","sources":["../../../../../../../src/components/activities/adaptive/components/common/UnknownPart.tsx"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,uCAAuC,CAAC;AAC7D,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,OAAO,KAAK,EAAE,EAAiB,SAAS,EAAE,MAAM,OAAO,CAAC;AAExD,MAAM,OAAO,GAAsC,CAAC,KAAK,EAAE,EAAE;IAC3D,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IACzC,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAExB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,MAAM,GAAkB;QAC5B;;mBAEW;QACX,KAAK;QACL,UAAU;QACV,MAAM,EAAE,CAAC;QACT,eAAe,EAAE,SAAS;QAC1B,QAAQ,EAAE,QAAQ;QAClB,UAAU,EAAE,MAAM;KACnB,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,qCAAqC;QACrC,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CACvD;MAAA,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC,CAClC;MAAA,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CACpB;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,mBAAmB,CAAC;AAE3C,oFAAoF;AACpF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;IAChC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE;QAClD,MAAM,EAAE,IAAI;QACZ,YAAY,oBAAO,YAAY,CAAE;QACjC,KAAK,EAAE;YACL,KAAK,EAAE;gBACL,IAAI,EAAE,IAAI;aACX;SACF;KACF,CAAC,CAAC;CACJ;AAED,eAAe,OAAO,CAAC","sourcesContent":["import register from 'components/parts/customElementWrapper';\nimport { customEvents } from 'components/parts/partsApi';\nimport { PartComponentProps } from 'components/parts/types/parts';\nimport React, { CSSProperties, useEffect } from 'react';\n\nconst Unknown: React.FC<PartComponentProps<any>> = (props) => {\n  console.log('UNKNOWN RENDER', { props });\n  const { model } = props;\n\n  const { x, y, z, width } = model;\n  const styles: CSSProperties = {\n    /* position: 'absolute',\n    top: y,\n    left: x, */\n    width,\n    // height,\n    zIndex: z,\n    backgroundColor: 'magenta',\n    overflow: 'hidden',\n    fontWeight: 'bold',\n  };\n\n  useEffect(() => {\n    // all activities *must* emit onReady\n    props.onReady({ id: `${props.id}` });\n  }, []);\n\n  return (\n    <div data-part_component-type={props.type} style={styles}>\n      <p>Unknown Part Component Type:</p>\n      <p>{props.type}</p>\n    </div>\n  );\n};\n\nexport const tagName = 'unknown-component';\n\n// only register once since this might be shared with another part component (popup)\nif (!customElements.get(tagName)) {\n  register(Unknown, tagName, ['id', 'type', 'model'], {\n    shadow: true,\n    customEvents: { ...customEvents },\n    attrs: {\n      model: {\n        json: true,\n      },\n    },\n  });\n}\n\nexport default Unknown;\n"]}