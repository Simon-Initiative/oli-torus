{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../../src/components/activities/adaptive/components/common/util.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,OAAO,MAAM,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAE9C,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,OAAY,EAAE,EAAE;IAC7C,MAAM,aAAa,GAA0B;QAC3C,eAAe,EAAE,aAAa;QAC9B,WAAW,EAAE,aAAa;QAC1B,WAAW,EAAE,MAAM;QACnB,WAAW,EAAE,CAAC;QACd,YAAY,EAAE,CAAC;KAChB,CAAC;IAEF,IAAI,OAAO,EAAE;QACX,IAAI,OAAO,CAAC,YAAY,EAAE;YACxB,aAAa,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;YACxD,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAChD,aAAa,CAAC,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3E,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAChD,aAAa,CAAC,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC9E;aAAM;YACL,aAAa,CAAC,WAAW,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1F,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC;YAC/B,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YACvE,IAAI,WAAW,GAAG,aAAa,CAAC;YAChC,IAAI,OAAO,CAAC,SAAU,IAAI,CAAC,EAAE;gBAC3B,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;qBACzC,KAAK,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;qBAC7B,GAAG,EAAE,CAAC;aACV;YACD,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;YAExC,IAAI,OAAO,GAAG,aAAa,CAAC;YAC5B,IAAI,OAAO,CAAC,SAAU,IAAI,CAAC,EAAE;gBAC3B,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;qBACrC,KAAK,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;qBAC7B,GAAG,EAAE,CAAC;aACV;YACD,aAAa,CAAC,eAAe,GAAG,OAAO,CAAC;SACzC;QAED,sBAAsB;QACtB,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC;KACnC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport chroma from 'chroma-js';\nimport { ColorPalette } from 'components/parts/types/parts';\nimport { parseNumString } from 'utils/common';\n\nexport const convertPalette = (palette: any) => {\n  const paletteStyles: Partial<ColorPalette> = {\n    backgroundColor: 'transparent',\n    borderColor: 'transparent',\n    borderStyle: 'none',\n    borderWidth: 0,\n    borderRadius: 0,\n  };\n\n  if (palette) {\n    if (palette.useHtmlProps) {\n      paletteStyles.backgroundColor = palette.backgroundColor;\n      paletteStyles.borderColor = palette.borderColor;\n      paletteStyles.borderWidth = parseNumString(palette.borderWidth.toString());\n      paletteStyles.borderStyle = palette.borderStyle;\n      paletteStyles.borderRadius = parseNumString(palette.borderRadius.toString());\n    } else {\n      paletteStyles.borderWidth = `${palette.lineThickness ? palette.lineThickness + 'px' : 0}`;\n      paletteStyles.borderRadius = 0;\n      paletteStyles.borderStyle = palette.lineStyle === 0 ? 'none' : 'solid';\n      let borderColor = 'transparent';\n      if (palette.lineColor! >= 0) {\n        borderColor = chroma(palette.lineColor || 0)\n          .alpha(palette.lineAlpha || 0)\n          .css();\n      }\n      paletteStyles.borderColor = borderColor;\n\n      let bgColor = 'transparent';\n      if (palette.fillColor! >= 0) {\n        bgColor = chroma(palette.fillColor || 0)\n          .alpha(palette.fillAlpha || 0)\n          .css();\n      }\n      paletteStyles.backgroundColor = bgColor;\n    }\n\n    // now it is converted\n    paletteStyles.useHtmlProps = true;\n  }\n\n  return paletteStyles;\n};\n"]}