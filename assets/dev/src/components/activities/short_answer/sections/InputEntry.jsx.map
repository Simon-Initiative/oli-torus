{"version":3,"file":"InputEntry.jsx","sourceRoot":"","sources":["../../../../../../src/components/activities/short_answer/sections/InputEntry.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,EACR,kBAAkB,EAClB,qBAAqB,GAEtB,MAAM,6BAA6B,CAAC;AAGrC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAE,MAAM,0DAA0D,CAAC;AACxF,OAAO,EAAE,SAAS,EAAE,MAAM,uDAAuD,CAAC;AAQlF,MAAM,CAAC,MAAM,UAAU,GAAyB,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,kBAAkB,EAAE,EAAE,EAAE;IAC9F,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAC/C,KAAK,EAAE,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC;QACxC,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC/C,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,CAAC,UAAwE,EAAE,EAAE;QAC9F,QAAQ,CAAC,UAAU,CAAC,CAAC;QACrB,kBAAkB,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG;QACb,KAAK,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;QAC1B,QAAQ,EAAE,UAAU;KACrB,CAAC;IAEF,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,OAAO,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,EAAG,CAAC;KACrC;IACD,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,EAAG,CAAC;AACnC,CAAC,CAAC","sourcesContent":["import {\n  makeRule,\n  parseInputFromRule,\n  parseOperatorFromRule,\n  RuleOperator,\n} from 'data/activities/model/rules';\nimport { InputType } from 'components/activities/short_answer/schema';\nimport { Response } from 'components/activities/types';\nimport { useState } from 'react';\nimport React from 'react';\nimport { NumericInput } from 'components/activities/short_answer/sections/NumericInput';\nimport { TextInput } from 'components/activities/short_answer/sections/TextInput';\n\ninterface InputProps {\n  inputType: InputType;\n  response: Response;\n  onEditResponseRule: (id: string, rule: string) => void;\n}\n\nexport const InputEntry: React.FC<InputProps> = ({ inputType, response, onEditResponseRule }) => {\n  const [{ operator, input }, setState] = useState({\n    input: parseInputFromRule(response.rule),\n    operator: parseOperatorFromRule(response.rule),\n  });\n\n  const onEditRule = (inputState: { input: string | [string, string]; operator: RuleOperator }) => {\n    setState(inputState);\n    onEditResponseRule(response.id, makeRule(inputState.operator, inputState.input));\n  };\n\n  const shared = {\n    state: { operator, input },\n    setState: onEditRule,\n  };\n\n  if (inputType === 'numeric') {\n    return <NumericInput {...shared} />;\n  }\n  return <TextInput {...shared} />;\n};\n"]}