{"version":3,"file":"TextInput.jsx","sourceRoot":"","sources":["../../../../../../src/components/activities/short_answer/sections/TextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAE,UAAU,EAAgB,MAAM,6BAA6B,CAAC;AACvE,OAAO,KAAK,MAAM,OAAO,CAAC;AAU1B,MAAM,CAAC,MAAM,SAAS,GAAyB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE;IACrE,MAAM,EAAE,QAAQ,EAAE,GAAG,0BAA0B,EAAE,CAAC;IAClD,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,yBAAyB,CACtC;MAAA,CAAC,MAAM,CACL,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CACpB,SAAS,CAAC,mBAAmB,CAC7B,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CACtB,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CACtB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YACd,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO;aACR;YAED,QAAQ,CAAC;gBACP,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK;gBACxB,KAAK,EAAE,KAAK,CAAC,KAAK;aACnB,CAAC,CAAC;QACL,CAAC,CAAC,CACF,IAAI,CAAC,eAAe,CAEpB;QAAA,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAC3B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC7C;YAAA,CAAC,MAAM,CAAC,YAAY,CACtB;UAAA,EAAE,MAAM,CAAC,CACV,CAAC,CACJ;MAAA,EAAE,MAAM,CACR;MAAA,CAAC,KAAK,CACJ,WAAW,CAAC,gBAAgB,CAC5B,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CACpB,IAAI,CAAC,MAAM,CACX,SAAS,CAAC,cAAc,CACxB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAC/E,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAEvB;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAA8C;IAC7D,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE;IAC/C,EAAE,KAAK,EAAE,aAAa,EAAE,YAAY,EAAE,iBAAiB,EAAE;IACzD,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE;CAC1C,CAAC","sourcesContent":["import { useAuthoringElementContext } from 'components/activities/AuthoringElement';\nimport { isOperator, RuleOperator } from 'data/activities/model/rules';\nimport React from 'react';\n\ninterface State {\n  operator: RuleOperator;\n  input: string | [string, string];\n}\ninterface InputProps {\n  setState: (s: State) => void;\n  state: State;\n}\nexport const TextInput: React.FC<InputProps> = ({ state, setState }) => {\n  const { editMode } = useAuthoringElementContext();\n  return (\n    <div className=\"d-flex flex-md-row mb-2\">\n      <select\n        disabled={!editMode}\n        className=\"form-control mr-2\"\n        style={{ width: 250 }}\n        value={state.operator}\n        onChange={(e) => {\n          if (!isOperator(e.target.value)) {\n            return;\n          }\n\n          setState({\n            operator: e.target.value,\n            input: state.input,\n          });\n        }}\n        name=\"question-type\"\n      >\n        {textOptions.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        ))}\n      </select>\n      <input\n        placeholder=\"Correct answer\"\n        disabled={!editMode}\n        type=\"text\"\n        className=\"form-control\"\n        onChange={(e) => setState({ operator: state.operator, input: e.target.value })}\n        value={state.input}\n      />\n    </div>\n  );\n};\n\nconst textOptions: { value: string; displayValue: string }[] = [\n  { value: 'contains', displayValue: 'Contains' },\n  { value: 'notcontains', displayValue: \"Doesn't Contain\" },\n  { value: 'regex', displayValue: 'Regex' },\n];\n"]}