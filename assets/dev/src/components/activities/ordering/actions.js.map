{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../../../../src/components/activities/ordering/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_PART_ID, remove } from 'components/activities/common/utils';\nimport {\n  Choice,\n  ChoiceId,\n  makeResponse,\n  makeUndoable,\n  PostUndoable,\n  Response,\n  ResponseId,\n} from 'components/activities/types';\nimport { Choices } from 'data/activities/model/choices';\nimport {\n  getChoiceIds,\n  getCorrectChoiceIds,\n  getCorrectResponse,\n  getResponseBy,\n  getResponseId,\n  getResponses,\n} from 'data/activities/model/responses';\nimport { matchInOrderRule } from 'data/activities/model/rules';\nimport jp from 'jsonpath';\nimport { clone } from 'utils/common';\nimport { Operations } from 'utils/pathOperations';\nimport { RESPONSES_PATH } from '../../../data/activities/model/responses';\nimport { OrderingSchema as Ordering } from './schema';\n\nexport class Actions {\n  static addChoice(choice: Choice) {\n    return (model: Ordering) => {\n      model.choices.push(choice);\n      getCorrectChoiceIds(model).push(choice.id);\n\n      model.authoring.targeted.forEach((assoc: any) => getChoiceIds(assoc).push(choice.id));\n      updateResponseRules(model);\n    };\n  }\n\n  static setCorrectChoices(choices: Choice[]) {\n    return (model: Ordering) => {\n      model.authoring.correct[0] = choices.map((c) => c.id);\n      updateResponseRules(model);\n    };\n  }\n\n  static removeChoiceAndUpdateRules(id: string) {\n    return (model: Ordering, post: PostUndoable) => {\n      const choice = Choices.getOne(model, id);\n      const index = Choices.getAll(model).findIndex((c) => c.id === id);\n      Choices.removeOne(id)(model);\n\n      remove(id, getChoiceIds(model.authoring.correct));\n      model.authoring.targeted.forEach((assoc: any) => remove(id, getChoiceIds(assoc)));\n\n      updateResponseRules(model);\n\n      const undoable = makeUndoable('Removed a choice', [\n        Operations.replace('$.authoring', clone(model.authoring)),\n        Operations.insert('$.choices', clone(choice), index),\n      ]);\n      post(undoable);\n    };\n  }\n\n  static addTargetedFeedback(path = RESPONSES_PATH) {\n    return (model: Ordering) => {\n      const choiceIds = model.choices.map((c: any) => c.id);\n      const response = makeResponse(matchInOrderRule(choiceIds), 0, '');\n\n      // Insert new targeted response before the last response, which is the\n      // catch-all incorrect response. Response rules are evaluated in-order,\n      // so the catch-all should be the last response.\n      jp.apply(model, path, (responses: Response[]) => {\n        responses.splice(getResponses(model).length - 1, 0, response);\n        return responses;\n      });\n      model.authoring.targeted.push([choiceIds, response.id]);\n    };\n  }\n\n  static editTargetedFeedbackChoices(responseId: ResponseId, choiceIds: ChoiceId[]) {\n    return (model: Ordering) => {\n      const assoc = model.authoring.targeted.find(\n        (assoc: any) => getResponseId(assoc) === responseId,\n      );\n      if (!assoc) return;\n      assoc[0] = choiceIds;\n      updateResponseRules(model);\n    };\n  }\n}\n\n// Update all response rules based on a model with new choices that\n// are not yet reflected by the rules.\nconst updateResponseRules = (model: Ordering) => {\n  getCorrectResponse(model, DEFAULT_PART_ID).rule = matchInOrderRule(getCorrectChoiceIds(model));\n\n  model.authoring.targeted.forEach((assoc) => {\n    getResponseBy(model, (r) => r.id === getResponseId(assoc)).rule = matchInOrderRule(\n      getChoiceIds(assoc),\n    );\n  });\n};\n"]}