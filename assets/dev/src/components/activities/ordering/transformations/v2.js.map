{"version":3,"file":"v2.js","sourceRoot":"","sources":["../../../../../../src/components/activities/ordering/transformations/v2.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_PART_ID } from 'components/activities/common/utils';\nimport { OrderingSchemaV1 as V1 } from 'components/activities/ordering/transformations/v1';\nimport {\n  ActivityModelSchema,\n  Choice,\n  ChoiceIdsToResponseId,\n  Part,\n  Stem,\n  Transformation,\n} from 'components/activities/types';\nimport {\n  getChoiceIds,\n  getCorrectResponse,\n  getResponseBy,\n  getResponseId,\n  getResponses,\n  getTargetedResponses,\n  Responses,\n} from 'data/activities/model/responses';\nimport { matchInOrderRule, matchRule } from 'data/activities/model/rules';\nimport { Maybe } from 'tsmonad';\n\nexport interface OrderingSchemaV2 extends ActivityModelSchema {\n  stem: Stem;\n  choices: Choice[];\n  authoring: {\n    version: 2;\n    // An association list of the choice ids in the correct order to the matching response id\n    correct: ChoiceIdsToResponseId;\n    targeted: ChoiceIdsToResponseId[];\n    parts: Part[];\n    transformations: Transformation[];\n    previewText: string;\n  };\n}\n\nexport const orderingV1toV2 = (model: V1): OrderingSchemaV2 => {\n  const newModel: OrderingSchemaV2 = {\n    stem: model.stem,\n    choices: model.choices,\n    authoring: {\n      version: 2,\n      correct: model.authoring.correct,\n      parts: model.authoring.parts,\n      transformations: model.authoring.transformations,\n      previewText: model.authoring.previewText,\n      targeted: model.type === 'SimpleOrdering' ? [] : model.authoring.targeted,\n    },\n  };\n\n  if (getChoiceIds(newModel.authoring.correct).length !== newModel.choices.length) {\n    newModel.authoring.correct[0] = newModel.choices.map((c) => c.id);\n    getCorrectResponse(newModel, DEFAULT_PART_ID).rule = matchInOrderRule(\n      newModel.authoring.correct[0],\n    );\n  }\n\n  if (newModel.authoring.targeted.length > 0) {\n    newModel.authoring.targeted.forEach((assoc) => {\n      const choiceIds = getChoiceIds(assoc);\n      if (choiceIds.length !== newModel.choices.length) {\n        assoc[0] = newModel.choices.map((c) => c.id);\n        getResponseBy(newModel, (r) => r.id === getResponseId(assoc)).rule =\n          matchInOrderRule(choiceIds);\n      }\n    });\n  }\n\n  Maybe.maybe(\n    getResponses(newModel).find(\n      (response) =>\n        response !== getCorrectResponse(newModel, DEFAULT_PART_ID) &&\n        !getTargetedResponses(newModel).includes(response),\n    ),\n  ).caseOf({\n    just: (incorrectResponse) => void (incorrectResponse.rule = matchRule('.*')),\n    nothing: () => void newModel.authoring.parts[0].responses.push(Responses.catchAll()),\n  });\n\n  return newModel;\n};\n"]}