{"version":3,"file":"undo.js","sourceRoot":"","sources":["../../../../src/components/resource/undo.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AACvC,OAAO,QAAQ,MAAM,WAAW,CAAC;AAQjC,MAAM,UAAU,IAAI,CAAI,OAAU;IAChC,OAAO;QACL,OAAO;QACP,SAAS,EAAE,SAAS,CAAC,KAAK,EAAK;QAC/B,SAAS,EAAE,SAAS,CAAC,KAAK,EAAK;KAChC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,KAAuB;IACpD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAEpC,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QACxC,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;KAChD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,KAAuB;IACpD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAEpC,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QACxC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;KAChD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,aAAa,CAAI,KAAuB,EAAE,MAAkB;IAC1E,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;QACjD,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAC9C,SAAS,EAAE,KAAK,CAAC,SAAS;KAC3B,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,MAAkB,EAAE,MAAkB;IAC5E,mBAAmB;IACnB,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IACvC,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;IAE7C,OAAO,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAgB,EAAE,EAAE;QAC7D,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;YACnB,MAAM,EAAE,CAAC;SACV;aAAM,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;YAC1B,MAAM,EAAE,CAAC;SACV;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,QAAa;IACrD,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import * as Immutable from 'immutable';\nimport isHotkey from 'is-hotkey';\n\nexport interface UndoableState<T> {\n  current: T;\n  undoStack: Immutable.Stack<T>;\n  redoStack: Immutable.Stack<T>;\n}\n\nexport function init<T>(current: T): UndoableState<T> {\n  return {\n    current,\n    undoStack: Immutable.Stack<T>(),\n    redoStack: Immutable.Stack<T>(),\n  };\n}\n\nexport function processUndo<T>(state: UndoableState<T>): UndoableState<T> {\n  const next = state.undoStack.peek();\n\n  if (next !== undefined) {\n    const undoStack = state.undoStack.pop();\n    const redoStack = state.redoStack.push(state.current);\n    return { current: next, undoStack, redoStack };\n  }\n\n  return state;\n}\n\nexport function processRedo<T>(state: UndoableState<T>): UndoableState<T> {\n  const next = state.redoStack.peek();\n\n  if (next !== undefined) {\n    const undoStack = state.undoStack.push(state.current);\n    const redoStack = state.redoStack.pop();\n    return { current: next, undoStack, redoStack };\n  }\n\n  return state;\n}\n\nexport function processUpdate<T>(state: UndoableState<T>, update: Partial<T>): UndoableState<T> {\n  return {\n    current: Object.assign({}, state.current, update),\n    undoStack: state.undoStack.push(state.current),\n    redoStack: state.redoStack,\n  };\n}\n\nexport function registerUndoRedoHotkeys(onUndo: () => void, onRedo: () => void) {\n  // register hotkeys\n  const isUndoHotkey = isHotkey('mod+z');\n  const isRedoHotkey = isHotkey('mod+shift+z');\n\n  return window.addEventListener('keydown', (e: KeyboardEvent) => {\n    if (isUndoHotkey(e)) {\n      onUndo();\n    } else if (isRedoHotkey(e)) {\n      onRedo();\n    }\n  });\n}\n\nexport function unregisterUndoRedoHotkeys(listener: any) {\n  window.removeEventListener('keydown', listener);\n}\n"]}