{"version":3,"file":"Tags.jsx","sourceRoot":"","sources":["../../../../src/components/resource/Tags.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as Immutable from 'immutable';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { ResourceId } from 'data/content/objective';\nimport { Tag } from 'data/content/tags';\nimport { ProjectSlug } from 'data/types';\nimport { create } from 'data/persistence/tags';\nimport guid from 'utils/guid';\n\nexport type TagsProps = {\n  tags: Tag[];\n  selected: ResourceId[];\n  editMode: boolean;\n  projectSlug: ProjectSlug;\n  onEdit: (tags: ResourceId[]) => void;\n  onRegisterNewTag: (tag: Tag) => void;\n};\n\nexport const Tags = (props: TagsProps) => {\n  const { tags, editMode, selected, onEdit, onRegisterNewTag } = props;\n\n  // Typeahead throws a bunch of warnings if it doesn't contain\n  // a unique DOM id.  So we generate one for it.\n  const [id] = useState(guid());\n\n  // The current 'selected' state of Typeahead must be the same shape as\n  // the options objects. So we look up from our list of slugs those objects.\n  const map = Immutable.Map<ResourceId, Tag>(tags.map((o) => [o.id, o]));\n  const asTags = selected.map((s) => map.get(s) as Tag);\n\n  return (\n    <div className=\"d-flex flex-row align-items-baseline\">\n      <div className=\"flex-grow-1\">\n        <Typeahead\n          id={id}\n          multiple={true}\n          disabled={!editMode}\n          onChange={(updated: (Tag & { customOption?: boolean })[]) => {\n            // we can safely assume that only one objective will ever be selected at a time\n            const createdTag = updated.find((o) => o.customOption);\n            if (createdTag) {\n              create(props.projectSlug, createdTag.title)\n                .then((result) => {\n                  if (result.result === 'success') {\n                    onRegisterNewTag({\n                      id: result.tag.id,\n                      title: createdTag.title,\n                    });\n\n                    // Use the newly created resource id instead of the id of\n                    // item created for us by the Typeahead\n                    const updatedTags = updated.map((o) => {\n                      if (o.customOption) {\n                        return result.tag.id;\n                      }\n                      return o.id;\n                    });\n\n                    onEdit(updatedTags);\n                  } else {\n                    throw result;\n                  }\n                })\n                .catch((e) => {\n                  console.error('tag creation failed', e);\n                });\n            } else {\n              // This check handles some weirdness where Typeahead fires onChange when\n              // there really isn't a change.\n              if (updated.length !== selected.length) {\n                const updatedTags = updated.map((o) => o.id);\n                onEdit(updatedTags);\n              }\n            }\n          }}\n          options={props.tags}\n          allowNew={true}\n          newSelectionPrefix=\"Create new tag: \"\n          selectHintOnEnter={true}\n          labelKey=\"title\"\n          selected={asTags}\n          placeholder=\"Select tags...\"\n        />\n      </div>\n    </div>\n  );\n};\n"]}