{"version":3,"file":"Objectives.jsx","sourceRoot":"","sources":["../../../../src/components/resource/Objectives.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as Immutable from 'immutable';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Objective, ResourceId } from 'data/content/objective';\nimport { ProjectSlug } from 'data/types';\nimport { create } from 'data/persistence/objective';\nimport guid from 'utils/guid';\n\nexport type ObjectivesProps = {\n  objectives: Objective[];\n  selected: ResourceId[];\n  editMode: boolean;\n  projectSlug: ProjectSlug;\n  onEdit: (objectives: ResourceId[]) => void;\n  onRegisterNewObjective: (objective: Objective) => void;\n};\n\nexport const Objectives = (props: ObjectivesProps) => {\n  const { objectives, editMode, selected, onEdit, onRegisterNewObjective } = props;\n\n  // Typeahead throws a bunch of warnings if it doesn't contain\n  // a unique DOM id.  So we generate one for it.\n  const [id] = useState(guid());\n\n  // The current 'selected' state of Typeahead must be the same shape as\n  // the options objects. So we look up from our list of slugs those objects.\n  const map = Immutable.Map<ResourceId, Objective>(objectives.map((o) => [o.id, o]));\n  const asObjectives = selected.map((s) => map.get(s) as Objective);\n\n  return (\n    <div className=\"flex-grow-1 objectives\">\n      <Typeahead\n        id={id}\n        multiple={true}\n        disabled={!editMode}\n        onChange={(updated: (Objective & { customOption?: boolean })[]) => {\n          // we can safely assume that only one objective will ever be selected at a time\n          const createdObjective = updated.find((o) => o.customOption);\n          if (createdObjective) {\n            create(props.projectSlug, createdObjective.title)\n              .then((result) => {\n                if (result.result === 'success') {\n                  onRegisterNewObjective({\n                    id: result.resourceId,\n                    title: createdObjective.title,\n                    parentId: null,\n                  });\n\n                  // Use the newly created resource id instead of the id of\n                  // item created for us by the Typeahead\n                  const updatedObjectives = updated.map((o) => {\n                    if (o.customOption) {\n                      return result.resourceId;\n                    }\n                    return o.id;\n                  });\n\n                  onEdit(updatedObjectives);\n                } else {\n                  throw result;\n                }\n              })\n              .catch((e) => {\n                // TODO: this should probably give a message to the user indicating that\n                // objective creation failed once we have a global messaging\n                // infrastructure in place. For now, we will just log to the conosle\n                console.error('objective creation failed', e);\n              });\n          } else {\n            // This check handles some weirdness where Typeahead fires onChange when\n            // there really isn't a change.\n            if (updated.length !== selected.length) {\n              const updatedObjectives = updated.map((o) => o.id);\n              onEdit(updatedObjectives);\n            }\n          }\n        }}\n        options={props.objectives}\n        allowNew={true}\n        newSelectionPrefix=\"Create new objective: \"\n        selectHintOnEnter={true}\n        labelKey=\"title\"\n        selected={asObjectives}\n        placeholder=\"Attach learning objectives...\"\n      />\n    </div>\n  );\n};\n"]}