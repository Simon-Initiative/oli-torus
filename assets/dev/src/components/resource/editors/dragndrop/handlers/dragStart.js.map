{"version":3,"file":"dragStart.js","sourceRoot":"","sources":["../../../../../../../src/components/resource/editors/dragndrop/handlers/dragStart.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,MAAM,CAAC,MAAM,gBAAgB,GAC3B,CACE,WAAwB,EACxB,WAA4B,EAC5B,eAAoE,EACpE,EAAE,CACJ,CAAC,CAAkC,EAAE,EAAU,EAAQ,EAAE;IACvD,MAAM,EAAE,GAAG,CAAC,CAAC,YAAY,CAAC;IAE1B,mEAAmE;IACnE,uCAAuC;IACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9B;YACE,QAAQ,EAAE,EAAE,GAAG,WAAW,CAAC,EAAE;YAC7B,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;YAC7C,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,OAAO;YACjB,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,KAAK;SAClB;KACF,CAAC,CAAC;IAEH,EAAE,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACpC,EAAE,CAAC,OAAO,CAAC,oCAAoC,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9E,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,WAAkB,CAAC,CAAC,CAAC;IAC1D,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,WAAkB,CAAC,CAAC,CAAC;IAC3D,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC5C,IAAI,OAAO,EAAE;QACX,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KAChC;IACD,EAAE,CAAC,aAAa,GAAG,MAAM,CAAC;IAE1B,gFAAgF;IAChF,oFAAoF;IACpF,8EAA8E;IAC9E,UAAU,CAAC,GAAG,EAAE;QACd,eAAe,CAAC,WAAW,CAAC,EAAY,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { DragPayload } from '../interfaces';\nimport { ResourceContent } from 'data/content/resource';\nimport { toSimpleText } from 'components/editing/utils';\n\nexport const dragStartHandler =\n  (\n    dragPayload: DragPayload,\n    contentItem: ResourceContent,\n    setActiveDragId: React.Dispatch<React.SetStateAction<string | null>>,\n  ) =>\n  (e: React.DragEvent<HTMLDivElement>, id: string): void => {\n    const dt = e.dataTransfer;\n\n    // Enables dragging of the underlying JSON of nodes into VSCode for\n    // debugging / troubleshooting purposes\n    const resource = JSON.stringify([\n      {\n        resource: '' + contentItem.id,\n        content: JSON.stringify(dragPayload, null, 2),\n        viewState: null,\n        encoding: 'UTF-8',\n        mode: null,\n        isExternal: false,\n      },\n    ]);\n\n    dt.setData('CodeEditors', resource);\n    dt.setData('application/x-oli-resource-content', JSON.stringify(dragPayload));\n    dt.setData('text/html', toSimpleText(contentItem as any));\n    dt.setData('text/plain', toSimpleText(contentItem as any));\n    const imageId = document.getElementById(id);\n    if (imageId) {\n      dt.setDragImage(imageId, 0, 0);\n    }\n    dt.effectAllowed = 'move';\n\n    // setting the reorder mode flag needs to happen at the end of the event loop to\n    // ensure that all dom nodes that existed when the drag began still exist throughout\n    // the entire event. This set timeout ensures this correct order of operations\n    setTimeout(() => {\n      setActiveDragId(contentItem.id as string);\n    });\n  };\n"]}