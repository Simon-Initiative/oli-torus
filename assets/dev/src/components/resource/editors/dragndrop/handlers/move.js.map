{"version":3,"file":"move.js","sourceRoot":"","sources":["../../../../../../../src/components/resource/editors/dragndrop/handlers/move.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAI3C,MAAM,CAAC,MAAM,WAAW,GACtB,CACE,OAAsD,EACtD,iBAAmF,EACnF,SAA4B,EAC5B,UAAsD,EACtD,YAAiC,EACjC,EAAE,CACJ,CAAC,GAAW,EAAE,EAAW,EAAE,EAAE;IAC3B,IAAI,OAAO,CAAC,KAAK,EAAmB,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE;QAAE,OAAO;IAE9D,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAoB,CAAC;IACjD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE/D,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAE7D,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAE5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;IAC/D,MAAM,IAAI,GACR,IAAI,CAAC,IAAI,KAAK,SAAS;QACrB,CAAC,CAAC,SAAS;QACX,CAAC,CAAC,eAAe,CAAC,IAAyB,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAExE,YAAY,CAAC,YAAY,QAAQ,GAAG,CAAC,OAAO,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC;AACxE,CAAC,CAAC","sourcesContent":["import { ActivityReference, ResourceContent } from 'data/content/resource';\nimport { ActivityEditorMap } from 'data/content/editors';\nimport { getFriendlyName } from '../utils';\nimport { ActivityEditContext } from 'data/content/activity';\nimport * as Immutable from 'immutable';\n\nexport const moveHandler =\n  (\n    content: Immutable.OrderedMap<string, ResourceContent>,\n    onEditContentList: (content: Immutable.OrderedMap<string, ResourceContent>) => void,\n    editorMap: ActivityEditorMap,\n    activities: Immutable.Map<string, ActivityEditContext>,\n    setAssistive: (s: string) => void,\n  ) =>\n  (key: string, up: boolean) => {\n    if (content.first<ResourceContent>().id === key && up) return;\n\n    const item = content.get(key) as ResourceContent;\n    const index = content.keySeq().indexOf(key);\n\n    const prefix = content.delete(key).take(index + (up ? -1 : 1));\n    const suffix = content.delete(key).skip(index + (up ? -1 : 1));\n\n    const inserted = prefix.concat([[key, item]]).concat(suffix);\n\n    onEditContentList(inserted);\n\n    const newIndex = inserted.keySeq().findIndex((k) => k === key);\n    const desc =\n      item.type === 'content'\n        ? 'Content'\n        : getFriendlyName(item as ActivityReference, editorMap, activities);\n\n    setAssistive(`Listbox. ${newIndex + 1} of ${content.size}. ${desc}.`);\n  };\n"]}