{"version":3,"file":"AddResourceOrDropTarget.jsx","sourceRoot":"","sources":["../../../../../src/components/resource/editors/AddResourceOrDropTarget.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,qDAAqD,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,oDAAoD,CAAC;AAChF,OAAO,EAAE,QAAQ,EAAE,MAAM,kDAAkD,CAAC;AAC5E,OAAO,EAAE,kBAAkB,EAAE,MAAM,4DAA4D,CAAC;AAOhG,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAgBpD,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,KAAmC,EAAE,EAAE;IAC7E,IAAI,KAAK,CAAC,aAAa,EAAE;QACvB,OAAO,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,EAAG,CAAC;KAC/D;IAED,OAAO,CACL,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,CACzD;MAAA,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EACtB;MAAA,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,EACvB;MAAA,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,EACtB;IAAA,EAAE,kBAAkB,CAAC,CACtB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { AddActivity } from 'components/content/add_resource_content/AddActivity';\nimport { AddContent } from 'components/content/add_resource_content/AddContent';\nimport { AddOther } from 'components/content/add_resource_content/AddOther';\nimport { AddResourceContent } from 'components/content/add_resource_content/AddResourceContent';\nimport { ActivityEditContext } from 'data/content/activity';\nimport { ActivityEditorMap } from 'data/content/editors';\nimport { Objective } from 'data/content/objective';\nimport { ResourceContent, ResourceContext } from 'data/content/resource';\nimport { ResourceId } from 'data/types';\nimport * as Immutable from 'immutable';\nimport React from 'react';\nimport { DropTarget } from './dragndrop/DropTarget';\n\nexport type AddResourceOrDropTargetProps = {\n  isReorderMode: boolean;\n  id: string;\n  index: number;\n  editMode: boolean;\n  editorMap: ActivityEditorMap;\n  resourceContext: ResourceContext;\n  onDrop: (e: React.DragEvent<HTMLDivElement>, index: number) => void;\n  onAddItem: (c: ResourceContent, index: number, a?: ActivityEditContext) => void;\n  objectives: Immutable.List<Objective>;\n  childrenObjectives: Immutable.Map<ResourceId, Immutable.List<Objective>>;\n  onRegisterNewObjective: (objective: Objective) => void;\n};\n\nexport const AddResourceOrDropTarget = (props: AddResourceOrDropTargetProps) => {\n  if (props.isReorderMode) {\n    return <DropTarget {...props} isLast={props.id === 'last'} />;\n  }\n\n  return (\n    <AddResourceContent {...props} isLast={props.id === 'last'}>\n      <AddContent {...props} />\n      <AddActivity {...props} />\n      <AddOther {...props} />\n    </AddResourceContent>\n  );\n};\n"]}