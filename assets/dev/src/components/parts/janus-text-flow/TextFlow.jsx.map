{"version":3,"file":"TextFlow.jsx","sourceRoot":"","sources":["../../../../../src/components/parts/janus-text-flow/TextFlow.tsx"],"names":[],"mappings":"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","sourcesContent":["import chroma from 'chroma-js';\nimport { Environment } from 'janus-script';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport guid from 'utils/guid';\nimport {\n  NotificationType,\n  subscribeToNotification,\n} from '../../../apps/delivery/components/NotificationContext';\nimport { PartComponentProps } from '../types/parts';\nimport Markup from './Markup';\nimport { TextFlowModel } from './schema';\n\nexport interface MarkupTree {\n  tag: string;\n  href?: string;\n  src?: string;\n  target?: string;\n  style?: any;\n  text?: string;\n  children?: MarkupTree[];\n}\n\nexport const getStylesToOverwrite = (node: MarkupTree, child: MarkupTree, fontSize?: any) => {\n  const style: any = {};\n  if (!node.style) {\n    return style;\n  }\n  if (\n    (node.style.styleName === 'Heading' || node.style.styleName === 'Title') &&\n    node.children?.length === 1 &&\n    child.tag === 'span'\n  ) {\n    // PMP-526\n    style.backgroundColor = '';\n  }\n  if (node.tag === 'p' && child.tag === 'span' && child.style.color === '#000000') {\n    style.color = 'inherit';\n  }\n  if (!(child.style && child.style.fontSize) && fontSize) {\n    style.fontSize = `${fontSize}px`;\n  }\n  return style;\n};\n\nexport const renderFlow = (\n  key: string,\n  treeNode: MarkupTree,\n  styleOverrides: any,\n  state: any[] = [],\n  fontSize?: any,\n  specialTag?: string,\n  env?: Environment,\n) => {\n  // clone styles\n  const styles: any = { ...treeNode.style };\n  // loop override styles\n  Object.keys(styleOverrides).forEach((s) => {\n    // override styles\n    styles[s] = styleOverrides[s];\n  });\n  // if style have 'baselineShift = superscript' or 'baselineShift = subscript'\n  // need to handle them separately\n  let customTag = '';\n  if (styles?.baselineShift === 'superscript') {\n    customTag = 'sup';\n  } else if (styles?.baselineShift === 'subscript') {\n    customTag = 'sub';\n  }\n  return (\n    <Markup\n      key={key}\n      tag={specialTag || treeNode.tag}\n      href={treeNode.href}\n      src={treeNode.src}\n      target={treeNode.target}\n      style={styles}\n      text={treeNode.text}\n      state={state}\n      env={env}\n    >\n      {treeNode.children &&\n        treeNode.children.map((child, index) => {\n          return renderFlow(\n            `${key}_${index}`,\n            child,\n            getStylesToOverwrite(treeNode, child, fontSize),\n            state,\n            fontSize,\n            customTag,\n            env,\n          );\n        })}\n    </Markup>\n  );\n};\n\nconst TextFlow: React.FC<PartComponentProps<TextFlowModel>> = (props: any) => {\n  const [state, setState] = useState<any>({});\n  const [model, setModel] = useState<any>(props.model);\n  const [ready, setReady] = useState<boolean>(false);\n  const [scriptEnv, setScriptEnv] = useState<any>();\n  const id: string = props.id;\n\n  const handleStylingChanges = () => {\n    const styleChanges: any = {};\n    if (width !== undefined) {\n      styleChanges.width = { value: width as number };\n    }\n    if (height != undefined && props.model.overrideHeight) {\n      styleChanges.height = { value: height as number };\n    }\n    props.onResize({ id: `${id}`, settings: styleChanges });\n  };\n  const initialize = useCallback(async (pModel) => {\n    // set defaults\n\n    const initResult = await props.onInit({\n      id,\n      responses: [],\n    });\n\n    // result of init has a state snapshot with latest (init state applied)\n    const currentStateSnapshot = initResult.snapshot;\n    setState(currentStateSnapshot);\n\n    if (initResult.env) {\n      // make a child scope so that any textflow scripts can't affect the parent\n      const flowEnv = new Environment(initResult.env);\n      setScriptEnv(flowEnv);\n    }\n    handleStylingChanges();\n    setReady(true);\n  }, []);\n\n  useEffect(() => {\n    initialize(model);\n  }, [model]);\n\n  useEffect(() => {\n    if (!props.notify) {\n      return;\n    }\n    const notificationsHandled = [\n      NotificationType.CHECK_STARTED,\n      NotificationType.CHECK_COMPLETE,\n      NotificationType.CONTEXT_CHANGED,\n      NotificationType.STATE_CHANGED,\n    ];\n    const notifications = notificationsHandled.map((notificationType: NotificationType) => {\n      const handler = (payload: any) => {\n        /* console.log(`[TEXTFLOW]: ${notificationType.toString()} notification handled`, payload); */\n        switch (notificationType) {\n          case NotificationType.CHECK_STARTED:\n            // nothing to do\n            break;\n          case NotificationType.CHECK_COMPLETE:\n            {\n              const { snapshot } = payload;\n              setState(snapshot);\n            }\n            break;\n          case NotificationType.STATE_CHANGED:\n            {\n              const { mutateChanges: changes } = payload;\n              setState({ ...state, ...changes });\n            }\n            break;\n          case NotificationType.CONTEXT_CHANGED:\n            {\n              const { snapshot } = payload;\n              setState({ ...state, ...snapshot });\n            }\n            break;\n        }\n      };\n      const unsub = subscribeToNotification(props.notify, notificationType, handler);\n      return unsub;\n    });\n    return () => {\n      notifications.forEach((unsub) => {\n        unsub();\n      });\n    };\n  }, [props.notify]);\n\n  const {\n    width,\n    customCssClass,\n    nodes,\n    palette,\n    fontSize,\n    height,\n    overrideWidth = true,\n    overrideHeight = false,\n  } = model;\n\n  const styles: any = {\n    wordWrap: 'break-word',\n    lineHeight: 'inherit',\n  };\n  if (overrideWidth) {\n    styles.width = width;\n  }\n  if (overrideHeight) {\n    styles.height = height;\n  }\n  if (fontSize) {\n    styles.fontSize = `${fontSize}px`;\n  }\n\n  if (palette) {\n    if (palette.useHtmlProps) {\n      styles.backgroundColor = palette.backgroundColor;\n      styles.borderColor = palette.borderColor;\n      styles.borderWidth = palette.borderWidth;\n      styles.borderStyle = palette.borderStyle;\n      styles.borderRadius = palette.borderRadius;\n    } else {\n      styles.borderWidth = `${palette.lineThickness ? palette.lineThickness + 'px' : 0}`;\n      styles.borderRadius = 0;\n      styles.borderStyle = palette.lineStyle === 0 ? 'none' : 'solid';\n      let borderColor = 'transparent';\n      if (palette.lineColor >= 0) {\n        borderColor = chroma(palette.lineColor || 0)\n          .alpha(palette.lineAlpha || 0)\n          .css();\n      }\n      styles.borderColor = borderColor;\n\n      let bgColor = 'transparent';\n      if (palette.fillColor >= 0) {\n        bgColor = chroma(palette.fillColor || 0)\n          .alpha(palette.fillAlpha || 0)\n          .css();\n      }\n      styles.backgroundColor = bgColor;\n    }\n  }\n\n  // TODO: preprocess model to find required variables and/or expressions\n  // using onInit to wait for initial state to be sent, and hold rendering\n  // until isReady (and also then fire onReady)\n  // send pre-calculated map of required values to Markup\n\n  useEffect(() => {\n    if (!ready) {\n      return;\n    }\n    props.onReady({ id, responses: [] });\n  }, [ready]);\n\n  // due to custom elements, objects will be JSON\n  let tree: MarkupTree[] = [];\n  if (nodes && typeof nodes === 'string') {\n    tree = JSON.parse(nodes as string) as MarkupTree[];\n  } else if (Array.isArray(nodes)) {\n    tree = nodes;\n  }\n  const styleOverrides: any = {};\n  if (width) {\n    styleOverrides.width = width;\n  }\n  if (fontSize) {\n    styleOverrides.fontSize = `${fontSize}px`;\n  }\n\n  return ready ? (\n    <div data-janus-type={tagName} style={styles}>\n      {tree?.map((subtree: MarkupTree) =>\n        renderFlow(\n          `textflow-${guid()}`,\n          subtree,\n          styleOverrides,\n          state,\n          fontSize,\n          undefined,\n          scriptEnv,\n        ),\n      )}\n    </div>\n  ) : null;\n};\n\nexport const tagName = 'janus-text-flow';\n\nexport default TextFlow;\n"]}