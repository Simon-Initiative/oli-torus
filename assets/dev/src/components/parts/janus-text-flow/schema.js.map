{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../src/components/parts/janus-text-flow/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import AccordionTemplate from 'apps/authoring/components/PropertyEditor/custom/AccordionTemplate';\nimport chroma from 'chroma-js';\nimport { JSONSchema7Object } from 'json-schema';\nimport { parseNumString } from 'utils/common';\nimport {\n  ColorPalette,\n  CreationContext,\n  JanusAbsolutePositioned,\n  JanusCustomCss,\n} from '../types/parts';\n\nexport interface TextFlowModel extends JanusAbsolutePositioned, JanusCustomCss {\n  overrideWidth?: boolean;\n  overrideHeight?: boolean;\n  nodes: any[]; // TODO\n  palette: ColorPalette;\n}\n\nexport const schema: JSONSchema7Object = {\n  overrideHeight: {\n    type: 'boolean',\n    default: false,\n    description: 'enable to use the value provided by the height field',\n  },\n  overrideWidth: {\n    type: 'boolean',\n    default: true,\n    description: 'enable to use the value provided by the width field',\n  },\n  customCssClass: { type: 'string' },\n  palette: {\n    type: 'object',\n    properties: {\n      backgroundColor: { type: 'string', title: 'Background Color' },\n      borderColor: { type: 'string', title: 'Border Color' },\n      borderRadius: { type: 'string', title: 'Border Radius' },\n      borderStyle: { type: 'string', title: 'Border Style' },\n      borderWidth: { type: 'string', title: 'Border Width' },\n    },\n  },\n};\n\nexport const uiSchema = {\n  palette: {\n    'ui:ObjectFieldTemplate': AccordionTemplate,\n    'ui:title': 'Background & Border',\n    backgroundColor: {\n      'ui:widget': 'ColorPicker',\n    },\n    borderColor: {\n      'ui:widget': 'ColorPicker',\n    },\n    borderStyle: { classNames: 'col-6' },\n    borderWidth: { classNames: 'col-6' },\n  },\n};\n\nexport const createSchema = (context?: CreationContext): Partial<TextFlowModel> => {\n  return {\n    overrideWidth: true,\n    overrideHeight: false,\n    customCssClass: '',\n    nodes: [\n      {\n        tag: 'p',\n        style: {},\n        children: [\n          {\n            tag: 'span',\n            style: {},\n            children: [\n              {\n                tag: 'text',\n                style: {},\n                text: 'Static Text',\n                children: [],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n\nexport const transformModelToSchema = (model: Partial<TextFlowModel>) => {\n  const { palette } = model;\n\n  const paletteStyles: Partial<ColorPalette> = {\n    backgroundColor: 'transparent',\n    borderColor: 'transparent',\n    borderStyle: 'none',\n    borderWidth: 0,\n    borderRadius: 0,\n  };\n\n  if (palette) {\n    if (palette.useHtmlProps) {\n      paletteStyles.backgroundColor = palette.backgroundColor;\n      paletteStyles.borderColor = palette.borderColor;\n      paletteStyles.borderWidth = parseNumString(palette.borderWidth.toString());\n      paletteStyles.borderStyle = palette.borderStyle;\n      paletteStyles.borderRadius = parseNumString(palette.borderRadius.toString());\n    } else {\n      paletteStyles.borderWidth = `${palette.lineThickness ? palette.lineThickness + 'px' : 0}`;\n      paletteStyles.borderRadius = 0;\n      paletteStyles.borderStyle = palette.lineStyle === 0 ? 'solid' : 'inherit';\n      let borderColor = 'transparent';\n      if (palette.lineColor! >= 0) {\n        borderColor = chroma(palette.lineColor || 0)\n          .alpha(palette.lineAlpha || 0)\n          .css();\n      }\n      paletteStyles.borderColor = borderColor;\n\n      let bgColor = 'transparent';\n      if (palette.fillColor! >= 0) {\n        bgColor = chroma(palette.fillColor || 0)\n          .alpha(palette.fillAlpha || 0)\n          .css();\n      }\n      paletteStyles.backgroundColor = bgColor;\n    }\n  }\n\n  const result = { palette: paletteStyles };\n\n  /* console.log('TF [transformModelToSchema]', { model, result }); */\n\n  return result;\n};\n\nexport const transformSchemaToModel = (schema: Partial<TextFlowModel>) => {\n  const { overrideHeight, overrideWidth, customCssClass, palette } = schema;\n  const result: Partial<TextFlowModel> = {\n    ...schema,\n    overrideHeight: !!overrideHeight,\n    overrideWidth: !!overrideWidth,\n    customCssClass: customCssClass || '',\n  };\n\n  if (palette) {\n    result.palette = {\n      useHtmlProps: true,\n      backgroundColor: palette.backgroundColor || 'transparent',\n      borderColor: palette.borderColor || 'transparent',\n      borderRadius: parseNumString(palette.borderRadius.toString()) || 0,\n      borderWidth: parseNumString(palette.borderWidth.toString()) || 0,\n      borderStyle: palette.borderStyle || 'none',\n    };\n  }\n\n  /* console.log('TF [transformSchemaToModel]', { schema, result }); */\n\n  return result;\n};\n\nexport const getCapabilities = () => ({\n  configure: true,\n});\n"]}