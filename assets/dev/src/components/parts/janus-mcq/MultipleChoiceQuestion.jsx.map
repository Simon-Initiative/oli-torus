{"version":3,"file":"MultipleChoiceQuestion.jsx","sourceRoot":"","sources":["../../../../../src/components/parts/janus-mcq/MultipleChoiceQuestion.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport { shuffle } from 'lodash';\nimport React, { CSSProperties, useCallback, useEffect, useState } from 'react';\nimport { CapiVariableTypes } from '../../../adaptivity/capi';\nimport {\n  NotificationType,\n  subscribeToNotification,\n} from '../../../apps/delivery/components/NotificationContext';\nimport { contexts } from '../../../types/applicationContext';\nimport { parseArray, parseBoolean } from '../../../utils/common';\nimport { renderFlow } from '../janus-text-flow/TextFlow';\nimport { PartComponentProps } from '../types/parts';\nimport { JanusMultipleChoiceQuestionProperties } from './MultipleChoiceQuestionType';\nimport { McqItem, McqModel } from './schema';\n\n// SS assumes the unstyled \"text\" of the label is the text value\n// there should only be one node in a label text, but we'll concat them jic\nconst getNodeText = (node: any): any => {\n  if (Array.isArray(node)) {\n    return node.reduce((txt, newNode) => (txt += getNodeText(newNode)), '');\n  }\n  let nodeText = node.text || '';\n  nodeText += node.children.reduce((childrenText: any, childNode: any) => {\n    let txt = childrenText;\n    txt += getNodeText(childNode);\n    return txt;\n  }, '');\n  return nodeText;\n};\n\nconst MCQItemContent: React.FC<any> = ({ nodes, state }) => {\n  return (\n    // Need to set {{ left: 18, position: 'relative' }}. checked it in SS as well. This gets set for all the MCQ and external CSS override change it\n    //depending upon their needs\n    <div style={{ left: 18, position: 'relative' }}>\n      {nodes.map((subtree: any) => {\n        const style: any = {};\n        if (subtree.tag === 'p') {\n          // PMP-347\n          const hasImages = subtree.children.some((child: { tag: string }) => child.tag === 'img');\n          if (hasImages) {\n            style.display = 'inline-block';\n          }\n        }\n        return renderFlow('root', subtree, style, state);\n      })}\n    </div>\n  );\n};\n\nexport const MCQItem: React.FC<JanusMultipleChoiceQuestionProperties> = ({\n  nodes,\n  state,\n  multipleSelection,\n  itemId,\n  layoutType,\n  totalItems,\n  groupId,\n  selected = false,\n  onSelected,\n  val,\n  disabled,\n  idx,\n  overrideHeight,\n  columns = 1,\n  onConfigOptionClick,\n  index,\n  configureMode,\n  verticalGap = 0,\n}) => {\n  const mcqItemStyles: CSSProperties = {};\n  if (layoutType === 'horizontalLayout') {\n    if (columns === 1) {\n      mcqItemStyles.width = `calc(${100 / totalItems}% - 6px)`;\n    } else {\n      mcqItemStyles.width = `calc(100% / ${columns} - 6px)`;\n    }\n    if (idx !== 0) {\n      mcqItemStyles.left = `calc(${(100 / totalItems) * idx}% - 6px)`;\n    }\n    mcqItemStyles.position = `absolute`;\n\n    mcqItemStyles.display = `inline-block`;\n  }\n  if (layoutType === 'verticalLayout' && overrideHeight) {\n    mcqItemStyles.height = `calc(${100 / totalItems}%)`;\n  }\n  if (layoutType === 'verticalLayout' && verticalGap && index > 0) {\n    mcqItemStyles.marginTop = `${verticalGap}px`;\n  }\n\n  const textValue = getNodeText(nodes);\n\n  const handleChanged = (e: { target: { checked: any } }) => {\n    const selection = {\n      value: val,\n      textValue,\n      checked: e.target.checked,\n    };\n    if (onSelected) {\n      onSelected(selection);\n    }\n  };\n  return (\n    <React.Fragment>\n      <div style={mcqItemStyles}>\n        {configureMode && (\n          <>\n            <button\n              className=\"aa-add-button btn btn-primary btn-sm\"\n              type=\"button\"\n              aria-describedby=\"button-tooltip\"\n              onClick={() => onConfigOptionClick(index, 2)}\n              style={{\n                fontSize: '10px;',\n                padding: 1,\n                cursor: 'pointer',\n              }}\n            >\n              <i\n                className=\"fa fa-trash\"\n                style={{ cursor: 'pointer', color: 'white' }}\n                aria-hidden=\"true\"\n                title=\"Delete the option\"\n              ></i>{' '}\n            </button>\n\n            <button\n              className=\"aa-add-button btn btn-primary btn-sm\"\n              type=\"button\"\n              aria-describedby=\"button-tooltip\"\n              onClick={() => onConfigOptionClick(index, 1)}\n              style={{\n                fontSize: '10px;',\n                padding: 1,\n                marginLeft: 4,\n                cursor: 'pointer',\n              }}\n            >\n              <i\n                className=\"fas fa-edit\"\n                style={{ cursor: 'pointer', color: 'white' }}\n                aria-hidden=\"true\"\n                title=\"Edit the option\"\n              ></i>{' '}\n            </button>\n            <button\n              className=\"aa-add-button btn btn-primary btn-sm\"\n              type=\"button\"\n              aria-describedby=\"button-tooltip\"\n              onClick={() => onConfigOptionClick(index, 3)}\n              style={{\n                fontSize: '10px;',\n                padding: 1,\n                marginLeft: 4,\n                cursor: 'pointer',\n                marginRight: 2,\n              }}\n            >\n              <i\n                className=\"fas fa-plus\"\n                style={{ cursor: 'pointer', color: 'white' }}\n                aria-hidden=\"true\"\n                title=\"Add new option\"\n              ></i>{' '}\n            </button>\n          </>\n        )}\n        <input\n          style={{ position: 'absolute', marginTop: 5 }}\n          name={groupId}\n          id={itemId}\n          type={multipleSelection ? 'checkbox' : 'radio'}\n          value={val}\n          disabled={disabled}\n          checked={selected}\n          onChange={handleChanged}\n        />\n        <label htmlFor={itemId}>\n          <MCQItemContent nodes={nodes} state={state} />\n        </label>\n      </div>\n      {layoutType !== 'horizontalLayout' && <br style={{ padding: '0px;' }} />}\n    </React.Fragment>\n  );\n};\n\ninterface McqOptionModel extends McqItem {\n  index: number;\n  value: number;\n}\n\nconst getOptionTextFromNode = (children: any): any => {\n  let optionText = '';\n  if (children.tag === 'text') {\n    optionText = children.text;\n  } else if (children?.children?.length) {\n    optionText = getOptionTextFromNode(children.children[0]);\n  }\n  return optionText;\n};\n\nconst getOptionTextById = (options: McqOptionModel[], optionId: number): string => {\n  const text = options\n    .map((option: any) => {\n      if (option.value === optionId) {\n        if (option.nodes[0].tag === 'text') {\n          return option.nodes[0].text;\n        } else {\n          return getOptionTextFromNode(option.nodes[0]);\n        }\n      }\n    })\n    .filter((option: any) => option !== undefined);\n  return text?.length ? text[0] : '';\n};\n\nconst getOptionNumberFromText = (\n  options: McqOptionModel[],\n  optionText: string,\n): number | undefined => {\n  const values = options\n    .map((option) => {\n      const text = getOptionTextFromNode(option.nodes[0]);\n      if (text === optionText) {\n        return option.value;\n      }\n    })\n    .filter((option) => option !== undefined);\n\n  // even if there are multiple choices with the same text (why??) pick the first one\n  return values[0];\n};\n\ninterface ItemSelectionInput {\n  value: number;\n  textValue: string;\n  checked: boolean;\n}\n\nconst MultipleChoiceQuestion: React.FC<PartComponentProps<McqModel>> = (props) => {\n  const [state, setState] = useState<any[]>(Array.isArray(props.state) ? props.state : []);\n  const [model, setModel] = useState<any>(Array.isArray(props.model) ? props.model : {});\n  const [ready, setReady] = useState<boolean>(false);\n  const id: string = props.id;\n\n  const [enabled, setEnabled] = useState(true);\n  const [randomized, setRandomized] = useState(false);\n  const [options, setOptions] = useState<McqOptionModel[]>([]);\n  const [numberOfSelectedChoices, setNumberOfSelectedChoices] = useState(0);\n  // note in SS selection is 1 based\n  const [selectedChoice, setSelectedChoice] = useState<number>(0);\n  const [selectedChoiceText, setSelectedChoiceText] = useState<string>('');\n  const [selectedChoices, setSelectedChoices] = useState<number[]>([]);\n  const [selectedChoicesText, setSelectedChoicesText] = useState<string[]>([]);\n\n  const initialize = useCallback(async (pModel) => {\n    // set defaults from model\n    const dEnabled = typeof pModel.enabled === 'boolean' ? pModel.enabled : enabled;\n    setEnabled(dEnabled);\n\n    const dRandomized = parseBoolean(pModel.randomize);\n    setRandomized(dRandomized);\n\n    // we need to set up a new list so that we can shuffle while maintaining correct index/values\n    let mcqList: McqOptionModel[] = pModel.mcqItems?.map((item: any, index: number) => ({\n      ...item,\n      index: index,\n      value: index + 1,\n    }));\n\n    if (dRandomized) {\n      mcqList = shuffle(mcqList);\n    }\n\n    setOptions(mcqList);\n\n    // now we need to save the defaults used in adaptivity (not necessarily the same)\n    const initResult = await props.onInit({\n      id,\n      responses: [\n        {\n          key: 'enabled',\n          type: CapiVariableTypes.BOOLEAN,\n          value: dEnabled,\n        },\n        {\n          key: 'randomize',\n          type: CapiVariableTypes.BOOLEAN,\n          value: dRandomized,\n        },\n        {\n          key: 'numberOfSelectedChoices',\n          type: CapiVariableTypes.NUMBER,\n          value: numberOfSelectedChoices,\n        },\n        {\n          key: 'selectedChoice',\n          type: CapiVariableTypes.NUMBER,\n          value: -1,\n        },\n        {\n          key: 'selectedChoiceText',\n          type: CapiVariableTypes.STRING,\n          value: selectedChoiceText,\n        },\n        {\n          key: 'selectedChoices',\n          type: CapiVariableTypes.ARRAY,\n          value: selectedChoices,\n        },\n        {\n          key: 'selectedChoicesText',\n          type: CapiVariableTypes.ARRAY,\n          value: selectedChoicesText,\n        },\n      ],\n    });\n\n    // result of init has a state snapshot with latest (init state applied)\n    const currentStateSnapshot = initResult.snapshot;\n    setState(currentStateSnapshot);\n\n    const sEnabled = currentStateSnapshot[`stage.${id}.enabled`];\n    if (sEnabled !== undefined) {\n      setEnabled(sEnabled);\n    }\n\n    const sRandomize = currentStateSnapshot[`stage.${id}.randomize`];\n    if (sRandomize !== undefined) {\n      setRandomized(sRandomize);\n    }\n\n    // it doesn't make sense to apply *all* of these if they came at the same time (they shouldn't)\n    let hasDoneMultiple = false;\n    let hasDoneSelectedChoice = false;\n\n    // this is for setting *multiple* choices being selected by the number value\n    const sSelectedChoices = currentStateSnapshot[`stage.${id}.selectedChoices`];\n    if (sSelectedChoices !== undefined) {\n      hasDoneMultiple = true;\n      hasDoneSelectedChoice = true;\n      const selectedArray = parseArray(sSelectedChoices);\n      if (Array.isArray(selectedArray)) {\n        const newSelectionArray = selectedArray.map((choice) => ({\n          value: choice,\n          textValue: getOptionTextById(options, choice),\n          checked: true,\n        }));\n        handleMultipleItemSelection(newSelectionArray, true);\n      }\n    }\n\n    // this is for setting *multiple* choices being selected by the text value\n    const sSelectedChoicesText = currentStateSnapshot[`stage.${id}.selectedChoicesText`];\n    if (sSelectedChoicesText !== undefined && !hasDoneSelectedChoice) {\n      hasDoneMultiple = true;\n      const selectedArray = parseArray(sSelectedChoicesText);\n      if (Array.isArray(selectedArray)) {\n        const newSelectionArray = selectedArray\n          .map((choiceText) => ({\n            value: getOptionNumberFromText(options, choiceText),\n            textValue: choiceText,\n            checked: true,\n          }))\n          .filter((choice) => choice.value !== undefined);\n        handleMultipleItemSelection(newSelectionArray as ItemSelectionInput[], true);\n      }\n    }\n\n    if (!hasDoneMultiple) {\n      // this is for setting a *single* seletion by the number\n      const sSelectedChoice = currentStateSnapshot[`stage.${id}.selectedChoice`];\n      if (sSelectedChoice !== undefined) {\n        hasDoneSelectedChoice = true;\n        const choice = parseInt(String(sSelectedChoice), 10);\n        const checked = choice > 0;\n        const textValue = checked ? getOptionTextById(options, choice) : '';\n        handleItemSelection(\n          { value: choice, textValue, checked },\n          true, // need to save pretty much every time because of related properties like count\n        );\n      }\n\n      // this is for a *single* choice being selected by the text value\n      const sSelectedChoiceText = currentStateSnapshot[`stage.${id}.selectedChoiceText`];\n      if (sSelectedChoiceText !== undefined && !hasDoneSelectedChoice) {\n        const choiceNumber = getOptionNumberFromText(options, sSelectedChoiceText);\n        if (choiceNumber !== undefined) {\n          handleItemSelection(\n            { value: choiceNumber, textValue: sSelectedChoiceText, checked: true },\n            true, // need to save pretty much every time because of related properties like count\n          );\n        }\n      }\n    }\n\n    if (initResult.context.mode === contexts.REVIEW) {\n      setEnabled(false);\n    }\n    setReady(true);\n  }, []);\n\n  const {\n    width,\n    multipleSelection,\n    customCssClass,\n    layoutType,\n    height,\n    overrideHeight = false,\n  } = model;\n\n  useEffect(() => {\n    let pModel;\n    let pState;\n    if (typeof props?.model === 'string') {\n      try {\n        pModel = JSON.parse(props.model);\n        setModel(pModel);\n      } catch (err) {\n        // bad json, what do?\n      }\n    }\n    if (typeof props?.state === 'string') {\n      try {\n        pState = JSON.parse(props.state);\n        setState(pState);\n      } catch (err) {\n        // bad json, what do?\n      }\n    }\n    if (!pModel) {\n      return;\n    }\n    initialize(pModel);\n  }, [props]);\n\n  useEffect(() => {\n    if (!ready) {\n      return;\n    }\n    props.onReady({ id, responses: [] });\n  }, [ready]);\n\n  useEffect(() => {\n    if (!props.notify) {\n      return;\n    }\n    const notificationsHandled = [\n      NotificationType.CHECK_STARTED,\n      NotificationType.CHECK_COMPLETE,\n      NotificationType.CONTEXT_CHANGED,\n      NotificationType.STATE_CHANGED,\n    ];\n    const notifications = notificationsHandled.map((notificationType: NotificationType) => {\n      const handler = (payload: any) => {\n        /* console.log(`${notificationType.toString()} notification handled [MCQ]`, payload); */\n        switch (notificationType) {\n          case NotificationType.CHECK_STARTED:\n            // should disable input during check?\n            break;\n          case NotificationType.CHECK_COMPLETE:\n            // if disabled above then re-enable now\n            break;\n          case NotificationType.STATE_CHANGED:\n            {\n              const { mutateChanges: changes } = payload;\n              const sEnabled = changes[`stage.${id}.enabled`];\n              if (sEnabled !== undefined) {\n                setEnabled(sEnabled);\n              }\n              const sRandomized = changes[`stage.${id}.randomize`];\n              if (sRandomized !== undefined) {\n                setRandomized(parseBoolean(sRandomized));\n              }\n\n              // it doesn't make sense to apply *all* of these if they came at the same time (they shouldn't)\n              let hasDoneMultiple = false;\n              let hasDoneSelectedChoice = false;\n\n              // this is for setting *multiple* choices being selected by the number value\n              const sSelectedChoices = changes[`stage.${id}.selectedChoices`];\n              if (sSelectedChoices !== undefined) {\n                hasDoneMultiple = true;\n                hasDoneSelectedChoice = true;\n                const selectedArray = parseArray(sSelectedChoices);\n                if (Array.isArray(selectedArray)) {\n                  const newSelectionArray = selectedArray.map((choice) => ({\n                    value: choice,\n                    textValue: getOptionTextById(options, choice),\n                    checked: true,\n                  }));\n                  handleMultipleItemSelection(newSelectionArray, true);\n                }\n              }\n\n              // this is for setting *multiple* choices being selected by the text value\n              const sSelectedChoicesText = changes[`stage.${id}.selectedChoicesText`];\n              if (sSelectedChoicesText !== undefined && !hasDoneSelectedChoice) {\n                hasDoneMultiple = true;\n                const selectedArray = parseArray(sSelectedChoicesText);\n                if (Array.isArray(selectedArray)) {\n                  const newSelectionArray = selectedArray\n                    .map((choiceText) => ({\n                      value: getOptionNumberFromText(options, choiceText),\n                      textValue: choiceText,\n                      checked: true,\n                    }))\n                    .filter((choice) => choice.value !== undefined);\n                  handleMultipleItemSelection(newSelectionArray as ItemSelectionInput[], true);\n                }\n              }\n\n              if (!hasDoneMultiple) {\n                // this is for setting a *single* seletion by the number\n                const sSelectedChoice = changes[`stage.${id}.selectedChoice`];\n                if (sSelectedChoice !== undefined) {\n                  hasDoneSelectedChoice = true;\n                  const choice = parseInt(String(sSelectedChoice), 10);\n                  const checked = choice > 0;\n                  const textValue = checked ? getOptionTextById(options, choice) : '';\n                  handleItemSelection(\n                    { value: choice, textValue, checked },\n                    true, // need to save pretty much every time because of related properties like count\n                  );\n                }\n\n                // this is for a *single* choice being selected by the text value\n                const sSelectedChoiceText = changes[`stage.${id}.selectedChoiceText`];\n                if (sSelectedChoiceText !== undefined && !hasDoneSelectedChoice) {\n                  const choiceNumber = getOptionNumberFromText(options, sSelectedChoiceText);\n                  if (choiceNumber !== undefined) {\n                    handleItemSelection(\n                      { value: choiceNumber, textValue: sSelectedChoiceText, checked: true },\n                      true, // need to save pretty much every time because of related properties like count\n                    );\n                  }\n                }\n              }\n\n              // NOTE: it doesn't make sense (SS doesn't let you) to allow the things like\n              // numberOfSelectedChoices to be set via mutate state\n            }\n            break;\n          case NotificationType.CONTEXT_CHANGED:\n            {\n              const { snapshot: changes } = payload;\n              const sEnabled = changes[`stage.${id}.enabled`];\n              if (sEnabled !== undefined) {\n                setEnabled(sEnabled);\n              }\n              const sRandomized = changes[`stage.${id}.randomize`];\n              if (sRandomized !== undefined) {\n                setRandomized(parseBoolean(sRandomized));\n              }\n              // it doesn't make sense to apply *all* of these if they came at the same time (they shouldn't)\n              let hasDoneMultiple = false;\n              let hasDoneSelectedChoice = false;\n\n              // this is for setting *multiple* choices being selected by the number value\n              const sSelectedChoices = changes[`stage.${id}.selectedChoices`];\n              if (sSelectedChoices !== undefined) {\n                hasDoneMultiple = true;\n                hasDoneSelectedChoice = true;\n                const selectedArray = parseArray(sSelectedChoices);\n                if (Array.isArray(selectedArray)) {\n                  const newSelectionArray = selectedArray.map((choice) => ({\n                    value: choice,\n                    textValue: getOptionTextById(options, choice),\n                    checked: true,\n                  }));\n                  handleMultipleItemSelection(newSelectionArray, true);\n                }\n              }\n\n              // this is for setting *multiple* choices being selected by the text value\n              const sSelectedChoicesText = changes[`stage.${id}.selectedChoicesText`];\n              if (sSelectedChoicesText !== undefined && !hasDoneSelectedChoice) {\n                hasDoneMultiple = true;\n                const selectedArray = parseArray(sSelectedChoicesText);\n                if (Array.isArray(selectedArray)) {\n                  const newSelectionArray = selectedArray\n                    .map((choiceText) => ({\n                      value: getOptionNumberFromText(options, choiceText),\n                      textValue: choiceText,\n                      checked: true,\n                    }))\n                    .filter((choice) => choice.value !== undefined);\n                  handleMultipleItemSelection(newSelectionArray as ItemSelectionInput[], true);\n                }\n              }\n\n              if (!hasDoneMultiple) {\n                // this is for setting a *single* seletion by the number\n                const sSelectedChoice = changes[`stage.${id}.selectedChoice`];\n                if (sSelectedChoice !== undefined) {\n                  hasDoneSelectedChoice = true;\n                  const choice = parseInt(String(sSelectedChoice), 10);\n                  const checked = choice > 0;\n                  const textValue = checked ? getOptionTextById(options, choice) : '';\n                  handleItemSelection(\n                    { value: choice, textValue, checked },\n                    true, // need to save pretty much every time because of related properties like count\n                  );\n                }\n\n                // this is for a *single* choice being selected by the text value\n                const sSelectedChoiceText = changes[`stage.${id}.selectedChoiceText`];\n                if (sSelectedChoiceText !== undefined && !hasDoneSelectedChoice) {\n                  const choiceNumber = getOptionNumberFromText(options, sSelectedChoiceText);\n                  if (choiceNumber !== undefined) {\n                    handleItemSelection(\n                      { value: choiceNumber, textValue: sSelectedChoiceText, checked: true },\n                      true, // need to save pretty much every time because of related properties like count\n                    );\n                  }\n                }\n              }\n            }\n            break;\n        }\n      };\n      const unsub = subscribeToNotification(props.notify, notificationType, handler);\n      return unsub;\n    });\n    return () => {\n      notifications.forEach((unsub) => {\n        unsub();\n      });\n    };\n  }, [props.notify, options]);\n\n  // Set up the styles\n  const styles: CSSProperties = {\n    /* position: 'absolute',\n    top: y,\n    left: x,\n    width,\n    zIndex: z, */\n    width,\n  };\n  if (overrideHeight) {\n    styles.height = height;\n    styles.marginTop = '8px';\n  }\n\n  useEffect(() => {\n    setOptions((currentOptions) => {\n      if (randomized) {\n        return shuffle(currentOptions);\n      }\n      // TODO: return original model order??\n      return currentOptions;\n    });\n  }, [randomized]);\n\n  useEffect(() => {\n    const styleChanges: any = {};\n    if (width !== undefined) {\n      styleChanges.width = { value: width as number };\n    }\n    if (height != undefined) {\n      styleChanges.height = { value: height as number };\n    }\n\n    props.onResize({ id: `${id}`, settings: styleChanges });\n  }, [width, height]);\n\n  // will always *replace* the selected choices (used by init & mutate)\n  const handleMultipleItemSelection = (selections: ItemSelectionInput[], shouldSave = true) => {\n    let modifiedSelections = selections;\n    const newCount = selections.length;\n    const blankValueExit =\n      (selections.length === 1 && selections.filter((item) => item.value <= 0)) || [];\n    if (blankValueExit.length) {\n      modifiedSelections = [];\n    }\n    const newSelectedChoices = modifiedSelections\n      .sort((a, b) => a.value - b.value)\n      .map((item) => item.value);\n\n    const newSelectedChoice = newSelectedChoices[0];\n\n    const newSelectedChoicesText = modifiedSelections\n      .sort((a, b) => a.value - b.value)\n      .map((item) => item.textValue);\n\n    const newSelectedChoiceText = newSelectedChoicesText[0];\n\n    setNumberOfSelectedChoices(newCount);\n    setSelectedChoice(newSelectedChoice);\n    setSelectedChoices(newSelectedChoices);\n    setSelectedChoiceText(newSelectedChoiceText);\n    setSelectedChoicesText(newSelectedChoicesText);\n\n    if (shouldSave) {\n      saveState({\n        numberOfSelectedChoices: newCount,\n        selectedChoice: newSelectedChoice,\n        selectedChoiceText: newSelectedChoiceText,\n        selectedChoices: newSelectedChoices,\n        selectedChoicesText: newSelectedChoicesText,\n      });\n    }\n  };\n\n  const handleItemSelection = (\n    { value, textValue, checked }: ItemSelectionInput,\n    shouldSave = true,\n  ) => {\n    const originalValue = parseInt(value.toString(), 10);\n    let newChoice = checked ? originalValue : 0;\n    let newCount = 1;\n    let newSelectedChoices = [newChoice];\n    let updatedChoicesText = [checked ? textValue : ''];\n    let updatedChoiceText = updatedChoicesText[0];\n\n    if (multipleSelection) {\n      // sets data for checkboxes, which can have multiple values\n      newSelectedChoices = [...new Set([...selectedChoices, newChoice])].filter(\n        (c) => checked || (!checked && originalValue !== c && c > 0),\n      );\n\n      newChoice = newSelectedChoices.sort()[0] || 0;\n\n      updatedChoicesText = newSelectedChoices\n        .sort()\n        .map((choice) => getOptionTextById(options, choice));\n      updatedChoiceText = updatedChoicesText[0] || '';\n\n      newCount = newSelectedChoices.length;\n    }\n    let modifiedNewSelectedChoices = newSelectedChoices;\n    const blankValueExit =\n      (newSelectedChoices.length === 1 && newSelectedChoices.filter((value) => value <= 0)) || [];\n    if (blankValueExit.length) {\n      modifiedNewSelectedChoices = [];\n      updatedChoicesText = [];\n    }\n    setNumberOfSelectedChoices(newCount);\n    setSelectedChoice(newChoice);\n    setSelectedChoices(modifiedNewSelectedChoices);\n    setSelectedChoiceText(updatedChoiceText);\n    setSelectedChoicesText(updatedChoicesText);\n\n    if (shouldSave) {\n      saveState({\n        numberOfSelectedChoices: newCount,\n        selectedChoice: newChoice,\n        selectedChoiceText: updatedChoiceText,\n        selectedChoices: modifiedNewSelectedChoices,\n        selectedChoicesText: updatedChoicesText,\n      });\n    }\n    console.log('MCQ HANDLE SELECT', {\n      shouldSave,\n      newCount,\n      newChoice,\n      newSelectedChoices,\n      updatedChoiceText,\n      updatedChoicesText,\n    });\n  };\n\n  const saveState = ({\n    numberOfSelectedChoices,\n    selectedChoice,\n    selectedChoiceText,\n    selectedChoices,\n    selectedChoicesText,\n  }: {\n    numberOfSelectedChoices: number;\n    selectedChoice: number;\n    selectedChoiceText: string;\n    selectedChoices: number[];\n    selectedChoicesText: string[];\n  }) => {\n    props.onSave({\n      id: `${id}`,\n      responses: [\n        {\n          key: 'numberOfSelectedChoices',\n          type: CapiVariableTypes.NUMBER,\n          value: numberOfSelectedChoices,\n        },\n        {\n          key: 'selectedChoice',\n          type: CapiVariableTypes.NUMBER,\n          value: selectedChoice,\n        },\n        {\n          key: 'selectedChoiceText',\n          type: CapiVariableTypes.STRING,\n          value: selectedChoiceText,\n        },\n        {\n          key: 'selectedChoices',\n          type: CapiVariableTypes.ARRAY,\n          value: selectedChoices,\n        },\n        {\n          key: 'selectedChoicesText',\n          type: CapiVariableTypes.ARRAY,\n          value: selectedChoicesText,\n        },\n      ],\n    });\n  };\n\n  const isItemSelected = (index: number) => {\n    // checks if the item is selected to set the input's \"selected\" attr\n    let selected = false;\n    if (multipleSelection) {\n      selected = selectedChoices.includes(index + 1);\n    } else {\n      selected = selectedChoice === index + 1;\n    }\n    return selected;\n  };\n\n  let columns = 1;\n  if (customCssClass === 'two-columns') {\n    columns = 2;\n  }\n  if (customCssClass === 'three-columns') {\n    columns = 3;\n  }\n  if (customCssClass === 'four-columns') {\n    columns = 4;\n  }\n\n  return ready ? (\n    <div data-janus-type={tagName} style={styles} className={`mcq-input`}>\n      {options?.map((item, index) => (\n        <MCQItem\n          idx={index}\n          key={`${id}-item-${index}`}\n          title={item.title}\n          totalItems={options.length}\n          layoutType={layoutType}\n          itemId={`${id}-item-${index}`}\n          groupId={`mcq-${id}`}\n          selected={isItemSelected(item.index)}\n          val={item.value}\n          onSelected={handleItemSelection}\n          state={state}\n          {...item}\n          x={0}\n          y={0}\n          overrideHeight={overrideHeight}\n          disabled={!enabled}\n          multipleSelection={multipleSelection}\n          columns={columns}\n        />\n      ))}\n    </div>\n  ) : null;\n};\n\nexport const tagName = 'janus-mcq';\n\nexport default MultipleChoiceQuestion;\n"]}