{"version":3,"file":"NavButtonAuthor.jsx","sourceRoot":"","sources":["../../../../../src/components/parts/janus-navigation-button/NavButtonAuthor.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,EAAiB,SAAS,EAAE,MAAM,OAAO,CAAC;AAGxD,MAAM,eAAe,GAAuD,CAAC,KAAK,EAAE,EAAE;IACpF,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAExB,MAAM,EACJ,KAAK,EACL,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,CAAC,EACL,KAAK,EACL,MAAM,EACN,SAAS,EACT,WAAW,EACX,OAAO,GAAG,IAAI,EACd,OAAO,GAAG,IAAI,EACd,SAAS,EACT,WAAW,EACX,QAAQ,GACT,GAAG,KAAK,CAAC;IAEV,MAAM,MAAM,GAAkB;QAC5B,KAAK;QACL,MAAM;QACN,MAAM,EAAE,MAAM;KACf,CAAC;IAEF,IAAI,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;QACvC,2CAA2C;QAC3C,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;KACtB;IAED,IAAI,SAAS,EAAE;QACb,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;KAC1B;IAED,IAAI,WAAW,EAAE;QACf,MAAM,CAAC,eAAe,GAAG,WAAW,CAAC;KACtC;IACD,MAAM,oBAAoB,GAAG,GAAG,EAAE;QAChC,MAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,YAAY,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,KAAe,EAAE,CAAC;SACjD;QACD,IAAI,MAAM,IAAI,SAAS,EAAE;YACvB,YAAY,CAAC,MAAM,GAAG,EAAE,KAAK,EAAE,MAAgB,EAAE,CAAC;SACnD;QACD,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC;IACF,SAAS,CAAC,GAAG,EAAE;QACb,qCAAqC;QACrC,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACrC,oBAAoB,EAAE,CAAC;IACzB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,WAAW,GAAG;QAClB,KAAK;QACL,YAAY,EAAE,SAAS;QACvB,QAAQ,EAAE,KAAK;KAChB,CAAC;IAEF,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC,CAClC;MAAA,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAC/D;QAAA,CAAC,KAAK,CACR;MAAA,EAAE,MAAM,CACV;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,yBAAyB,CAAC;AAEjD,eAAe,eAAe,CAAC","sourcesContent":["import { AuthorPartComponentProps } from 'components/parts/types/parts';\nimport React, { CSSProperties, useEffect } from 'react';\nimport { NavButtonModel } from './schema';\n\nconst NavButtonAuthor: React.FC<AuthorPartComponentProps<NavButtonModel>> = (props) => {\n  const { model } = props;\n\n  const {\n    title,\n    x = 0,\n    y = 0,\n    z = 0,\n    width,\n    height,\n    textColor,\n    buttonColor,\n    visible = true,\n    enabled = true,\n    ariaLabel,\n    transparent,\n    selected,\n  } = model;\n\n  const styles: CSSProperties = {\n    width,\n    height,\n    cursor: 'move',\n  };\n\n  if (transparent || !visible || !enabled) {\n    // TODO: some kind of strike through style?\n    styles.opacity = 0.5;\n  }\n\n  if (textColor) {\n    styles.color = textColor;\n  }\n\n  if (buttonColor) {\n    styles.backgroundColor = buttonColor;\n  }\n  const handleStylingChanges = () => {\n    const styleChanges: any = {};\n    if (width !== undefined) {\n      styleChanges.width = { value: width as number };\n    }\n    if (height != undefined) {\n      styleChanges.height = { value: height as number };\n    }\n    props.onResize({ id: `${props.id}`, settings: styleChanges });\n  };\n  useEffect(() => {\n    // all activities *must* emit onReady\n    props.onReady({ id: `${props.id}` });\n    handleStylingChanges();\n  }, []);\n\n  const buttonProps = {\n    title,\n    'aria-label': ariaLabel,\n    disabled: false,\n  };\n\n  return (\n    <div className={`navigation-button`}>\n      <button data-janus-type={tagName} {...buttonProps} style={styles}>\n        {title}\n      </button>\n    </div>\n  );\n};\n\nexport const tagName = 'janus-navigation-button';\n\nexport default NavButtonAuthor;\n"]}