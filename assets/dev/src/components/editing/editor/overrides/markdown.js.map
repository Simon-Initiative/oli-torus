{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/overrides/markdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { Range, Editor, Transforms } from 'slate';\nimport {\n  olCommandDesc as olCmd,\n  ulCommandDesc as ulCmd,\n} from 'components/editing/commands/ListsCmd';\nimport { commandDesc as codeCmd } from 'components/editing/commands/BlockcodeCmd';\nimport { commandDesc as quoteCmd } from 'components/editing/commands/BlockquoteCmd';\nimport { ReactEditor } from 'slate-react';\nimport { isTopLevel } from 'components/editing/utils';\nimport { CommandContext } from 'components/editing/commands/interfaces';\n\nconst SHORTCUTS = {\n  '#': 'h1',\n  '##': 'h2',\n  '*': 'ul',\n  '-': 'ul',\n  '+': 'ul',\n  '1)': 'ol',\n  '1.': 'ol',\n  '>': 'blockquote',\n  '``': 'code',\n};\n\nexport const withMarkdown = (context: CommandContext) => (editor: Editor & ReactEditor) => {\n  const { insertText } = editor;\n  const blockTrigger = ' ';\n  const codeTrigger = '`';\n  const triggers = [blockTrigger, codeTrigger];\n\n  editor.insertText = (text) => {\n    const { selection } = editor;\n\n    const setNodes = (type: 'h1' | 'h2') => {\n      Transforms.setNodes(editor, { type }, { match: (n) => Editor.isBlock(editor, n) });\n    };\n\n    if (\n      isTopLevel(editor) &&\n      triggers.indexOf(text) > -1 &&\n      selection &&\n      Range.isCollapsed(selection)\n    ) {\n      const { anchor } = selection;\n      const block = Editor.above(editor, {\n        match: (n) => Editor.isBlock(editor, n),\n      });\n      const path = block ? block[1] : [];\n      const start = Editor.start(editor, path);\n      const range = { anchor, focus: start };\n      const beforeText = Editor.string(editor, range);\n      const type: string | undefined = (SHORTCUTS as any)[beforeText];\n\n      if (type) {\n        Transforms.select(editor, range);\n        Transforms.delete(editor);\n\n        switch (type) {\n          case 'h1':\n            return setNodes('h1');\n          case 'h2':\n            return setNodes('h2');\n          case 'ul':\n            return ulCmd.command.execute(context, editor);\n          case 'ol':\n            return olCmd.command.execute(context, editor);\n          case 'blockquote':\n            return quoteCmd.command.execute(context, editor);\n          case 'code':\n            return codeCmd.command.execute(context, editor);\n        }\n      }\n    }\n\n    insertText(text);\n  };\n\n  return editor;\n};\n"]}