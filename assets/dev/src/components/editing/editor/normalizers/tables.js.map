{"version":3,"file":"tables.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/normalizers/tables.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAsB,OAAO,EAAE,MAAM,OAAO,CAAC;AAChE,OAAO,EAAE,EAAE,EAAE,MAAM,uCAAuC,CAAC;AAE3D,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,IAAU,EAAE,IAAU,EAAE,EAAE;IAClE,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;QACpD,0DAA0D;QAE1D,+DAA+D;QAC/D,oCAAoC;QACpC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;QACb,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC5B,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;YAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;YAE9B,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;gBACd,GAAG,GAAG,KAAK,CAAC;aACb;iBAAM,IAAI,KAAK,KAAK,GAAG,EAAE;gBACxB,SAAS,GAAG,IAAI,CAAC;gBAEjB,IAAI,KAAK,GAAG,GAAG,EAAE;oBACf,GAAG,GAAG,KAAK,CAAC;iBACb;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAa,EAAE,EAAE;gBAC3C,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;gBAC9B,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAE5B,iDAAiD;gBACjD,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBAErC,6DAA6D;gBAC7D,mBAAmB;gBACnB,OAAO,KAAK,GAAG,GAAG,EAAE;oBAClB,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;oBACzD,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;iBACnB;YACH,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC,CAAC","sourcesContent":["import { Transforms, Node, Path, Editor, Element } from 'slate';\nimport { td } from 'data/content/model/elements/factories';\n\nexport const normalize = (editor: Editor, node: Node, path: Path) => {\n  if (Element.isElement(node) && node.type === 'table') {\n    // Ensure that the number of cells in each row is the same\n\n    // First get max count of cells in any row, and see if any rows\n    // have a different amount of cells.\n    let max = -1;\n    let anyDiffer = false;\n    node.children.forEach((row) => {\n      const children = row.children;\n      const count = children.length;\n\n      if (max === -1) {\n        max = count;\n      } else if (count !== max) {\n        anyDiffer = true;\n\n        if (count > max) {\n          max = count;\n        }\n      }\n    });\n\n    if (anyDiffer) {\n      node.children.forEach((row, index: number) => {\n        const children = row.children;\n        let count = children.length;\n\n        // Get a path to the first td element in this row\n        const thisPath = [...path, index, 0];\n\n        // Add as many empty td elements to bring this row back up to\n        // the max td count\n        while (count < max) {\n          Transforms.insertNodes(editor, td(''), { at: thisPath });\n          count = count + 1;\n        }\n      });\n    }\n  }\n};\n"]}