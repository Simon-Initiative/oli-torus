{"version":3,"file":"normalizer.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/normalizers/normalizer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,8CAA8C,CAAC;AAC3F,OAAO,EAAE,CAAC,EAAE,MAAM,uCAAuC,CAAC;AAC1D,OAAO,EAAgB,MAAM,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,MAAM,IAAI,WAAW,EAAE,OAAO,EAAmB,IAAI,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAQ1F,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;AAElD,MAAM,qBAAqB,GAAG,SAAS,CAAC,GAAG,CAAS;IAClD,OAAO;IACP,SAAS;IACT,OAAO;IACP,YAAY;IACZ,MAAM;IACN,OAAO;IACP,QAAQ;CACT,CAAC,CAAC;AAEH,MAAM,UAAU,iBAAiB,CAC/B,MAAiC,EACjC,UAA6B,EAAE;IAE/B,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IAEjC,MAAM,CAAC,aAAa,GAAG,CAAC,KAAsB,EAAE,EAAE;;QAChD,IAAI;YACF,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC;YAE3B,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAc,CAAC,EAAE;gBAC1E,IAAI,CAAC,CAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,0CAAE,QAAQ,CAAC,IAAI,CAAC,IAAc,CAAC,CAAA,EAAE;oBACtD,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC7C,OAAO;iBACR;aACF;YAED,6DAA6D;YAC7D,0DAA0D;YAC1D,+CAA+C;YAC/C,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAErD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE;oBACjD,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC3F;gBACD,OAAO,CAAC,8DAA8D;aACvE;YAED,uCAAuC;YACvC,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBACrC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC9D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBACjC,MAAM,MAAM,GAAkB,MAAc,CAAC,MAAM,CAAC,IAAc,CAAC,CAAC;oBACpE,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAE,MAAM,CAAC,aAAqB,CAAC,IAAI,CAAC,IAAc,CAAC,EAAE;wBAClF,4EAA4E;wBAC5E,mEAAmE;wBACnE,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;4BAC/C,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;4BACnD,OAAO;yBACR;wBAED,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;wBAC7C,OAAO,CAAC,8DAA8D;qBACvE;iBACF;aACF;YAED,kCAAkC;YAClC,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAE,MAAc,CAAC,IAAI,CAAC,IAAc,CAAC,CAAC,UAAU,EAAE;gBACzF,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAClD,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAChC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC7C,OAAO,CAAC,8DAA8D;iBACvE;aACF;YAED,mEAAmE;YACnE,2CAA2C;YAE3C,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAElD,qFAAqF;YACrF,kEAAkE;YAClE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACtD,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE3D,IAAI,QAAQ,KAAK,SAAS,EAAE;oBAC1B,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oBAC5B,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;wBAC1D,IAAI,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;4BACpF,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BAE9E,OAAO,CAAC,2DAA2D;yBACpE;qBACF;iBACF;aACF;YAED,uCAAuC;YACvC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACpC;QAAC,OAAO,CAAC,EAAE;YACV,2BAA2B;YAC3B,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAClB;QACD,aAAa,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { normalize as tableNormalize } from 'components/editing/editor/normalizers/tables';\nimport { p } from 'data/content/model/elements/factories';\nimport { SchemaConfig, schema } from 'data/content/model/schema';\nimport * as Immutable from 'immutable';\nimport { Editor as SlateEditor, Element, Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\nexport interface NormalizerContext {\n  // Node types normally not allowed in an editor\n  whitelist?: string[];\n}\n\nconst restrictedElements = new Set(['input_ref']);\n\nconst spacesRequiredBetween = Immutable.Set<string>([\n  'image',\n  'youtube',\n  'audio',\n  'blockquote',\n  'code',\n  'table',\n  'iframe',\n]);\n\nexport function installNormalizer(\n  editor: SlateEditor & ReactEditor,\n  context: NormalizerContext = {},\n) {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = (entry: NodeEntry<Node>) => {\n    try {\n      const [node, path] = entry;\n\n      if (Element.isElement(node) && restrictedElements.has(node.type as string)) {\n        if (!context?.whitelist?.includes(node.type as string)) {\n          Transforms.removeNodes(editor, { at: path });\n          return;\n        }\n      }\n\n      // Ensure that we always have a paragraph as the last node in\n      // the document, otherwise it can be impossible for a user\n      // to position their cursor after the last node\n      if (SlateEditor.isEditor(node)) {\n        const last = node.children[node.children.length - 1];\n\n        if (!Element.isElement(last) || last.type !== 'p') {\n          Transforms.insertNodes(editor, p(), { mode: 'highest', at: SlateEditor.end(editor, []) });\n        }\n        return; // Return here is necessary to enable multi-pass normalization\n      }\n\n      // Check this node's parent constraints\n      if (SlateEditor.isBlock(editor, node)) {\n        const [parent, parentPath] = SlateEditor.parent(editor, path);\n        if (!SlateEditor.isEditor(parent)) {\n          const config: SchemaConfig = (schema as any)[parent.type as string];\n          if (Element.isElement(node) && !(config.validChildren as any)[node.type as string]) {\n            // Special case for code blocks -- they have two wrappers (code, code_line),\n            // so deletion removes the inner block and causes validation errors\n            if (node.type === 'p' && parent.type === 'code') {\n              Transforms.removeNodes(editor, { at: parentPath });\n              return;\n            }\n\n            Transforms.removeNodes(editor, { at: path });\n            return; // Return here is necessary to enable multi-pass normalization\n          }\n        }\n      }\n\n      // Check the top-level constraints\n      if (SlateEditor.isBlock(editor, node) && !(schema as any)[node.type as string].isTopLevel) {\n        const [parent] = SlateEditor.parent(editor, path);\n        if (SlateEditor.isEditor(parent)) {\n          Transforms.unwrapNodes(editor, { at: path });\n          return; // Return here is necessary to enable multi-pass normalization\n        }\n      }\n\n      // Ensure that certain blocks types, when found next to each other,\n      // get a paragraph inserted in between them\n\n      const [parent] = SlateEditor.parent(editor, path);\n\n      // For every block that has a next sibling, look to see if this block and the sibling\n      // are both block types that need to have whitespace between them.\n      if (path[path.length - 1] + 1 < parent.children.length) {\n        const nextItem = SlateEditor.node(editor, Path.next(path));\n\n        if (nextItem !== undefined) {\n          const [nextNode] = nextItem;\n          if (Element.isElement(node) && Element.isElement(nextNode)) {\n            if (spacesRequiredBetween.has(nextNode.type) && spacesRequiredBetween.has(node.type)) {\n              Transforms.insertNodes(editor, p(), { mode: 'highest', at: Path.next(path) });\n\n              return; // Return here necessary to enable multi-pass normalization\n            }\n          }\n        }\n      }\n\n      // Run any element specific normalizers\n      tableNormalize(editor, node, path);\n    } catch (e) {\n      // tslint:disable-next-line\n      console.error(e);\n    }\n    normalizeNode(entry);\n  };\n}\n"]}