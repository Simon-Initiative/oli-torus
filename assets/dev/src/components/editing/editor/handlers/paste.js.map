{"version":3,"file":"paste.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/handlers/paste.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAyB,MAAM,OAAO,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,IAAI,MAAM,YAAY,CAAC;AAC9B,OAAO,EAAE,KAAK,EAAE,MAAM,uCAAuC,CAAC;AAE9D,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,MAAmB,EACnB,CAAuC,EACvC,WAAmB,EACnB,EAAE;IACF,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE;QACpB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,qEAAqE;IACrE,mDAAmD;IACnD,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,MAAM,KAAK,GAAG,MAAM;SACjB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QAClC,2EAA2E;QAC3E,kDAAkD;SACjD,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;SAC1B,GAAG,CAAC,CAAC,KAAW,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAEjF,OAAO,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC;SACnC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CACtB,aAAa,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAuB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CACtF;SACA,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,CAAC,CAAA,CAAC","sourcesContent":["import { Transforms, Editor as SlateEditor } from 'slate';\nimport { uploadFiles } from 'components/media/manager/upload';\nimport guid from 'utils/guid';\nimport { image } from 'data/content/model/elements/factories';\n\nexport const onPaste = async (\n  editor: SlateEditor,\n  e: React.ClipboardEvent<HTMLDivElement>,\n  projectSlug: string,\n) => {\n  if (!e.clipboardData) {\n    return Promise.resolve();\n  }\n\n  // The clipboard item 'type' attr is a mime-type. look for image/xxx.\n  // 'Rich' images e.g. from google docs do not work.\n  const images = [...e.clipboardData.items].filter(({ type }) => type.includes('image/'));\n  if (images.length === 0) {\n    return Promise.resolve();\n  }\n\n  const files = images\n    .map((image) => image.getAsFile())\n    // copied images have a default name of \"image.\" This causes duplicate name\n    // conflicts on the server, so rename with a GUID.\n    .filter((image) => !!image)\n    .map((image: File) => new File([image], image?.name.replace(/[^.]*/, guid())));\n\n  return uploadFiles(projectSlug, files)\n    .then((uploadedFiles) =>\n      uploadedFiles.map((file: any) => file.url).filter((url: string | undefined) => !!url),\n    )\n    .then((urls) => urls.forEach((url: string) => Transforms.insertNodes(editor, image(url))));\n};\n"]}