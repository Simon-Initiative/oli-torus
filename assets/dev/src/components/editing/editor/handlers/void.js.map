{"version":3,"file":"void.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/handlers/void.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAU,MAAM,OAAO,CAAC;AAExD,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAgB,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,CAAC,EAAE,MAAM,uCAAuC,CAAC;AAE1D,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,CAAgB,EAAE,EAAE;IAC5D,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;QACrB,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KAC9B;AACH,CAAC,CAAC;AAEF,kEAAkE;AAClE,4BAA4B;AAC5B,SAAS,iBAAiB,CAAC,MAAc,EAAE,EAAiB;IAC1D,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QAC3D,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3B,MAAM,UAAU,GAAiB,MAAM,CAAC,QAAQ,CAAC,CAAC;YAElD,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAChD,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;iBACpB,CAAC,CAAC;gBAEH,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import { Transforms, Range, Path, Editor } from 'slate';\nimport { KeyboardEvent } from 'react';\nimport { getNearestBlock } from 'components/editing/utils';\nimport { ReactEditor } from 'slate-react';\nimport { schema, SchemaConfig } from 'data/content/model/schema';\nimport { p } from 'data/content/model/elements/factories';\n\nexport const onKeyDown = (editor: Editor, e: KeyboardEvent) => {\n  if (e.key === 'Enter') {\n    handleVoidNewline(editor, e);\n  }\n};\n\n// Pressing the Enter key on any void block should insert an empty\n// paragraph after that node\nfunction handleVoidNewline(editor: Editor, _e: KeyboardEvent) {\n  if (editor.selection && Range.isCollapsed(editor.selection)) {\n    getNearestBlock(editor).lift((node) => {\n      const nodeType = node.type;\n      const schemaItem: SchemaConfig = schema[nodeType];\n\n      if (schemaItem.isVoid) {\n        const path = ReactEditor.findPath(editor, node);\n        Transforms.insertNodes(editor, p(), {\n          at: Path.next(path),\n        });\n\n        Transforms.select(editor, Path.next(path));\n      }\n    });\n  }\n}\n"]}