{"version":3,"file":"hotkey.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/handlers/hotkey.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,sCAAsC,CAAC;AAClE,OAAO,EAAE,WAAW,IAAI,OAAO,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAU,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAG9C,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACvC,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACzC,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACvC,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACvC,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,CAAgB,EAAE,cAA8B,EAAE,EAAE;IAChG,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;QACnB,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC9B;SAAM,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE;QAC5B,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KAC1B;SAAM,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;QAC1B,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC5B;SAAM,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;QAC1B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;KACjD;SAAM,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE;QACzB,2DAA2D;QAC3D,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QAC7B,IAAI,SAAS,EAAE;YACb,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;gBAClC,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;oBAC9B,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBAChC;aACF;SACF;KACF;AACH,CAAC,CAAC","sourcesContent":["import isHotkey from 'is-hotkey';\nimport { toggleMark } from 'components/editing/commands/commands';\nimport { commandDesc as linkCmd } from 'components/editing/commands/LinkCmd';\nimport { Editor, Element, Node } from 'slate';\nimport { CommandContext } from 'components/editing/commands/interfaces';\n\nconst isBoldHotkey = isHotkey('mod+b');\nconst isItalicHotkey = isHotkey('mod+i');\nconst isCodeHotkey = isHotkey('mod+;');\nconst isLinkHotkey = isHotkey('mod+l');\nconst isDeleteKey = isHotkey(['Backspace', 'Delete']);\n\nexport const hotkeyHandler = (editor: Editor, e: KeyboardEvent, commandContext: CommandContext) => {\n  if (isBoldHotkey(e)) {\n    toggleMark(editor, 'strong');\n  } else if (isItalicHotkey(e)) {\n    toggleMark(editor, 'em');\n  } else if (isCodeHotkey(e)) {\n    toggleMark(editor, 'code');\n  } else if (isLinkHotkey(e)) {\n    linkCmd.command.execute(commandContext, editor);\n  } else if (isDeleteKey(e)) {\n    // Fix a slate bug with deleting selected inline void nodes\n    const { selection } = editor;\n    if (selection) {\n      const currentNode = Node.parent(editor, selection.anchor.path);\n      if (Element.isElement(currentNode)) {\n        if (editor.isVoid(currentNode)) {\n          e.preventDefault();\n          editor.deleteBackward('block');\n        }\n      }\n    }\n  }\n};\n"]}