{"version":3,"file":"quote.js","sourceRoot":"","sources":["../../../../../../src/components/editing/editor/handlers/quote.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,IAAI,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAEtF,OAAO,EAAE,CAAC,IAAI,SAAS,EAAE,MAAM,uCAAuC,CAAC;AAEvE,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAmB,EAAE,CAAgB,EAAE,EAAE;IACjE,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;QACrB,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KAC9B;AACH,CAAC,CAAC;AAEF,SAAS,iBAAiB,CAAC,MAAmB,EAAE,CAAgB;IAC9D,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QAC3D,MAAM,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE;YAC7C,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY;SAC9D,CAAC,CAAC;QAEH,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC;YAC5B,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO;aACR;YACD,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;YAEnB,IACE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpB,CAAC,CAAC,IAAI,KAAK,GAAG;gBACd,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC1B,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,EACzB;gBACA,iDAAiD;gBACjD,mCAAmC;gBACnC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAE/B,mCAAmC;gBACnC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;oBAC1C,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;iBACpB,CAAC,CAAC;gBACH,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE3C,CAAC,CAAC,cAAc,EAAE,CAAC;aACpB;SACF;KACF;AACH,CAAC","sourcesContent":["import { Transforms, Range, Path, Editor as SlateEditor, Element, Text } from 'slate';\nimport { KeyboardEvent } from 'react';\nimport { p as paragraph } from 'data/content/model/elements/factories';\n\nexport const onKeyDown = (editor: SlateEditor, e: KeyboardEvent) => {\n  if (e.key === 'Enter') {\n    handleTermination(editor, e);\n  }\n};\n\nfunction handleTermination(editor: SlateEditor, e: KeyboardEvent) {\n  if (editor.selection && Range.isCollapsed(editor.selection)) {\n    const [quoteMatch] = SlateEditor.nodes(editor, {\n      match: (n) => Element.isElement(n) && n.type === 'blockquote',\n    });\n\n    if (quoteMatch) {\n      const [, path] = quoteMatch;\n      const pMatch = SlateEditor.above(editor);\n\n      if (!pMatch) {\n        return;\n      }\n      const [p] = pMatch;\n\n      if (\n        Element.isElement(p) &&\n        p.type === 'p' &&\n        Text.isText(p.children[0]) &&\n        p.children[0].text === ''\n      ) {\n        // remove the blockquote item and add a paragraph\n        // outside of the parent blockquote\n        Transforms.removeNodes(editor);\n\n        // Insert it ahead of the next node\n        Transforms.insertNodes(editor, paragraph(), {\n          at: Path.next(path),\n        });\n        Transforms.select(editor, Path.next(path));\n\n        e.preventDefault();\n      }\n    }\n  }\n}\n"]}