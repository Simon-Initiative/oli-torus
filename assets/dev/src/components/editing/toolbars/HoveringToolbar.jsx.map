{"version":3,"file":"HoveringToolbar.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/toolbars/HoveringToolbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ArrowContainer, ContentLocationGetter, Popover } from 'react-tiny-popover';\nimport { ReactEditor, useSlate } from 'slate-react';\n\ntype HoveringToolbarProps = {\n  isOpen: (editor: ReactEditor) => boolean;\n  showArrow?: boolean;\n  children: JSX.Element;\n  onClickOutside?: (e: MouseEvent) => void;\n  contentLocation?: ContentLocationGetter;\n  target?: JSX.Element;\n  parentRef?: React.RefObject<HTMLElement>;\n};\nexport const HoveringToolbar = React.memo((props: HoveringToolbarProps) => {\n  const editor = useSlate();\n\n  const arrowSize = 8;\n\n  const content = (\n    <div className=\"hovering-toolbar\" onMouseDown={(e) => e.preventDefault()}>\n      <div className=\"btn-group btn-group-sm\" role=\"group\">\n        {props.children}\n      </div>\n    </div>\n  );\n\n  const target = props.target || <span style={{ userSelect: 'none', display: 'none' }}></span>;\n\n  if (!props.isOpen(editor)) {\n    return target;\n  }\n\n  return (\n    <Popover\n      isOpen={props.isOpen(editor)}\n      align={'center'}\n      padding={5}\n      parentElement={props.parentRef?.current || undefined}\n      content={({ childRect, popoverRect }) => {\n        if (props.showArrow) {\n          return (\n            <ArrowContainer\n              position={'top'}\n              childRect={childRect}\n              popoverRect={popoverRect}\n              arrowSize={arrowSize}\n              arrowColor=\"rgb(38,38,37)\"\n              // Position the arrow in the middle of the popover\n              arrowStyle={{ left: popoverRect.width / 2 - arrowSize }}\n            >\n              {content}\n            </ArrowContainer>\n          );\n        }\n        return content;\n      }}\n      contentLocation={\n        props.contentLocation\n          ? props.contentLocation\n          : ({ popoverRect }) => {\n              // Position the popover above the center of the selection\n              const native = window.getSelection();\n              if (!native) return { top: 0, left: 0 };\n              const range = native.getRangeAt(0);\n              const selectionRect = range.getBoundingClientRect();\n\n              return {\n                top: selectionRect.top + window.pageYOffset - 56,\n                left:\n                  selectionRect.left +\n                  window.pageXOffset +\n                  selectionRect.width / 2 -\n                  popoverRect.width / 2,\n              };\n            }\n      }\n    >\n      {target}\n    </Popover>\n  );\n});\nHoveringToolbar.displayName = 'HoveringToolbar';\n"]}