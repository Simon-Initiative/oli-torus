{"version":3,"file":"Toolbar.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/toolbars/formatting/Toolbar.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC,OAAO,EAAE,aAAa,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAM1F,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAA2B,EAAE,EAAE;IAC/D,MAAM,MAAM,GAAG,QAAQ,EAAE,CAAC;IAE1B,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAoB,EAAE,QAAQ,EAAE,EAAE;QAChF,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAkB,EAAE,OAAO,EAAE,EAAE;YAC9D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;gBACzC,OAAO,GAAG,CAAC;aACZ;YACD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAEhD,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,UAAU;gBACjB,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;gBAChD,GAAG,EAAE,WAAW;gBAChB,WAAW;gBACX,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC1B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,OAAO,EAAE,KAAK,CAAC,cAAc;gBAC7B,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE,KAAY;aACvB,CAAC;YAEF,OAAO,GAAG,CAAC,MAAM,CAAC;gBAChB,OAAO,CAAC,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,CAAC,CAAC,CAC/C,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC,EAAG,CAC9B,CAAC,CAAC,CAAC,CACF,CAAC,qBAAqB,CAAC,IAAI,MAAM,CAAC,EAAG,CACtC;aACF,CAAC,CAAC;QACL,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1D,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,CAAC,KAAK,CAAC,QAAQ,CACb;MAAA,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE;YACrD,IAAI,CAAC,KAAK,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC5B;YACD,OAAO,GAAG;iBACP,MAAM,CAAC,OAAO,CAAC;iBACf,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC,EAAE,EAAE,CAAC,CACR;IAAA,EAAE,KAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { useSlate } from 'slate-react';\nimport { CommandContext, CommandDesc } from '../../commands/interfaces';\nimport { ToolbarButton, DropdownToolbarButton } from 'components/editing/toolbars/common';\n\nexport type HoveringToolbarProps = {\n  commandContext: CommandContext;\n  commandDescs: CommandDesc[][];\n};\nexport const FormattingToolbar = (props: HoveringToolbarProps) => {\n  const editor = useSlate();\n\n  const buttonGroups = props.commandDescs.reduce((acc: JSX.Element[][], cmdDescs) => {\n    const buttons = cmdDescs.reduce((acc: JSX.Element[], cmdDesc) => {\n      if (!cmdDesc.command.precondition(editor)) {\n        return acc;\n      }\n      const description = cmdDesc.description(editor);\n\n      const shared = {\n        style: 'btn-dark',\n        active: cmdDesc.active && cmdDesc.active(editor),\n        key: description,\n        description,\n        icon: cmdDesc.icon(editor),\n        command: cmdDesc.command,\n        context: props.commandContext,\n        tooltip: description,\n        position: 'top' as any,\n      };\n\n      return acc.concat([\n        cmdDesc.command.obtainParameters === undefined ? (\n          <ToolbarButton {...shared} />\n        ) : (\n          <DropdownToolbarButton {...shared} />\n        ),\n      ]);\n    }, []);\n\n    return buttons.length > 0 ? acc.concat([buttons]) : acc;\n  }, []);\n\n  return (\n    <React.Fragment>\n      {buttonGroups.reduce((acc, buttons, i, buttonGroups) => {\n        if (i === buttonGroups.length - 1) {\n          return acc.concat(buttons);\n        }\n        return acc\n          .concat(buttons)\n          .concat([<div key={'spacer-' + i} className=\"button-separator\"></div>]);\n      }, [])}\n    </React.Fragment>\n  );\n};\n"]}