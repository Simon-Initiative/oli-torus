{"version":3,"file":"common.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/toolbars/common.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Popover from 'react-tiny-popover';\nimport { useSlate } from 'slate-react';\nimport { Command, CommandContext } from '../commands/interfaces';\n\nexport function hideToolbar(el: HTMLElement) {\n  el.style.display = 'none';\n}\n\nexport function showToolbar(el: HTMLElement) {\n  el.style.display = 'block';\n}\n\nconst buttonContent = (icon: string, description: string | undefined) =>\n  icon ? (\n    <span className=\"material-icons\">{icon}</span>\n  ) : (\n    <span className=\"toolbar-button-text\">{description}</span>\n  );\n\ninterface ToolbarButtonProps {\n  icon: string;\n  command: Command;\n  context: CommandContext;\n  description?: string;\n  tooltip?: string;\n  style?: string;\n  active?: boolean;\n  disabled?: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n  setParentPopoverOpen?: (b: boolean) => void;\n  parentElement?: string;\n}\n\nexport const ToolbarButton = ({\n  icon,\n  command,\n  style,\n  context,\n  active,\n  description,\n  setParentPopoverOpen,\n  tooltip,\n  position,\n  parentElement,\n}: ToolbarButtonProps) => {\n  const editor = useSlate();\n\n  return (\n    <button\n      data-container={parentElement && `#${parentElement}`}\n      data-toggle=\"tooltip\"\n      ref={(r) => ($(r as any) as any).tooltip()}\n      data-placement={position === undefined ? 'right' : position}\n      title={tooltip}\n      className={`btn btn-sm btn-light ${style || ''} ${(active && 'active') || ''}`}\n      onClick={(_e) => {\n        setParentPopoverOpen && setParentPopoverOpen(false);\n        command.execute(context, editor);\n      }}\n    >\n      {buttonContent(icon, description)}\n    </button>\n  );\n};\n\nexport const DropdownToolbarButton = ({\n  icon,\n  command,\n  style,\n  context,\n  active,\n  description,\n  setParentPopoverOpen,\n  tooltip,\n  parentElement,\n}: ToolbarButtonProps) => {\n  const editor = useSlate();\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n\n  const onDone = (params: any) => {\n    setParentPopoverOpen && setParentPopoverOpen(false);\n    setIsPopoverOpen(false);\n    command.execute(context, editor, params);\n  };\n  const onCancel = () => {\n    setParentPopoverOpen && setParentPopoverOpen(false);\n    setIsPopoverOpen(false);\n  };\n\n  return (\n    <Popover.Popover\n      onClickOutside={(_e) => setIsPopoverOpen(false)}\n      isOpen={isPopoverOpen}\n      padding={5}\n      positions={['right']}\n      reposition={false}\n      content={() => <div>{command.obtainParameters?.(context, editor, onDone, onCancel)}</div>}\n    >\n      <button\n        data-container={parentElement || false}\n        data-toggle=\"tooltip\"\n        data-placement=\"top\"\n        title={tooltip}\n        className={`btn btn-sm btn-light ${style || ''} ${(active && 'active') || ''}`}\n        onClick={() => setIsPopoverOpen(!isPopoverOpen)}\n        type=\"button\"\n      >\n        {buttonContent(icon, description)}\n      </button>\n    </Popover.Popover>\n  );\n};\n\nexport const Spacer = () => {\n  return <span style={{ minWidth: '5px', maxWidth: '5px' }} />;\n};\n"]}