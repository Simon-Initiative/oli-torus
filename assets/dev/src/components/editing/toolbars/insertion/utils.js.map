{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/components/editing/toolbars/insertion/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactEditor } from 'slate-react';\nimport { Editor, Element, Range, Text } from 'slate';\nimport {\n  getHighestTopLevel,\n  getNearestBlock,\n  isActive,\n  isTopLevel,\n} from 'components/editing/utils';\n\nexport function shouldShowInsertionToolbar(editor: Editor) {\n  const { selection } = editor;\n  if (!selection) return false;\n  const isSelectionCollapsed = ReactEditor.isFocused(editor) && Range.isCollapsed(selection);\n\n  const isInParagraph =\n    [\n      ...Editor.nodes(editor, {\n        match: (n) => {\n          if (!Element.isElement(n) || n.type !== 'p') return false;\n          return Text.isText(n.children[0]) && n.children[0].text === '';\n        },\n      }),\n    ].length > 0;\n\n  const isTopLevelOrInTable =\n    isTopLevel(editor) ||\n    getHighestTopLevel(editor).caseOf({\n      just: (n) => Element.isElement(n) && n.type === 'table',\n      nothing: () => false,\n    });\n\n  const isInValidParents = isInParagraph && isTopLevelOrInTable;\n\n  return isSelectionCollapsed && isInValidParents;\n}\n\nexport function positionInsertion(el: HTMLElement, editor: Editor) {\n  getNearestBlock(editor).lift((block) => {\n    el.style.position = 'absolute';\n    el.style.opacity = '1';\n    const blockNode = $(ReactEditor.toDOMNode(editor, block));\n\n    el.style.top = blockNode.position().top + 'px';\n\n    // There may be a better way to do this, but for now we're special-casing tables\n    getHighestTopLevel(editor).lift((topLevel) => {\n      const topLevelNode = $(ReactEditor.toDOMNode(editor, topLevel));\n      el.style.left = topLevelNode.position().left - 10 + 'px';\n      if (isActive(editor, ['table'])) {\n        const [match] = Editor.nodes(editor, {\n          match: (n) => Element.isElement(n) && n.type === 'tr',\n        });\n        if (!match) {\n          return;\n        }\n        const [tr] = match;\n        el.style.top =\n          blockNode.position().top +\n          topLevelNode.position().top +\n          $(ReactEditor.toDOMNode(editor, tr)).position().top +\n          2 +\n          'px';\n      }\n    });\n  });\n}\n"]}