{"version":3,"file":"ListsCmd.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/commands/ListsCmd.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Transforms, Editor as SlateEditor, Element } from 'slate';\nimport { Command, CommandDesc } from 'components/editing/commands/interfaces';\nimport { isActiveList, isActive, isTopLevel } from 'components/editing/utils';\nimport guid from 'utils/guid';\n\nconst listCommandMaker = (listType: 'ul' | 'ol'): Command => {\n  return {\n    execute: (context, editor) => {\n      SlateEditor.withoutNormalizing(editor, () => {\n        const active = isActiveList(editor);\n\n        // Not a list, create one\n        if (!active) {\n          Transforms.setNodes(editor, { type: 'li' });\n          Transforms.wrapNodes(editor, { type: listType, id: guid(), children: [] });\n          return;\n        }\n\n        // Wrong type of list, toggle\n        if (!isActive(editor, [listType])) {\n          Transforms.setNodes(\n            editor,\n            { type: listType },\n            {\n              match: (n) => Element.isElement(n) && n.type === (listType === 'ol' ? 'ul' : 'ol'),\n              mode: 'all',\n            },\n          );\n          return;\n        }\n\n        // Is a list, unwrap it\n        Transforms.unwrapNodes(editor, {\n          match: (n) => Element.isElement(n) && (n.type === 'ul' || n.type === 'ol'),\n          split: true,\n          mode: 'all',\n        });\n\n        Transforms.setNodes(editor, { type: 'p' });\n      });\n    },\n    precondition: (editor) => {\n      return (isTopLevel(editor) && isActive(editor, ['p'])) || isActiveList(editor);\n    },\n  };\n};\n\nexport const ulCommandDesc: CommandDesc = {\n  type: 'CommandDesc',\n  icon: () => 'format_list_bulleted',\n  description: () => 'Unordered List (* )',\n  command: listCommandMaker('ul'),\n  active: (editor) => isActive(editor, ['ul']),\n};\n\nexport const olCommandDesc: CommandDesc = {\n  type: 'CommandDesc',\n  icon: () => 'format_list_numbered',\n  description: () => 'Ordered List (1. )',\n  command: listCommandMaker('ol'),\n  active: (editor) => isActive(editor, ['ol']),\n};\n"]}