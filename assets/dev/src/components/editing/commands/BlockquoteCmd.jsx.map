{"version":3,"file":"BlockquoteCmd.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/commands/BlockquoteCmd.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAEhE,OAAO,IAAI,MAAM,YAAY,CAAC;AAE9B,MAAM,OAAO,GAAY;IACvB,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3B,MAAM,CAAC,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE;YACrC,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAC9C,IAAI,MAAM,EAAE;gBACV,OAAO,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE;oBACpC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY;iBAC9D,CAAC,CAAC;aACJ;YAED,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3C,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;IACL,CAAC;IACD,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;QACvB,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAC7F,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAgB;IACtC,IAAI,EAAE,aAAa;IACnB,IAAI,EAAE,GAAG,EAAE,CAAC,cAAc;IAC1B,WAAW,EAAE,GAAG,EAAE,CAAC,YAAY;IAC/B,OAAO;IACP,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC;CACzC,CAAC","sourcesContent":["import { Transforms, Editor, Element } from 'slate';\nimport { isTopLevel, isActive } from 'components/editing/utils';\nimport { CommandDesc, Command } from 'components/editing/commands/interfaces';\nimport guid from 'utils/guid';\n\nconst command: Command = {\n  execute: (context, editor) => {\n    Editor.withoutNormalizing(editor, () => {\n      const active = isActive(editor, 'blockquote');\n      if (active) {\n        return Transforms.unwrapNodes(editor, {\n          match: (n) => Element.isElement(n) && n.type === 'blockquote',\n        });\n      }\n\n      Transforms.setNodes(editor, { type: 'p' });\n      Transforms.wrapNodes(editor, { type: 'blockquote', id: guid(), children: [] });\n    });\n  },\n  precondition: (editor) => {\n    return (isTopLevel(editor) && isActive(editor, ['p'])) || isActive(editor, ['blockquote']);\n  },\n};\n\nexport const commandDesc: CommandDesc = {\n  type: 'CommandDesc',\n  icon: () => 'format_quote',\n  description: () => 'Quote (> )',\n  command,\n  active: (e) => isActive(e, 'blockquote'),\n};\n"]}