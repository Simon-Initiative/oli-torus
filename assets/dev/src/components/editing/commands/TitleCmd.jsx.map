{"version":3,"file":"TitleCmd.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/commands/TitleCmd.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAU,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAGjE,MAAM,eAAe,GAAG;IACtB,CAAC,EAAE,IAAI;IACP,EAAE,EAAE,IAAI;IACR,uCAAuC;IACvC,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;CACT,CAAC;AAEF,MAAM,YAAY,GAAG,CAAC,MAAc,EAAE,EAAE,CACtC,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAC7B,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAK,eAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACtF,OAAO,EAAE,GAAG,EAAE,CAAC,GAAG;CACnB,CAAC,CAAC;AAEL,MAAM,OAAO,GAAY;IACvB,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3B,MAAM,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7B,QAAQ,QAAQ,EAAE;gBAChB,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI;oBACP,OAAO,GAAG,CAAC;gBACb,KAAK,IAAI;oBACP,OAAO,IAAI,CAAC;gBACd;oBACE,OAAO,IAAI,CAAC;aACf;QACH,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QAEzB,UAAU,CAAC,QAAQ,CACjB,MAAM,EACN,EAAE,IAAI,EAAE,QAAQ,EAAE,EAClB,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAK,eAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAC3E,CAAC;IACJ,CAAC;IACD,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;QACvB,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAC9E,CAAC;CACF,CAAC;AAEF,MAAM,IAAI,GAAG,CAAC,MAAc,EAAE,EAAE;IAC9B,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAClC,QAAQ,IAAI,EAAE;QACZ,KAAK,IAAI;YACP,OAAO,OAAO,CAAC;QACjB,KAAK,IAAI;YACP,OAAO,aAAa,CAAC;QACvB;YACE,OAAO,OAAO,CAAC;KAClB;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAgB;IACtC,IAAI,EAAE,aAAa;IACnB,IAAI;IACJ,WAAW,EAAE,GAAG,EAAE,CAAC,iBAAiB;IACpC,OAAO;IACP,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CACnD,CAAC","sourcesContent":["import { Editor, Element, Transforms } from 'slate';\nimport { getNearestBlock, isActive, isTopLevel } from '../utils';\nimport { Command, CommandDesc } from 'components/editing/commands/interfaces';\n\nconst parentTextTypes = {\n  p: true,\n  h1: true,\n  // h2 through h6 are for legacy support\n  h2: true,\n  h3: true,\n  h4: true,\n  h5: true,\n  h6: true,\n};\n\nconst selectedType = (editor: Editor) =>\n  getNearestBlock(editor).caseOf({\n    just: (n) => (Element.isElement(n) && (parentTextTypes as any)[n.type] ? n.type : 'p'),\n    nothing: () => 'p',\n  });\n\nconst command: Command = {\n  execute: (context, editor) => {\n    const nextType = ((selected) => {\n      switch (selected) {\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          return 'p';\n        case 'h1':\n          return 'h2';\n        default:\n          return 'h1';\n      }\n    })(selectedType(editor));\n\n    Transforms.setNodes(\n      editor,\n      { type: nextType },\n      { match: (n) => Element.isElement(n) && (parentTextTypes as any)[n.type] },\n    );\n  },\n  precondition: (editor) => {\n    return isTopLevel(editor) && isActive(editor, Object.keys(parentTextTypes));\n  },\n};\n\nconst icon = (editor: Editor) => {\n  const type = selectedType(editor);\n  switch (type) {\n    case 'h1':\n      return 'title';\n    case 'h2':\n      return 'text_fields';\n    default:\n      return 'title';\n  }\n};\n\nexport const commandDesc: CommandDesc = {\n  type: 'CommandDesc',\n  icon,\n  description: () => 'Title (# or ##)',\n  command,\n  active: (editor) => isActive(editor, ['h1', 'h2']),\n};\n"]}