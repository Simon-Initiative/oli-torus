{"version":3,"file":"AudioCmd.jsx","sourceRoot":"","sources":["../../../../../src/components/editing/commands/AudioCmd.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, Transforms } from 'slate';\nimport * as ContentModel from 'data/content/model/elements/types';\nimport { MIMETYPE_FILTERS, SELECTION_TYPES } from 'components/media/manager/MediaManager';\nimport ModalSelection from 'components/modal/ModalSelection';\nimport { MediaManager } from 'components/media/manager/MediaManager.controller';\nimport { modalActions } from 'actions/modal';\nimport { MediaItem } from 'types/media';\nimport { Command, CommandDesc } from 'components/editing/commands/interfaces';\nimport { audio } from 'data/content/model/elements/factories';\n\nconst dismiss = () => (window as any).oliDispatch(modalActions.dismiss());\nconst display = (c: any) => (window as any).oliDispatch(modalActions.display(c));\n\nexport function selectAudio(\n  projectSlug: string,\n  model: ContentModel.Audio,\n): Promise<ContentModel.Audio> {\n  return new Promise((resolve, _reject) => {\n    const selected: { audio: null | ContentModel.Audio } = { audio: null };\n\n    const mediaLibrary = (\n      <ModalSelection\n        title=\"Embed audio\"\n        onInsert={() => {\n          dismiss();\n          if (selected.audio) resolve(selected.audio);\n        }}\n        onCancel={() => dismiss()}\n        disableInsert={true}\n      >\n        <MediaManager\n          projectSlug={projectSlug}\n          onEdit={() => {}}\n          mimeFilter={MIMETYPE_FILTERS.AUDIO}\n          selectionType={SELECTION_TYPES.SINGLE}\n          initialSelectionPaths={[model.src]}\n          onSelectionChange={(audios: MediaItem[]) => {\n            selected.audio = audio(audios[0].url);\n          }}\n        />\n      </ModalSelection>\n    );\n\n    display(mediaLibrary);\n  });\n}\n\nconst libraryCommand: Command = {\n  execute: (context, editor: Editor) => {\n    const at = editor.selection as any;\n    selectAudio(context.projectSlug, audio()).then((audio) =>\n      Transforms.insertNodes(editor, audio, { at }),\n    );\n  },\n  precondition: (_editor: Editor) => {\n    return true;\n  },\n};\n\nfunction createCustomEventCommand(onRequestMedia: (r: any) => Promise<string | boolean>) {\n  const customEventCommand: Command = {\n    execute: (_context, editor: Editor) => {\n      const at = editor.selection;\n      if (!at) return;\n\n      const request = {\n        type: 'MediaItemRequest',\n        mimeTypes: MIMETYPE_FILTERS.AUDIO,\n      };\n\n      onRequestMedia(request).then((r) => {\n        if (typeof r === 'string') {\n          Transforms.insertNodes(editor, audio(r), { at });\n        }\n      });\n    },\n    precondition: (_editor: Editor) => {\n      return true;\n    },\n  };\n  return customEventCommand;\n}\n\nexport function getCommand(onRequestMedia: any) {\n  const commandDesc: CommandDesc = {\n    type: 'CommandDesc',\n    icon: () => 'audiotrack',\n    description: () => 'Audio Clip',\n    command:\n      onRequestMedia === null || onRequestMedia === undefined\n        ? libraryCommand\n        : createCustomEventCommand(onRequestMedia),\n  };\n  return commandDesc;\n}\n"]}