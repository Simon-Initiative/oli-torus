{"version":3,"file":"TableCmd.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/commands/table/TableCmd.tsx"],"names":[],"mappings":"AACA,OAAO,EAAU,UAAU,EAAE,MAAM,OAAO,CAAC;AAC3C,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,MAAM,8CAA8C,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAEtD,MAAM,OAAO,GAAY;IACvB,OAAO,EAAE,CAAC,QAAa,EAAE,MAAc,EAAE,MAAW,EAAE,EAAE;QACtD,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,EAAE;YAAE,OAAO;QAChB,MAAM,IAAI,GAAQ,EAAE,CAAC;QAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE;YACvC,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC1C,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAClB;YACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;SACpB;QAED,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QACtB,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1C,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IACD,YAAY,EAAE,CAAC,MAAc,EAAE,EAAE;QAC/B,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IACD,2BAA2B;IAC3B,gBAAgB,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE;QACxD,2BAA2B;QAC3B,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,EAAG,CAAC;IACrF,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAgB;IACtC,IAAI,EAAE,aAAa;IACnB,IAAI,EAAE,GAAG,EAAE,CAAC,SAAS;IACrB,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO;IAC1B,OAAO;CACR,CAAC","sourcesContent":["import { CommandDesc, Command } from 'components/editing/commands/interfaces';\nimport { Editor, Transforms } from 'slate';\nimport { td, tr, table } from 'data/content/model/elements/factories';\nimport { SizePicker } from 'components/editing/commands/table/SizePicker';\nimport { isTopLevel } from 'components/editing/utils';\n\nconst command: Command = {\n  execute: (_context: any, editor: Editor, params: any) => {\n    const at = editor.selection;\n    if (!at) return;\n    const rows: any = [];\n\n    for (let i = 0; i < params.rows; i += 1) {\n      const tds = [];\n      for (let j = 0; j < params.columns; j += 1) {\n        tds.push(td(''));\n      }\n      rows.push(tr(tds));\n    }\n\n    const t = table(rows);\n    Transforms.insertNodes(editor, t, { at });\n    Transforms.deselect(editor);\n  },\n  precondition: (editor: Editor) => {\n    return isTopLevel(editor);\n  },\n  // eslint-disable-next-line\n  obtainParameters: (_context, _editor, onDone, onCancel) => {\n    // eslint-disable-next-line\n    return <SizePicker onTableCreate={(rows, columns) => onDone({ rows, columns })} />;\n  },\n};\n\nexport const commandDesc: CommandDesc = {\n  type: 'CommandDesc',\n  icon: () => 'grid_on',\n  description: () => 'Table',\n  command,\n};\n"]}