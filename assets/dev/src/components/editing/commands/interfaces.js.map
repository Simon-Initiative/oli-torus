{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../src/components/editing/commands/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { MultiInput, MultiInputType } from 'components/activities/multi_input/schema';\nimport { InputRef } from 'data/content/model/elements/types';\nimport { ID } from 'data/content/model/other';\nimport { Editor } from 'slate';\n\n// For toolbar buttons\nexport type CommandDesc = {\n  type: 'CommandDesc';\n  icon: (editor: Editor) => string;\n  command: Command;\n  description: (editor: Editor) => string;\n  // active: is the item in the cursor's selection\n  active?: (editor: Editor) => boolean;\n};\n\nexport interface CommandContext {\n  projectSlug: string;\n  inputRefContext?: {\n    setInputType: (id: ID, attrs: MultiInputType) => void;\n    inputs: Map<ID, MultiInput>;\n    selectedInputRef: InputRef | undefined;\n    setSelectedInputRef: (ref: InputRef | undefined) => void;\n  };\n}\n\nexport type Command = {\n  // precondition: must be satisfied for the command to be enabled\n  // (prevents commands from violating model constraints)\n  precondition: (editor: Editor) => boolean;\n  // execute: run when the command is called (usually to create an element and insert it)\n  // eslint-disable-next-line\n  execute: (context: CommandContext, editor: Editor, params?: Object) => void;\n  // obtainParameters: allow the command to gather additional info before running the command\n  // (for example, show a size picker for table insertion)\n  // Returns a JSX element that will be inserted in a popover\n  obtainParameters?: (\n    context: CommandContext,\n    editor: Editor,\n    onDone: (params: any) => void,\n    onCancel: () => void,\n  ) => JSX.Element;\n};\n\nexport type GroupDivider = {\n  type: 'GroupDivider';\n};\n\nexport type ToolbarItem = CommandDesc | GroupDivider;\n"]}