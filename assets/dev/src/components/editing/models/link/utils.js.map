{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/components/editing/models/link/utils.ts"],"names":[],"mappings":"AAYA,MAAM,CAAC,MAAM,kBAAkB,GAAG,cAAc,CAAC;AAEjD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;AAEpF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE,CAC1C,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;IAC3B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IAC1B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IAC5B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAE5B,mFAAmF;AACnF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;AAE3F,iDAAiD;AACjD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,CAAM,EAAE,EAAE,CAAC,GAAG,kBAAkB,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;AAE1E,+DAA+D;AAC/D,0DAA0D;AAC1D,sEAAsE;AACtE,QAAQ;AACR,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,IAAY,EAAE,WAAmB,EAAE,EAAE;IAChF,OAAO,sBAAsB,WAAW,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC","sourcesContent":["import * as Persistence from 'data/persistence/resource';\n\ninterface Waiting {\n  type: 'Waiting';\n}\n\ninterface Uninitialized {\n  type: 'Uninitialized';\n}\n\nexport type LinkablePages = Uninitialized | Waiting | Persistence.PagesReceived;\n\nexport const internalLinkPrefix = '/course/link';\n\nexport const isInternalLink = (href: string) => href.startsWith(internalLinkPrefix);\n\nexport const isValidHref = (href: string) =>\n  href.startsWith('https://') ||\n  href.startsWith('http://') ||\n  href.startsWith('mailto://') ||\n  href.startsWith('ftp://');\n\n// Add a default protocol to the href to force links to resolve to an absolute path\nexport const addProtocol = (href: string) => (isValidHref(href) ? href : 'http://' + href);\n\n// Helper function to turn a Page into a link url\nexport const toInternalLink = (p: any) => `${internalLinkPrefix}/${p.id}`;\n\n// Takes a delivery oriented internal link and translates it to\n// a link that will resolve at authoring time. This allows\n// authors to use the 'Open Link' function and visit the linked course\n// page.\nexport const translateDeliveryToAuthoring = (href: string, projectSlug: string) => {\n  return `/authoring/project/${projectSlug}/resource/` + href.substr(href.lastIndexOf('/') + 1);\n};\n\nexport const normalizeHref = (href: string) => addProtocol(href.trim());\n"]}