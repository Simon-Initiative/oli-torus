{"version":3,"file":"DisplayLink.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/models/link/DisplayLink.tsx"],"names":[],"mappings":"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","sourcesContent":["import { createButtonCommandDesc } from 'components/editing/commands/commands';\nimport { CommandContext } from 'components/editing/commands/interfaces';\nimport { FormattingToolbar } from 'components/editing/toolbars/formatting/Toolbar';\nimport * as Persistence from 'data/persistence/resource';\nimport React, { useEffect } from 'react';\nimport {\n  isInternalLink,\n  LinkablePages,\n  toInternalLink,\n  translateDeliveryToAuthoring,\n} from './utils';\n\ntype Props = {\n  setEditLink: React.Dispatch<React.SetStateAction<boolean>>;\n  href: string;\n  pages: LinkablePages;\n  setPages: React.Dispatch<React.SetStateAction<LinkablePages>>;\n  commandContext: CommandContext;\n\n  selectedPage: Persistence.Page | null;\n  setSelectedPage: React.Dispatch<React.SetStateAction<Persistence.Page | null>>;\n};\nexport const DisplayLink = (props: Props) => {\n  const { href, pages, setPages, selectedPage, setSelectedPage, setEditLink, commandContext } =\n    props;\n\n  const onCopy = (href: string) => {\n    navigator.clipboard.writeText(\n      isInternalLink(href)\n        ? window.location.protocol +\n            '//' +\n            window.location.host +\n            '/' +\n            translateDeliveryToAuthoring(href, commandContext.projectSlug)\n        : href,\n    );\n  };\n\n  const onVisit = (href: string) => {\n    window.open(\n      isInternalLink(href) ? translateDeliveryToAuthoring(href, commandContext.projectSlug) : href,\n      '_blank',\n    );\n  };\n\n  const fetchPages = () => {\n    setPages({ type: 'Waiting' });\n\n    // If our current href is a page link, parse out the slug\n    // so we can send that along as a query param to our request.\n    // The server will align this possibly out of date slug with the\n    // current ones for us.\n    const slug = href.startsWith('/authoring/project/')\n      ? href.substr(href.lastIndexOf('/') + 1)\n      : undefined;\n\n    Persistence.pages(commandContext.projectSlug, slug)\n      .then((result) => {\n        if (result.type === 'success') {\n          // See if our current href is an actual page link\n          const foundItem = result.pages.find((p) => toInternalLink(p) === href);\n\n          // If it is, init the state appropriately\n          if (foundItem !== undefined) {\n            setSelectedPage(foundItem as any);\n          } else {\n            setSelectedPage(result.pages[0] as any);\n          }\n\n          setPages(result);\n        }\n      })\n      .catch((e) => setPages({ type: 'Uninitialized' }));\n  };\n\n  const linkCommands = [\n    [\n      createButtonCommandDesc({\n        icon: '',\n        description: isInternalLink(href) ? (selectedPage ? selectedPage.title : 'Link') : href,\n        execute: () => onVisit(href),\n      }),\n    ],\n    [\n      createButtonCommandDesc({\n        icon: 'content_copy',\n        description: 'Copy link',\n        execute: () => onCopy(href),\n      }),\n      createButtonCommandDesc({\n        icon: 'edit',\n        description: 'Edit link',\n        execute: () => {\n          setEditLink(true);\n        },\n      }),\n    ],\n  ];\n\n  const loadingCommand = [\n    [createButtonCommandDesc({ icon: '', description: 'Loading...', execute: fetchPages })],\n  ];\n\n  useEffect(() => {\n    if (pages.type === 'Uninitialized') {\n      fetchPages();\n    }\n  });\n\n  return (\n    <div className=\"hovering-toolbar\">\n      <div className=\"btn-group btn-group-sm\" role=\"group\">\n        <FormattingToolbar\n          commandDescs={pages.type === 'success' ? linkCommands : loadingCommand}\n          commandContext={commandContext}\n        />\n      </div>\n    </div>\n  );\n};\n"]}