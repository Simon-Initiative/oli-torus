{"version":3,"file":"PopupContentModal.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/models/popup/PopupContentModal.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAEnE,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAE9E,OAAO,KAAK,MAAM,OAAO,CAAC;AAS1B,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAAY,EAAE,EAAE;IAChD,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC5E,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAElE,MAAM,aAAa,GAAG,CAAC,IAAwB,EAAE,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC;IAErE,MAAM,eAAe,GAAG,CACtB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC,EAAE,CAAC,qBAAqB,CAChD;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,wBAAwB,CACrC;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CACzB;UAAA,CAAC,KAAK,CAAC,SAAS,CAAC,kBAAkB,CACjC;YAAA,CAAC,KAAK,CACJ,IAAI,CAAC,OAAO,CACZ,SAAS,CAAC,kBAAkB,CAC5B,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CACpC,OAAO,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAElC;YAAA,CAAC,CAAC,CACA;yBAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAC5B;YAAA,EAAE,CAAC,CACL;UAAA,EAAE,KAAK,CACT;QAAA,EAAE,GAAG,CACL;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CACzB;UAAA,CAAC,KAAK,CAAC,SAAS,CAAC,kBAAkB,CACjC;YAAA,CAAC,KAAK,CACJ,IAAI,CAAC,OAAO,CACZ,SAAS,CAAC,kBAAkB,CAC5B,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CACpC,OAAO,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAElC;YAAA,CAAC,CAAC,CACA;yBAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CACxB;YAAA,EAAE,CAAC,CACL;UAAA,EAAE,KAAK,CACT;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;IAEF,OAAO,CACL,CAAC,eAAe,CACd,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CACnC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAEnD;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAClB;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CACrB;UAAA,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,CACtC;UAAA,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,gCAAgC,EAAE,CAAC,CACvD;UAAA,CAAC,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAClC;YAAA,CAAC,eAAe,CAChB;YAAA,CAAC,cAAc,CACb,mBAAmB,CACnB,QAAQ,CAAC,CAAC,IAAI,CAAC,CACf,WAAW,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAC9C,KAAK,CAAC,CAAC,OAAO,CAAC,CACf,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAmB,CAAC,CAAC,EAEzD;UAAA,EAAE,GAAG,CACP;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,eAAe,CAAC,CACnB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { RichText } from 'components/activities/types';\nimport { RichTextEditor } from 'components/content/RichTextEditor';\nimport { CommandContext } from 'components/editing/commands/interfaces';\nimport { FullScreenModal } from 'components/editing/toolbars/FullScreenModal';\nimport * as ContentModel from 'data/content/model/elements/types';\nimport React from 'react';\nimport { OverlayTriggerType } from 'react-bootstrap/esm/OverlayTrigger';\n\ninterface Props {\n  onDone: (changes: Partial<ContentModel.Popup>) => void;\n  onCancel: () => void;\n  model: ContentModel.Popup;\n  commandContext: CommandContext;\n}\nexport const PopupContentModal = (props: Props) => {\n  const [content, setContent] = React.useState<RichText>(props.model.content);\n  const [trigger, setTrigger] = React.useState(props.model.trigger);\n\n  const isTriggerMode = (mode: OverlayTriggerType) => mode === trigger;\n\n  const triggerSettings = (\n    <form onSubmit={() => {}} id=\"popup__trigger_mode\">\n      <div className=\"form-check form-switch\">\n        <div className=\"form-group\">\n          <label className=\"form-check-label\">\n            <input\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => setTrigger('hover')}\n              checked={isTriggerMode('hover')}\n            />\n            <p>\n              Trigger on <b>mouseover</b>\n            </p>\n          </label>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"form-check-label\">\n            <input\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => setTrigger('click')}\n              checked={isTriggerMode('click')}\n            />\n            <p>\n              Trigger on <b>click</b>\n            </p>\n          </label>\n        </div>\n      </div>\n    </form>\n  );\n\n  return (\n    <FullScreenModal\n      onCancel={(_e) => props.onCancel()}\n      onDone={(_e) => props.onDone({ content, trigger })}\n    >\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h3 className=\"mb-2\">Popup Content</h3>\n          <p className=\"mb-4\">Shown to students when triggered</p>\n          <div className=\"popup__modalContent\">\n            {triggerSettings}\n            <RichTextEditor\n              preventLargeContent\n              editMode={true}\n              projectSlug={props.commandContext.projectSlug}\n              value={content}\n              onEdit={(content) => setContent(content as RichText)}\n            />\n          </div>\n        </div>\n      </div>\n    </FullScreenModal>\n  );\n};\n"]}