{"version":3,"file":"TableEditor.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/models/table/TableEditor.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAG3E,OAAO,KAAK,QAAQ,MAAM,6CAA6C,CAAC;AAIxE,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAY,EAAE,EAAE;IAC1C,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAEtD,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAErC,MAAM,MAAM,GAAG,CAAC,OAA2B,EAAE,EAAE;QAC7C,WAAW,CAAqB,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;IACF,MAAM,MAAM,GAAG,CAAC,KAAkC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAEvF,MAAM,UAAU,GAAG,CAAC,OAAe,EAAE,EAAE;QACrC,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,2EAA2E;IAC3E,6EAA6E;IAC7E,+EAA+E;IAC/E,UAAU;IAEV,OAAO,CACL,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,CAAC,SAAS,CAAC,cAAc,CAC3C;MAAA,CAAC,KAAK,CACJ;QAAA,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,KAAK,CAC1B;MAAA,EAAE,KAAK,CACP;MAAA,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CACzD;QAAA,CAAC,QAAQ,CAAC,KAAK,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CACrB,QAAQ,CAAC,CAAC,UAAU,CAAC,CACrB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,WAAW,CAAC,8BAA8B,EAE9C;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { updateModel, getEditMode } from 'components/editing/models/utils';\nimport * as ContentModel from 'data/content/model/elements/types';\nimport { EditorProps } from 'components/editing/models/interfaces';\nimport * as Settings from 'components/editing/models/settings/Settings';\n\n// eslint-disable-next-line\ninterface Props extends EditorProps<ContentModel.Table> {}\nexport const TableEditor = (props: Props) => {\n  const { attributes, children, editor, model } = props;\n\n  const editMode = getEditMode(editor);\n\n  const onEdit = (updated: ContentModel.Table) => {\n    updateModel<ContentModel.Table>(editor, model, updated);\n  };\n  const update = (attrs: Partial<ContentModel.Table>) => Object.assign({}, model, attrs);\n\n  const setCaption = (caption: string) => {\n    onEdit(update({ caption }));\n  };\n\n  // Note that it is important that any interactive portions of a void editor\n  // must be enclosed inside of a \"contentEditable=false\" container. Otherwise,\n  // slate does some weird things that non-deterministically interface with click\n  // events.\n\n  return (\n    <div {...attributes} className=\"table-editor\">\n      <table>\n        <tbody>{children}</tbody>\n      </table>\n      <div contentEditable={false} style={{ userSelect: 'none' }}>\n        <Settings.Input\n          editMode={editMode}\n          value={model.caption}\n          onChange={setCaption}\n          editor={editor}\n          model={model}\n          placeholder=\"Set a caption for this table\"\n        />\n      </div>\n    </div>\n  );\n};\n"]}