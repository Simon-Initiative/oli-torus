{"version":3,"file":"Editor.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/models/audio/Editor.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAGpD,OAAO,KAAK,QAAQ,MAAM,6CAA6C,CAAC;AAExE,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAiB,EAAE,EAAE;IAC/C,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAEtD,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAErC,MAAM,MAAM,GAAG,CAAC,OAA2B,EAAE,EAAE;QAC7C,WAAW,CAAqB,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG,CAAC,KAAkC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAEvF,MAAM,UAAU,GAAG,CAAC,OAAe,EAAE,EAAE;QACrC,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,2EAA2E;IAC3E,6EAA6E;IAC7E,+EAA+E;IAC/E,UAAU;IAEV,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;IAEtB,OAAO,CACL,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,CAAC,SAAS,CAAC,WAAW,CACxC;MAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CACnD;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,uBAAuB,CACpC;UAAA,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAC7B;YAAA,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EACpD;YAAA,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAChE;cAAA,CAAC,QAAQ,CAAC,KAAK,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CACrB,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CACvC,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,WAAW,CAAC,mCAAmC,EAEnD;YAAA,EAAE,UAAU,CACd;UAAA,EAAE,MAAM,CACV;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { updateModel, getEditMode } from '../utils';\nimport * as ContentModel from 'data/content/model/elements/types';\nimport { EditorProps } from 'components/editing/models/interfaces';\nimport * as Settings from 'components/editing/models/settings/Settings';\nexport interface AudioProps extends EditorProps<ContentModel.Audio> {}\nexport const AudioEditor = (props: AudioProps) => {\n  const { attributes, children, editor, model } = props;\n\n  const editMode = getEditMode(editor);\n\n  const onEdit = (updated: ContentModel.Audio) => {\n    updateModel<ContentModel.Audio>(editor, model, updated);\n  };\n\n  const update = (attrs: Partial<ContentModel.Audio>) => Object.assign({}, model, attrs);\n\n  const setCaption = (caption: string) => {\n    onEdit(update({ caption }));\n  };\n\n  // Note that it is important that any interactive portions of a void editor\n  // must be enclosed inside of a \"contentEditable=false\" container. Otherwise,\n  // slate does some weird things that non-deterministically interface with click\n  // events.\n\n  const { src } = model;\n\n  return (\n    <div {...attributes} className=\"ml-4 mr-4\">\n      <div style={{ overflow: 'auto', userSelect: 'none' }}>\n        <div className=\"ml-4 mr-4 text-center\">\n          <figure contentEditable={false}>\n            <audio style={{ margin: 'auto' }} src={src} controls />\n            <figcaption contentEditable={false} style={{ userSelect: 'none' }}>\n              <Settings.Input\n                editMode={editMode}\n                value={model.caption}\n                onChange={(value) => setCaption(value)}\n                editor={editor}\n                model={model}\n                placeholder=\"Set a caption for this audio file\"\n              />\n            </figcaption>\n          </figure>\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n};\n"]}