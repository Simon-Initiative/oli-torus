{"version":3,"file":"Editor.jsx","sourceRoot":"","sources":["../../../../../../src/components/editing/models/blockcode/Editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { updateModel, getEditMode } from 'components/editing/models/utils';\nimport * as ContentModel from 'data/content/model/elements/types';\nimport { EditorProps } from 'components/editing/models/interfaces';\nimport * as Settings from 'components/editing/models/settings/Settings';\nimport { CodeLanguages } from 'data/content/model/other';\n\nexport type CodeProps = EditorProps<ContentModel.Code>;\n\nexport const CodeEditor = (props: CodeProps) => {\n  const { model, editor } = props;\n\n  const editMode = getEditMode(editor);\n\n  const updateProperty = (value: string, key: string) =>\n    onEdit(Object.assign({}, model, { [key]: value }));\n\n  const onEdit = (updated: ContentModel.Code) => {\n    updateModel<ContentModel.Code>(editor, model, updated);\n  };\n\n  return (\n    <React.Fragment>\n      <div {...props.attributes} className=\"code-editor\">\n        <div\n          contentEditable={false}\n          style={{ userSelect: 'none', display: 'flex', justifyContent: 'space-between' }}\n        >\n          <Settings.Select\n            value={model.language}\n            onChange={(value) => updateProperty(value, 'language')}\n            editor={editor}\n            options={Object.keys(CodeLanguages)\n              .filter((k: any) => typeof CodeLanguages[k] === 'number')\n              .sort()}\n          />\n        </div>\n        <div className=\"code-editor-content\">\n          <pre style={{ fontFamily: 'Menlo, Monaco, Courier New, monospace' }}>\n            <code className={`language-${model.language}`}>{props.children}</code>\n          </pre>\n        </div>\n      </div>\n\n      <div contentEditable={false} style={{ userSelect: 'none' }}>\n        <Settings.Input\n          editMode={editMode}\n          value={model.caption}\n          onChange={(value) => updateProperty(value, 'caption')}\n          editor={editor}\n          model={model}\n          placeholder=\"Set a caption for this code block\"\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport const CodeBlockLine = (props: any) => {\n  return <div {...props.attributes}>{props.children}</div>;\n};\n"]}