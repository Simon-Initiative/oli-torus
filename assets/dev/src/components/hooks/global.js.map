{"version":3,"file":"global.js","sourceRoot":"","sources":["../../../../src/components/hooks/global.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,MAAM,UAAU,cAAc,CAAC,MAAc,EAAE,MAAe;IAC5D,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACxC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,IAAW,CAAC,CAAC;IACpD,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAErC,6DAA6D;IAC7D,iEAAiE;IACjE,sCAAsC;IACtC,IAAI,OAAO,KAAK,IAAI,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;gBACjC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC/C,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,OAAY,EAAE,EAAE;gBACtC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE;oBAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACZ,OAAO,CAAC,CAAC;gBACX,CAAC,EAAE,EAAE,CAAC,CAAC;gBACP,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE;oBAC1D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;wBACZ,CAAC,CAAC,CAAC,CAAC,GAAI,IAAY,CAAC,CAAC,CAAC,CAAC;qBACzB;oBACD,OAAO,CAAC,CAAC;gBACX,CAAC,EAAE,EAAE,CAAC,CAAC;gBACP,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;gBACjC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;SACJ;KACF;IAED,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,CAAC,GAAG,UAAU,EAAE,CAAC,OAAO,CAAC,oBAAoB,GAAG,MAAM,EAAE,EAAE,CAAC,CAAC;YAElE,OAAO,CAAC,IAAI,CAAC,CAAC;YACd,UAAU,CAAC,CAAC,CAAC,CAAC;YAEd,CAAC,CAAC,IAAI,EAAE,CAAC;YACT,8EAA8E;YAC9E,6EAA6E;SAC9E;QAED,OAAO,GAAG,EAAE;YACV,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,EAAE;gBAC5B,OAAO,CAAC,KAAK,EAAE,CAAC;aACjB;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { useState, useEffect } from 'react';\nimport { initSocket } from '../../phoenix/socket';\n\nexport function useGlobalState(userId: number, active: boolean) {\n  const [init, setInit] = useState(false);\n  const [channel, setChannel] = useState(null as any);\n  const [data, setData] = useState({});\n\n  // Note, tear down and setup of the delta and state listeners\n  // is necessary on every execution of this hook so that they have\n  // a closure view of the latest 'data'\n  if (channel !== null) {\n    channel.off('delta');\n    channel.off('deletion');\n    channel.off('state');\n\n    if (active) {\n      channel.on('delta', (delta: any) => {\n        const updated = Object.assign({}, data, delta);\n        setData(updated);\n      });\n      channel.on('deletion', (deleted: any) => {\n        const keys = deleted.reduce((m: any, k: any) => {\n          m[k] = true;\n          return m;\n        }, {});\n        const updated = Object.keys(data).reduce((m: any, k: any) => {\n          if (!keys[k]) {\n            m[k] = (data as any)[k];\n          }\n          return m;\n        }, {});\n        setData(updated);\n      });\n      channel.on('state', (state: any) => {\n        setData(state);\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (!init) {\n      const c = initSocket().channel('user_global_state:' + userId, {});\n\n      setInit(true);\n      setChannel(c);\n\n      c.join();\n      // .receive('ok', (resp: any) => { console.log('Joined successfully', resp) })\n      // .receive('error', (resp: any) => { console.log('Unable to join', resp) });\n    }\n\n    return () => {\n      if (channel !== null && init) {\n        channel.leave();\n      }\n    };\n  }, [init]);\n\n  return data;\n}\n"]}