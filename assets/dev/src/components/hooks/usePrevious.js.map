{"version":3,"file":"usePrevious.js","sourceRoot":"","sources":["../../../../src/components/hooks/usePrevious.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C,oCAAoC;AAEpC;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAI,KAAQ;IACrC,8EAA8E;IAC9E,yEAAyE;IACzE,MAAM,GAAG,GAAG,MAAM,EAAK,CAAC;IAExB,6BAA6B;IAC7B,SAAS,CAAC,GAAG,EAAE;QACb,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;IACtB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,+BAA+B;IAE5C,mEAAmE;IACnE,OAAO,GAAG,CAAC,OAAO,CAAC;AACrB,CAAC","sourcesContent":["import { useEffect, useRef } from 'react';\nimport type { MutableRefObject } from 'react';\n// https://usehooks.com/usePrevious/\n\n/**\n * a type-safe version of the `usePrevious` hook described here:\n * @see {@link https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state}\n */\nexport function usePrevious<T>(value: T): MutableRefObject<T | undefined>['current'] {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n"]}