{"version":3,"file":"colors.js","sourceRoot":"","sources":["../../../src/utils/colors.ts"],"names":[],"mappings":"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","sourcesContent":["const hashString = (string: string) => {\n  const seed = 131;\n  const seed2 = 137;\n  let hash = 0;\n\n  // make hash more sensitive for short string like 'a', 'b', 'c'\n  const str = string + 'x';\n\n  // Number.MAX_SAFE_INTEGER equals 9007199254740991\n  const MAX_SAFE_INTEGER = parseInt(`${Number.MAX_SAFE_INTEGER / seed2}`, 10);\n\n  for (let i = 0; i < str.length; i = i + 1) {\n    if (hash > MAX_SAFE_INTEGER) {\n      hash = parseInt(`${hash / seed2}`, 10);\n    }\n    hash = hash * seed + str.charCodeAt(i);\n  }\n  return hash;\n};\n\nconst rgbToHex = (RGBArray: any) => {\n  let hex = '#';\n  RGBArray.forEach((value: any) => {\n    if (value < 16) {\n      hex = hex + 0;\n    }\n    hex = hex + value.toString(16);\n  });\n\n  return hex;\n};\n\nconst hslToRgb = (hue: number, sat: number, light: number) => {\n  const H = hue / 360;\n  const S = sat;\n  const L = light;\n\n  const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n  const p = 2 * L - q;\n\n  return [H + 1 / 3, H, H - 1 / 3].map((c) => {\n    let color = c;\n\n    if (color < 0) {\n      color = color + 1;\n    }\n    if (color > 1) {\n      color = color - 1;\n    }\n    if (color < 1 / 6) {\n      color = p + (q - p) * 6 * color;\n    } else if (color < 0.5) {\n      color = q;\n    } else if (color < 2 / 3) {\n      color = p + (q - p) * 6 * (2 / 3 - color);\n    } else {\n      color = p;\n    }\n    return Math.round(color * 255);\n  });\n};\n\n/**\n * Set of functions that return the color based on the hash of a string.\n */\nexport const stringToColor = {\n  hsl: (str: string, minH = 0, maxH = 360) => {\n    let hash = hashString(str);\n\n    const H = hash % 359;\n    const S = [0.35, 0.5, 0.65];\n    const L = [0.35, 0.5, 0.65];\n\n    const h = (H / 1000) * (maxH - minH) + minH;\n\n    hash = parseInt(`${hash / 360}`, 10);\n    const s = S[hash % S.length];\n\n    hash = parseInt(`${hash / S.length}`, 10);\n    const l = L[hash % L.length];\n\n    return [h, s, l];\n  },\n  rgb: (str: string) => {\n    const [h, s, l] = stringToColor.hsl(str);\n    return hslToRgb(h, s, l);\n  },\n  hex: (str: string) => {\n    const rgb = stringToColor.rgb(str);\n    return rgbToHex(rgb);\n  },\n};\n"]}