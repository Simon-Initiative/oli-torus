{"version":3,"file":"date.js","sourceRoot":"","sources":["../../../src/utils/date.ts"],"names":[],"mappings":"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","sourcesContent":["const monthsToOrdinal: any = {\n  Jan: 0,\n  Feb: 1,\n  Mar: 2,\n  Apr: 3,\n  May: 4,\n  Jun: 5,\n  Jul: 6,\n  Aug: 7,\n  Sep: 8,\n  Oct: 9,\n  Nov: 10,\n  Dec: 11,\n};\n\nfunction convertHour(hour: number, isPM: boolean): number {\n  if (isPM) {\n    return hour === 12 ? 12 : hour + 12;\n  }\n\n  return hour === 12 ? 0 : hour;\n}\n\nexport function parseDate(value: string): Date {\n  const p = value.split(' ');\n  const t = p[3].split(':');\n\n  return new Date(\n    Date.UTC(\n      parseInt(p[2], 10),\n      monthsToOrdinal[p[0]],\n      parseInt(p[1].substr(0, p[1].indexOf(',')), 10),\n      convertHour(parseInt(t[0], 10), p[4] === 'PM'),\n      parseInt(t[1], 10),\n      parseInt(t[2], 10),\n    ),\n  );\n}\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n};\n\nexport const dateFormatted = (date: Date): string => date.toLocaleDateString('en-US', dateOptions);\n\nexport function compareDates(a: Date, b: Date): number {\n  return a.valueOf() - b.valueOf();\n}\n\nexport function relativeToNow(a: Date): string {\n  return relativeTo(a, new Date());\n}\n\n// Take a date and return a new date taking into account\n// some amount of time skew\nexport function adjustForSkew(a: Date, skewInMs: number): Date {\n  return new Date(a.getTime() + skewInMs);\n}\n\n/**\n * Returns a string indicating how long it is been from one date\n * to another, in the most reasonable unit.\n * @param dateFrom the date to compare against\n * @param dateNow the date to compare\n */\nexport function relativeTo(dateFrom: Date, dateNow: Date): string {\n  const delta = dateNow.getTime() - dateFrom.getTime();\n\n  const MS_IN_SECOND = 1000;\n  const MS_IN_MINUTE = 60 * MS_IN_SECOND;\n  const MS_IN_HOUR = 60 * MS_IN_MINUTE;\n  const MS_IN_DAY = 24 * MS_IN_HOUR;\n  const MS_IN_WEEK = 7 * MS_IN_DAY;\n  const MS_IN_MONTH = 30.5 * MS_IN_DAY;\n  const MS_IN_YEAR = 365 * MS_IN_DAY;\n\n  if (delta >= MS_IN_YEAR * 2) {\n    return Math.floor(delta / MS_IN_YEAR) + ' years ago';\n  }\n  if (delta >= MS_IN_YEAR - MS_IN_MONTH) {\n    return 'a year ago';\n  }\n  if (delta >= MS_IN_MONTH * 2) {\n    return Math.floor(delta / MS_IN_MONTH) + ' months ago';\n  }\n  if (delta >= MS_IN_MONTH) {\n    return 'a month ago';\n  }\n  if (delta >= MS_IN_WEEK * 2) {\n    return Math.floor(delta / MS_IN_WEEK) + ' weeks ago';\n  }\n  if (delta >= MS_IN_WEEK - MS_IN_DAY) {\n    return 'a week ago';\n  }\n  if (delta >= MS_IN_DAY * 2) {\n    return Math.floor(delta / MS_IN_DAY) + ' days ago';\n  }\n  if (delta >= MS_IN_DAY) {\n    return 'a day ago';\n  }\n  if (delta >= MS_IN_HOUR * 2) {\n    return Math.floor(delta / MS_IN_HOUR) + ' hours ago';\n  }\n  if (delta >= MS_IN_HOUR) {\n    return 'an hour ago';\n  }\n  if (delta >= MS_IN_MINUTE * 2) {\n    return Math.floor(delta / MS_IN_MINUTE) + ' minutes ago';\n  }\n  if (delta >= MS_IN_MINUTE) {\n    return 'a minute ago';\n  }\n  if (delta >= 7 * MS_IN_SECOND) {\n    return Math.floor(delta / MS_IN_SECOND) + ' seconds ago';\n  }\n  if (delta >= 2 * MS_IN_SECOND) {\n    return 'a few seconds ago';\n  }\n\n  return 'just now';\n}\n"]}