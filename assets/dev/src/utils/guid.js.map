{"version":3,"file":"guid.js","sourceRoot":"","sources":["../../../src/utils/guid.ts"],"names":[],"mappings":"AAAA,8DAA8D;AAC9D,gEAAgE;AAChE,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,IAAI,GAAa,EAAE,CAAC;AAE1B,iDAAiD;AACjD,IAAI,IAAI,GAAG,CAAC,CAAC;AACb,IAAI,MAAM,GAAG,CAAC,CAAC;AAEf,8CAA8C;AAC9C,SAAS,QAAQ;IACf,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,iCAAiC;AACjC,MAAM,QAAQ,GAAG,GAAG,EAAE,CACpB,UAAU,CAAC,GAAG,EAAE;IACd,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,CAAC;AACb,CAAC,EAAE,IAAI,CAAC,CAAC;AAEX,4BAA4B;AAC5B,QAAQ,EAAE,CAAC;AAEX,iBAAiB;AACjB,MAAM,CAAC,OAAO,UAAU,IAAI;IAC1B,uCAAuC;IACvC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;QAChB,8CAA8C;QAC9C,+CAA+C;QAC/C,OAAQ,IAAI,CAAC,GAAG,EAAU,GAAG,EAAE,CAAC;KACjC;IAED,8CAA8C;IAC9C,mBAAmB;IACnB,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;IACpB,QAAQ,EAAE,CAAC;IAEX,OAAQ,IAAI,CAAC,GAAG,EAAU,GAAG,EAAE,CAAC;AAClC,CAAC;AAED,SAAS,UAAU,CAAC,KAAa;IAC/B,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAErC,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;QAC/B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;KACtC;SAAM;QACL,sEAAsE;QACtE,uCAAuC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;YACjC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACxE;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAEA,MAAc,CAAC,IAAI,GAAG,IAAI,CAAC","sourcesContent":["// Use a pool of already created guids to optimize performance\n// in areas of the code that quickly request thousands of guids:\nconst POOL_SIZE = 1000;\nconst pool: number[] = [];\n\n// Used to track our hit rate for tuning purposes\nlet hits = 0;\nlet misses = 0;\n\n// Fill the pool up to its configured max size\nfunction fillPool() {\n  createSome(POOL_SIZE - pool.length).forEach((n) => pool.push(n));\n}\n\n// Every second, refill the pool.\nconst schedule = () =>\n  setTimeout(() => {\n    fillPool();\n    schedule();\n  }, 5000);\n\n// Start refilling the pool.\nschedule();\n\n// Request a guid\nexport default function guid(): string {\n  // If we have a guid available, take it\n  if (pool.length > 0) {\n    hits = hits + 1;\n    // pop() is the fastest way to do get an item.\n    // It is O(1) relative to the size of the array\n    return (pool.pop() as any) + '';\n  }\n\n  // The pool was empty so we need to create one\n  // for this request\n  misses = misses + 1;\n  fillPool();\n\n  return (pool.pop() as any) + '';\n}\n\nfunction createSome(count: number) {\n  const array = new Uint32Array(count);\n\n  if (window.crypto !== undefined) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // This clause allows guid to operate in headless testing environments\n    // where window.crypto may be undefined\n    for (let i = 0; i < count; i += 1) {\n      array[i] = Math.floor(Math.random() * Math.floor(Math.pow(2, 32) - 1));\n    }\n  }\n\n  return array;\n}\n\n(window as any).guid = guid;\n"]}