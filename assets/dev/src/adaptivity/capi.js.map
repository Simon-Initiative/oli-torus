{"version":3,"file":"capi.js","sourceRoot":"","sources":["../../../src/adaptivity/capi.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConditionProperties } from 'json-rules-engine';\nimport { isStringArray, parseArray, parseBoolean } from 'utils/common';\n\nexport enum CapiVariableTypes {\n  NUMBER = 1,\n  STRING = 2,\n  ARRAY = 3,\n  BOOLEAN = 4,\n  ENUM = 5,\n  MATH_EXPR = 6,\n  ARRAY_POINT = 7,\n  // TODO: Add OBJECT (janus-script can support)\n  UNKNOWN = 99,\n}\n\nexport const getCapiType = (value: any, allowedValues?: string[]): CapiVariableTypes => {\n  if (allowedValues) {\n    if (allowedValues.every((v) => typeof v === 'string')) {\n      return CapiVariableTypes.ENUM;\n    }\n  }\n  if (typeof value === 'boolean' || value === 'true' || value === 'false') {\n    return CapiVariableTypes.BOOLEAN;\n  }\n  if (typeof value === 'number') {\n    return CapiVariableTypes.NUMBER;\n  }\n  if (Array.isArray(value) || isStringArray(value)) {\n    return CapiVariableTypes.ARRAY;\n  }\n  if (typeof value === 'string') {\n    return CapiVariableTypes.STRING;\n  }\n\n  return CapiVariableTypes.UNKNOWN;\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const coerceCapiValue = (\n  value: any,\n  capiType: CapiVariableTypes,\n  allowedValues?: string[] | null,\n) => {\n  switch (capiType) {\n    case CapiVariableTypes.NUMBER:\n      if (!isNaN(parseFloat(value))) {\n        return `${parseFloat(value)}`;\n      }\n      break;\n    case CapiVariableTypes.STRING:\n    case CapiVariableTypes.MATH_EXPR:\n      return `${value}`;\n    case CapiVariableTypes.ENUM:\n      if (allowedValues && Array.isArray(allowedValues)) {\n        if (!allowedValues.includes(value)) {\n          throw new Error(\n            `Attempting to assign an invalid value to an ENUM ${value} | Allowed: ${JSON.stringify(\n              allowedValues,\n            )}`,\n          );\n        }\n      }\n      return `${value}`;\n    case CapiVariableTypes.BOOLEAN:\n      return String(parseBoolean(value)); // for some reason these need to be strings\n    case CapiVariableTypes.ARRAY:\n    case CapiVariableTypes.ARRAY_POINT:\n      return parseArray(value);\n    default:\n      return `${value}`;\n  }\n\n  return value;\n};\n\nexport const parseCapiValue = (capiVar: CapiVariable): any => {\n  switch (capiVar.type) {\n    case CapiVariableTypes.BOOLEAN:\n      return parseBoolean(capiVar.value);\n    case CapiVariableTypes.NUMBER:\n      if (!isNaN(parseFloat(capiVar.value))) {\n        return parseFloat(capiVar.value);\n      }\n      return capiVar.value;\n    case CapiVariableTypes.ARRAY:\n    case CapiVariableTypes.ARRAY_POINT:\n      return parseArray(capiVar.value);\n    default:\n      return capiVar.value;\n  }\n};\n\nexport interface ICapiVariableOptions {\n  key: string;\n  type?: CapiVariableTypes;\n  value?: any;\n  readonly?: boolean;\n  writeonly?: boolean;\n  allowedValues?: string[];\n  bindTo?: string;\n}\n\nexport interface JanusConditionProperties extends ConditionProperties {\n  id: string;\n  type?: CapiVariableTypes;\n}\n\nexport class CapiVariable {\n  public key: string;\n  public type: CapiVariableTypes;\n  public value: any;\n  public readonly: boolean;\n  public writeonly: boolean;\n  public allowedValues: string[] | null;\n  public bindTo: string | null;\n\n  constructor(options: ICapiVariableOptions) {\n    this.key = options.key;\n    this.type = options.type || CapiVariableTypes.UNKNOWN;\n    this.readonly = !!options.readonly;\n    this.writeonly = !!options.writeonly;\n    this.allowedValues = Array.isArray(options.allowedValues) ? options.allowedValues : null;\n    this.bindTo = options.bindTo || null;\n\n    if (this.type === CapiVariableTypes.UNKNOWN) {\n      this.type = getCapiType(options.value);\n    }\n\n    this.value = coerceCapiValue(options.value, this.type, this.allowedValues);\n  }\n}\n"]}