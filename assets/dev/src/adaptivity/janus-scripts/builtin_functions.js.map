{"version":3,"file":"builtin_functions.js","sourceRoot":"","sources":["../../../../src/adaptivity/janus-scripts/builtin_functions.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyFxB,CAAC","sourcesContent":["export const janus_std = `\n    let abs = fn(value) { return number(Math.evaluate(\"abs(\" + string(value) + \")\")); };\n    let cos = fn(value) { return number(Math.evaluate(\"cos(\" + string(value) + \")\")); };\n    let acos = fn(value) { return number(Math.evaluate(\"acos(\" + string(value) + \")\")); };\n    let sin = fn(value) { return number(Math.evaluate(\"sin(\" + string(value) + \")\")); };\n    let asin = fn(value) { return number(Math.evaluate(\"asin(\" + string(value) + \")\")); };\n    let atan = fn(value) { return number(Math.evaluate(\"atan(\" + string(value) + \")\")); };\n    let tan = fn(value) { return number(Math.evaluate(\"tan(\" + string(value) + \")\")); };\n    let atan2 = fn(value) { return number(Math.evaluate(\"atan2(\" + string(value) + \")\")); };\n    let ceil = fn(value) { return number(Math.evaluate(\"ceil(\" + string(value) + \")\")); };\n    let floor = fn(value) { return number(Math.evaluate(\"floor(\" + string(value) + \")\")); };\n    let exp = fn(value) { return number(Math.evaluate(\"exp(\" + string(value) + \")\")); };\n    let log = fn(value) { return number(Math.evaluate(\"log(\" + string(value) + \")\")); };\n    let pow = fn(x, y) { return number(Math.evaluate(\"pow(\" + string(x) + \", \" + string(y) + \")\")); };\n    let sqrt = fn(value) { return number(Math.evaluate(\"sqrt(\" + string(value) + \")\")); };\n    let round = fn(value) { return number(Math.evaluate(\"round(\" + string(value) + \")\")); };\n    let roundSF = fn(value, precision) { return Math.evaluate(\"format(\" + string(value) + \", {notation: 'exponential', precision: \" + string(precision) + \"})\"); };\n    let det = fn(matrix) { return number(Math.evaluate(\"det(\" + string(matrix) + \").toString()\")); };\n    let inv = fn(matrix) {\n        if (typeof(matrix) == \"ARRAY\") {\n            return array(Math.evaluate(\"inv(\" + string(matrix) + \")\"));\n        }\n        if (typeof(matrix) == \"NUMBER\") {\n            return number(Math.evaluate(\"inv(\" + string(matrix) + \")\"));\n        }\n    };\n    let ele = fn(matrix, position) {\n        if (typeof(matrix) != \"ARRAY\") {\n            return undefined;\n        }\n        if (typeof(matrix[0]) == \"ARRAY\") {\n            if (typeof(position) == \"NUMBER\") {\n                return matrix[0][position - 1];\n            } else {\n                if (len(position) == 1) {\n                    return matrix[0][position[0] - 1];\n                }\n                if (len(position) == 2) {\n                    return matrix[position[0] - 1][position[1] - 1];\n                }\n                if (len(position) > 2) {\n                    return matrix[position[0] - 1][position[1] - 1][position[2] - 1];\n                }\n            }\n        } else {\n            \"this means matrix is a vector\";\n            if (typeof(position) == \"NUMBER\") {\n                return matrix[position - 1];\n            } else {\n                return matrix[position[0] - 1];\n            }\n        }\n    };\n    if ({session.userId} != undefined) {\n        let session.seed = {sesson.userId} * 1234567;\n    } else {\n        let session.seed = string(session.userName) + string(1234567);\n    }\n    let rand = rng(session.seed);\n    let rndm = fn(min, max, step) {\n        if (step == undefined) {\n            let step = 1;\n        }\n        return Math.round((rand() * (max - min) / step)) * step + min;\n    };\n    let fixedrndm = fn(min, max, step) {\n        return rndm(min, max, step);\n    };\n    let fixedrandom = fn(min, max, step) {\n        return rndm(min, max, step);\n    };\n    let lessonattemptrandom = fn(min, max, step) {\n        return rndm(min, max, step);\n    };\n    let lessonattemptrndm = fn(min, max, step) {\n        return lessonattemptrandom(min, max, step);\n    };\n    let eigenvalues = fn(matrix) {\n        return array(Math.evaluate(\"eigs(\" + string(matrix) + \").values\"));\n    };\n    let diag = fn(vector) {\n        return array(Math.evaluate(\"diag(\" + string(vector) + \")\"));\n    };\n    let getDiag = fn(matrix) {\n        return array(Math.evaluate(\"diag(\" + string(matrix) + \")\"));\n    };\n    let trans = fn(matrix) {\n        return array(Math.evaluate(\"transpose(\" + string(matrix) + \")\"));\n    };\n`;\n"]}