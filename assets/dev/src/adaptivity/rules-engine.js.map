{"version":3,"file":"rules-engine.js","sourceRoot":"","sources":["../../../src/adaptivity/rules-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { Environment } from 'janus-script';\nimport {\n  AllConditions,\n  AnyConditions,\n  ConditionProperties,\n  Engine,\n  EngineResult,\n  Event,\n  NestedCondition,\n  RuleProperties,\n  TopLevelCondition,\n} from 'json-rules-engine';\nimport { b64EncodeUnicode } from 'utils/decode';\nimport { CapiVariableTypes, JanusConditionProperties } from './capi';\nimport { janus_std } from './janus-scripts/builtin_functions';\nimport containsOperators from './operators/contains';\nimport equalityOperators from './operators/equality';\nimport mathOperators from './operators/math';\nimport rangeOperators from './operators/range';\nimport {\n  bulkApplyState,\n  evalAssignScript,\n  evalScript,\n  extractAllExpressionsFromText,\n  getValue,\n  looksLikeJson,\n} from './scripting';\n\nexport interface JanusRuleProperties extends RuleProperties {\n  id?: string;\n  disabled: boolean;\n  default: boolean;\n  correct: boolean;\n  additionalScore?: number;\n  forceProgress?: boolean;\n}\n\nconst engineOperators: any = {\n  ...containsOperators,\n  ...rangeOperators,\n  ...equalityOperators,\n  ...mathOperators,\n};\n\nconst rulesEngineFactory = () => {\n  const engine = new Engine([], { allowUndefinedFacts: true });\n\n  Object.keys(engineOperators).forEach((opName) => {\n    engine.addOperator(opName, engineOperators[opName]);\n  });\n\n  return engine;\n};\n\nconst applyToEveryCondition = (top: TopLevelCondition | NestedCondition, callback: any): void => {\n  const conditions = (top as AllConditions).all || (top as AnyConditions).any;\n  conditions.forEach((condition) => {\n    if ((condition as AllConditions).all || (condition as AnyConditions).any) {\n      // nested\n      applyToEveryCondition(condition, callback);\n    } else {\n      callback(condition as ConditionProperties);\n    }\n  });\n};\n\nconst evaluateValueExpression = (value: string, env: Environment) => {\n  let result = value;\n  const looksLikeJSON = looksLikeJson(value);\n  // only if there is {} in it should it be processed, otherwise it's just a string\n  if (value.indexOf('{') === -1 || looksLikeJSON) {\n    return value;\n  }\n  // it might be that it's still just a string, if it's a JSON value (TODO, is this really something that would be authored?)\n  // handle {{{q:1498672976730:866|stage.unknownabosrbance.Current Display Value}-{q:1522195641637:1014|stage.slide13_y_intercept.value}}/{q:1498673825305:874|stage.slide13_slope.value}}\n  value = value.replace(/{{{/g, '(({').replace(/{{/g, '({').replace(/}}/g, '})');\n  try {\n    result = evalScript(value, env).result;\n  } catch (e) {\n    // TODO: this currently is good for when math is encountered\n    // should create a \"looksLikeMath\" check above?? the math that is the problem\n    // *might* always have a ^ in it... not sure...\n    // otherwise any time it fails above for any reason, the value will be treated as a normal string\n    console.warn(`[evaluateValueExpression] Error evaluating ${value} `, e);\n  }\n  return result;\n};\n\nconst processRules = (rules: JanusRuleProperties[], env: Environment) => {\n  rules.forEach((rule, index) => {\n    // tweak priority to match order\n    rule.priority = index + 1;\n    // note: maybe authoring / conversion should just write these here so we\n    // dont have to do it at runtime\n    rule.event.params = {\n      ...rule.event.params,\n      order: rule.priority,\n      correct: !!rule.correct,\n      default: !!rule.default,\n    };\n    //need the 'type' property hence using JanusConditionProperties which extends ConditionProperties\n    applyToEveryCondition(rule.conditions, (condition: JanusConditionProperties) => {\n      const ogValue = condition.value;\n      let modifiedValue = ogValue;\n      if (Array.isArray(ogValue)) {\n        modifiedValue = ogValue.map((value) =>\n          typeof value === 'string' ? evaluateValueExpression(value, env) : value,\n        );\n      }\n      if (typeof ogValue === 'string') {\n        if (ogValue.indexOf('{') === -1) {\n          modifiedValue = ogValue;\n        } else {\n          const evaluatedValue = evaluateValueExpression(ogValue, env);\n          if (typeof evaluatedValue === 'string') {\n            //if the converted value is string then we don't have to stringify (e.g. if the evaluatedValue = L and we stringyfy it then the value becomes '\"L\"' instead if 'L'\n            // hence a trap state checking 'L' === 'L' returns false as the expression becomes 'L' === '\"L\"')\n            modifiedValue = evaluatedValue;\n          } else {\n            //Need to stringify only if it was converted into object during evaluation process and we expect it to be string\n            modifiedValue = JSON.stringify(evaluateValueExpression(ogValue, env));\n          }\n        }\n      }\n      //if it type ===3 then it is a array. We need to wrap it in [] if it is not already wrapped.\n      if (\n        typeof ogValue === 'string' &&\n        condition?.type === CapiVariableTypes.ARRAY &&\n        ogValue.charAt(0) !== '[' &&\n        ogValue.slice(-1) !== ']'\n      ) {\n        modifiedValue = `[${ogValue}]`;\n      }\n      condition.value = modifiedValue;\n    });\n  });\n};\n\nexport const defaultWrongRule = {\n  id: 'builtin.defaultWrong',\n  name: 'defaultWrong',\n  priority: 1,\n  disabled: false,\n  additionalScore: 0,\n  forceProgress: false,\n  default: true,\n  correct: false,\n  conditions: { all: [] },\n  event: {\n    type: 'builtin.defaultWrong',\n    params: {\n      actions: [\n        {\n          type: 'feedback',\n          params: {\n            feedback: {\n              id: 'builtin.feedback',\n              custom: {\n                showCheckBtn: true,\n                panelHeaderColor: 10027008,\n                rules: [],\n                facts: [],\n                applyBtnFlag: false,\n                checkButtonLabel: 'Next',\n                applyBtnLabel: 'Show Solution',\n                mainBtnLabel: 'Next',\n                panelTitleColor: 16777215,\n                lockCanvasSize: true,\n                width: 350,\n                palette: {\n                  fillColor: 16777215,\n                  fillAlpha: 1,\n                  lineColor: 16777215,\n                  lineAlpha: 1,\n                  lineThickness: 0.1,\n                  lineStyle: 0,\n                  useHtmlProps: false,\n                  backgroundColor: 'rgba(255,255,255,0)',\n                  borderColor: 'rgba(255,255,255,0)',\n                  borderWidth: '1px',\n                  borderStyle: 'solid',\n                },\n                height: 100,\n              },\n              partsLayout: [\n                {\n                  id: 'builtin.feedback.textflow',\n                  type: 'janus-text-flow',\n                  custom: {\n                    overrideWidth: true,\n                    nodes: [\n                      {\n                        tag: 'p',\n                        style: { fontSize: '16' },\n                        children: [\n                          {\n                            tag: 'span',\n                            style: { fontWeight: 'bold' },\n                            children: [\n                              {\n                                tag: 'text',\n                                text: 'Incorrect, please try again.',\n                                children: [],\n                              },\n                            ],\n                          },\n                        ],\n                      },\n                    ],\n                    x: 10,\n                    width: 330,\n                    overrideHeight: false,\n                    y: 10,\n                    z: 0,\n                    palette: {\n                      fillColor: 16777215,\n                      fillAlpha: 1,\n                      lineColor: 16777215,\n                      lineAlpha: 0,\n                      lineThickness: 0.1,\n                      lineStyle: 0,\n                      useHtmlProps: false,\n                      backgroundColor: 'rgba(255,255,255,0)',\n                      borderColor: 'rgba(255,255,255,0)',\n                      borderWidth: '1px',\n                      borderStyle: 'solid',\n                    },\n                    customCssClass: '',\n                    height: 22,\n                  },\n                },\n              ],\n            },\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const findReferencedActivitiesInConditions = (conditions: any) => {\n  const referencedActivities: Set<string> = new Set();\n\n  conditions.forEach((condition: any) => {\n    if (condition.fact && condition.fact.indexOf('|stage.') !== -1) {\n      const referencedSequenceId = condition.fact.split('|stage.')[0];\n      referencedActivities.add(referencedSequenceId);\n    }\n    if (typeof condition.value === 'string' && condition.value.indexOf('|stage.') !== -1) {\n      // value could have more than one reference inside it\n      const exprs = extractAllExpressionsFromText(condition.value);\n      exprs.forEach((expr: string) => {\n        if (expr.indexOf('|stage.') !== -1) {\n          const referencedSequenceId = expr.split('|stage.')[0];\n          referencedActivities.add(referencedSequenceId);\n        }\n      });\n    }\n    if (condition.any || condition.all) {\n      const childRefs = findReferencedActivitiesInConditions(condition.any || condition.all);\n      childRefs.forEach((ref) => referencedActivities.add(ref));\n    }\n  });\n\n  return Array.from(referencedActivities);\n};\n\nexport interface CheckResult {\n  correct: boolean;\n  results: Event[];\n  score: number;\n  out_of: number;\n  debug?: any;\n}\n\nexport interface ScoringContext {\n  maxScore: number;\n  maxAttempt: number;\n  trapStateScoreScheme: boolean;\n  negativeScoreAllowed: boolean;\n  currentAttemptNumber: number;\n}\n\nexport const check = async (\n  state: Record<string, unknown>,\n  rules: JanusRuleProperties[],\n  scoringContext: ScoringContext,\n  encodeResults = false,\n): Promise<CheckResult | string> => {\n  // load the std lib\n  const { env } = evalScript(janus_std);\n\n  const { result: assignResults } = evalAssignScript(state, env);\n  // console.log('RULES ENGINE STATE ASSIGN', { assignResults, state, env });\n\n  // evaluate all rule conditions against context\n  const enabledRules = rules.filter((r) => !r.disabled);\n  if (enabledRules.length === 0 || !enabledRules.find((r) => r.default && !r.correct)) {\n    enabledRules.push(defaultWrongRule);\n  }\n  processRules(enabledRules, env);\n\n  // finally run check\n  const engine: Engine = rulesEngineFactory();\n  const facts: Record<string, unknown> = env.toObj();\n\n  enabledRules.forEach((rule) => {\n    // $log.info('RULE: ', JSON.stringify(rule, null, 4));\n    engine.addRule(rule);\n  });\n\n  const checkResult: EngineResult = await engine.run(facts);\n\n  /* console.log('RE CHECK', { checkResult }); */\n  let resultEvents: Event[] = [];\n  const successEvents = checkResult.events.sort((a, b) => a.params?.order - b.params?.order);\n\n  // if every event is correct excluding the default wrong, then we are definitely correct\n  let defaultWrong = successEvents.find((e) => e.params?.default && !e.params?.correct);\n  if (!defaultWrong) {\n    console.warn('no default wrong found, there should always be one!');\n    // we should never actually get here, because the rules should be implanted earlier,\n    // however, in case we still do, use this because it's better than nothing\n    defaultWrong = defaultWrongRule.event;\n  }\n  resultEvents = successEvents.filter((evt) => evt !== defaultWrong);\n  // if anything is correct, then we are correct\n  const isCorrect = !!resultEvents.length && resultEvents.some((evt) => evt.params?.correct);\n  // if we are not correct, then lets filter out any correct\n  if (!isCorrect) {\n    resultEvents = resultEvents.filter((evt) => !evt.params?.correct);\n  } else {\n    // if we are correct, then lets filter out any incorrect\n    resultEvents = resultEvents.filter((evt) => evt.params?.correct);\n  }\n\n  // if we don't have any events left, then it's the default wrong\n  if (!resultEvents.length) {\n    resultEvents = [defaultWrong as Event];\n  }\n\n  let score = 0;\n  //below condition make sure the score calculation will happen only if the answer is correct and\n  //in case of incorrect answer if negative scoring is allowed then calculation will proceed.\n  if (isCorrect || scoringContext.negativeScoreAllowed) {\n    if (scoringContext.trapStateScoreScheme) {\n      // apply all the actions from the resultEvents that mutate the state\n      // then check the session.currentQuestionScore and clamp it against the maxScore\n      // setting that value to score\n      const mutations = resultEvents.reduce((acc, evt) => {\n        const { actions } = evt.params as Record<string, any>;\n        const mActions = actions.filter(\n          (action: any) =>\n            action.type === 'mutateState' &&\n            action.params.target === 'session.currentQuestionScore',\n        );\n        return acc.concat(...acc, mActions);\n      }, []);\n      if (mutations.length) {\n        const mutApplies = mutations.map(({ params }) => params);\n        bulkApplyState(mutApplies, env);\n        score = getValue('session.currentQuestionScore', env) || 0;\n      }\n    } else {\n      const { maxScore, maxAttempt, currentAttemptNumber } = scoringContext;\n      const scorePerAttempt = maxScore / maxAttempt;\n      score = maxScore - scorePerAttempt * (currentAttemptNumber - 1);\n    }\n    score = Math.min(score, scoringContext.maxScore);\n    if (!scoringContext.negativeScoreAllowed) {\n      score = Math.max(0, score);\n    }\n  }\n\n  const finalResults = {\n    correct: isCorrect,\n    score,\n    out_of: scoringContext.maxScore || 0,\n    results: resultEvents,\n    debug: {\n      sent: resultEvents.map((e) => e.type),\n      all: successEvents.map((e) => e.type),\n    },\n  };\n  if (encodeResults) {\n    return b64EncodeUnicode(JSON.stringify(finalResults));\n  } else {\n    return finalResults;\n  }\n};\n"]}