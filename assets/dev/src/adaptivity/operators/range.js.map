{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../src/adaptivity/operators/range.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAEpD,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,SAAc,EAAE,KAAU,EAAW,EAAE;IACrE,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IACtC,MAAM,iBAAiB,GACrB,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC;QACvB,CAAC,CAAC,SAAS,CAAC;IAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC/D,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,yCAAyC;IACvE,gHAAgH;IAChH,qEAAqE;IACrE,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IACtB,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IAEtB,MAAM,SAAS,GAAG,iBAAiB,IAAI,GAAG,IAAI,iBAAiB,IAAI,GAAG,CAAC;IAEvE,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,SAAc,EAAE,KAAU,EAAW,EAAE,CACxE,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AAErC,MAAM,SAAS,GAAG;IAChB,OAAO,EAAE,eAAe;IACxB,UAAU,EAAE,kBAAkB;CAC/B,CAAC;AAEF,eAAe,SAAS,CAAC","sourcesContent":["import { isNumber, parseArray } from 'utils/common';\n\nexport const inRangeOperator = (factValue: any, value: any): boolean => {\n  const parsedValue = parseArray(value);\n  const modifiedFactValue =\n    typeof factValue === 'string' && factValue.indexOf('e') === -1\n      ? parseFloat(factValue)\n      : factValue;\n  if (!Array.isArray(parsedValue) || !isNumber(modifiedFactValue)) {\n    return false;\n  }\n  let [min, max] = parsedValue; // 3rd param is tolerance if/when enabled\n  // BS: apparently min/max can have expressions [\"{stage.foo.value}\", \"8.3\", 0.0] so they will need to be strings\n  // and currently expressions will break until we add support for them\n  min = parseFloat(min);\n  max = parseFloat(max);\n\n  const isInRange = modifiedFactValue >= min && modifiedFactValue <= max;\n\n  return isInRange;\n};\n\nexport const notInRangeOperator = (factValue: any, value: any): boolean =>\n  !inRangeOperator(factValue, value);\n\nconst operators = {\n  inRange: inRangeOperator,\n  notInRange: notInRangeOperator,\n};\n\nexport default operators;\n"]}