{"version":3,"file":"sequence_test.js","sourceRoot":"","sources":["../../../test/advanced_authoring/sequence_test.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EACd,0BAA0B,EAC1B,YAAY,GACb,MAAM,sDAAsD,CAAC;AAC9D,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,SAAS,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CACvD,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CACtC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,KAAK,GAAG,cAAc,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,KAAK,GAAG,cAAc,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,KAAK,GAAG,0BAA0B,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  findInSequence,\n  findInSequenceByResourceId,\n  getHierarchy,\n} from 'apps/delivery/store/features/groups/actions/sequence';\nimport { simpleSequence } from './sequence_mocks';\n\ndescribe('Sequence Util Methods', () => {\n  describe('getHierarchy', () => {\n    it('should return the sequence in heirarchal form', () => {\n      const hierarchy = getHierarchy(simpleSequence);\n      expect(hierarchy.length).toBe(1);\n      expect(hierarchy[0].children.length).toBe(1);\n      expect(hierarchy[0].children[0].custom.sequenceName).toBe(\n        simpleSequence[1].custom.sequenceName,\n      );\n    });\n  });\n\n  describe('findInSequence', () => {\n    it('should return a sequence entry by looking for the sequence id', () => {\n      const entry = findInSequence(simpleSequence, '2');\n      expect(entry).not.toBe(null);\n      expect(entry?.custom.sequenceName).toBe('Sequence Item 2');\n    });\n\n    it(\"should return null when it doesn't find the sequence id\", () => {\n      const entry = findInSequence(simpleSequence, '3');\n      expect(entry).toBe(null);\n    });\n\n    it('should find an entry in a sequence by resourceId', () => {\n      const entry = findInSequenceByResourceId(simpleSequence, 2);\n      expect(entry).not.toBe(null);\n      expect(entry?.custom.sequenceName).toBe('Sequence Item 2');\n    });\n  });\n});\n"]}