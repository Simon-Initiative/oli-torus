{"version":3,"file":"rules_engine_test.js","sourceRoot":"","sources":["../../../test/adaptivity/rules_engine_test.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,qBAAqB,EACrB,uBAAuB,EACvB,oBAAoB,EACpB,gBAAgB,EAChB,wBAAwB,EACxB,0BAA0B,EAC1B,mBAAmB,GACpB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,0BAA0B,EAC1B,eAAe,EACf,OAAO,EACP,aAAa,EACb,QAAQ,EACR,kBAAkB,GACnB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,wBAAwB,EACxB,0BAA0B,EAC1B,qBAAqB,EACrB,sBAAsB,GACvB,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AACjF,OAAO,EACL,KAAK,EAEL,gBAAgB,IAAI,uBAAuB,GAE5C,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAChD,OAAO,EACL,8BAA8B,EAC9B,kBAAkB,EAClB,gBAAgB,EAChB,mBAAmB,EACnB,4BAA4B,EAC5B,wBAAwB,EACxB,SAAS,EACT,wBAAwB,GACzB,MAAM,eAAe,CAAC;AAEvB,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,MAAM,4BAA4B,GAAG,wBAAwB,EAAE,CAAC;IAEhE,EAAE,CAAC,2CAA2C,EAAE,GAAS,EAAE;QACzD,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,CAAC,MAAM,KAAK,CAC7C,EAAE,EACF,EAAE,EACF,4BAA4B,CAC7B,CAAgB,CAAC;QAElB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAS,EAAE;QAC3E,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACtC,SAAS,EACT,CAAC,kBAAkB,CAAC,EACpB,4BAA4B,CAC7B,CAAgB,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;QAClD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACtC,SAAS,EACT,CAAC,8BAA8B,EAAE,kBAAkB,CAAC,EACpD,4BAA4B,CAC7B,CAAgB,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,8BAA8B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAS,EAAE;QACjD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACtC,SAAS,EACT,CAAC,mBAAmB,CAAC,EACrB,4BAA4B,CAC7B,CAAgB,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrE,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,wFAAwF,EAAE,GAAS,EAAE;;QACtG,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACtC,SAAS,EACT,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,EACtC,4BAA4B,CAC7B,CAAgB,CAAC;QAElB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,MAAA,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,0CAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,GAAS,EAAE;;QACjF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACtC,SAAS,EACT,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,EACvC,4BAA4B,CAC7B,CAAgB,CAAC;QAElB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,MAAA,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,0CAAE,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,CAAC,MAAA,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,0CAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAS,EAAE;QACvE,MAAM,UAAU,GAAG,MAAM,KAAK,CAC5B,SAAS,EACT,CAAC,kBAAkB,CAAC,EACpB,4BAA4B,EAC5B,KAAK,CACN,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,KAAK,CACzB,SAAS,EACT,CAAC,kBAAkB,CAAC,EACpB,4BAA4B,EAC5B,IAAI,CACL,CAAC;QACF,MAAM,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;QACjD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;QACrD,MAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACvF,MAAM,EACJ,OAAO,EAAE,MAAM,EACf,KAAK,EACL,MAAM,GACP,GAAG,CAAC,MAAM,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,EAAE,qBAAqB,CAAC,CAAgB,CAAC;QACzF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAS,EAAE;QAClE,MAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,MAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,MAAM,UAAU,GAAG,CAAC,CAAC;QACrB,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACvF,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,CAC5B,SAAS,EACT,CAAC,kBAAkB,CAAC,EACpB,qBAAqB,CACtB,CAAgB,CAAC;QAClB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;QAC9D,MAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,MAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,MAAM,UAAU,GAAG,CAAC,CAAC;QACrB,MAAM,oBAAoB,GAAG,IAAI,CAAC;QAClC,MAAM,qBAAqB,GAAG,wBAAwB,CACpD,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,oBAAoB,CACrB,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,CAC5B,SAAS,EACT,CAAC,kBAAkB,CAAC,EACpB,qBAAqB,CACtB,CAAgB,CAAC;QAClB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAS,EAAE;QAC3D,MAAM,kBAAkB,GAAmB;YACzC,UAAU,EAAE,CAAC;YACb,QAAQ,EAAE,EAAE;YACZ,oBAAoB,EAAE,KAAK;YAC3B,oBAAoB,EAAE,IAAI;YAC1B,oBAAoB,EAAE,CAAC;SACxB,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACpC,SAAS,EACT,CAAC,wBAAwB,CAAC,EAC1B,kBAAkB,CACnB,CAAgB,CAAC;QAElB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAS,EAAE;QAC5E,MAAM,kBAAkB,GAAmB;YACzC,UAAU,EAAE,CAAC;YACb,QAAQ,EAAE,GAAG;YACb,oBAAoB,EAAE,KAAK;YAC3B,oBAAoB,EAAE,IAAI;YAC1B,oBAAoB,EAAE,CAAC;SACxB,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACpC,SAAS,EACT,CAAC,4BAA4B,CAAC,EAC9B,kBAAkB,CACnB,CAAgB,CAAC;QAElB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAS,EAAE;QAClE,MAAM,kBAAkB,GAAmB;YACzC,UAAU,EAAE,CAAC;YACb,QAAQ,EAAE,EAAE;YACZ,oBAAoB,EAAE,KAAK;YAC3B,oBAAoB,EAAE,IAAI;YAC1B,oBAAoB,EAAE,CAAC;SACxB,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CACpC,SAAS,EACT,CAAC,4BAA4B,CAAC,EAC9B,kBAAkB,CACnB,CAAgB,CAAC;QAElB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,CAAC,0BAA0B,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpD,MAAM,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnD,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,0BAA0B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,CAAC,uBAAuB,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtE,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjE,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/D,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,qBAAqB,CAAC,iCAAiC,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3F,MAAM,CAAC,qBAAqB,CAAC,iCAAiC,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC1F,MAAM,CAAC,qBAAqB,CAAC,iCAAiC,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7F,MAAM,CAAC,wBAAwB,CAAC,iCAAiC,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7E,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,0BAA0B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3D,MAAM,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,MAAM,CAAC,sBAAsB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  containsAnyOfOperator,\n  containsExactlyOperator,\n  containsOnlyOperator,\n  containsOperator,\n  notContainsAnyOfOperator,\n  notContainsExactlyOperator,\n  notContainsOperator,\n} from 'adaptivity/operators/contains';\nimport {\n  equalWithToleranceOperator,\n  isAnyOfOperator,\n  isEqual,\n  isNaNOperator,\n  notEqual,\n  notIsAnyOfOperator,\n} from 'adaptivity/operators/equality';\nimport {\n  hasSameTermsMathOperator,\n  isEquivalentOfMathOperator,\n  isExactlyMathOperator,\n  notExactlyMathOperator,\n} from 'adaptivity/operators/math';\nimport { inRangeOperator, notInRangeOperator } from 'adaptivity/operators/range';\nimport {\n  check,\n  CheckResult,\n  defaultWrongRule as builtinDefaultWrongRule,\n  ScoringContext,\n} from 'adaptivity/rules-engine';\nimport { parseArray } from 'utils/common';\nimport { b64EncodeUnicode } from 'utils/decode';\nimport {\n  complexRuleWithMultipleActions,\n  defaultCorrectRule,\n  defaultWrongRule,\n  disabledCorrectRule,\n  expressionScoringCorrectRule,\n  getAttemptScoringContext,\n  mockState,\n  simpleScoringCorrectRule,\n} from './rules_mocks';\n\ndescribe('Rules Engine', () => {\n  const correctAttemptScoringContext = getAttemptScoringContext();\n\n  it('should not break if empty state is passed', async () => {\n    const { results: successEvents } = (await check(\n      {},\n      [],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n\n    expect(successEvents.length).toEqual(1);\n    expect(successEvents[0].type).toEqual(builtinDefaultWrongRule.event.type);\n  });\n\n  it('should return successful events of rules with no conditions', async () => {\n    const { results: events } = (await check(\n      mockState,\n      [defaultCorrectRule],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n    expect(events.length).toEqual(1);\n    expect(events[0]).toEqual(defaultCorrectRule.event);\n  });\n\n  it('should evaluate complex conditions', async () => {\n    const { results: events } = (await check(\n      mockState,\n      [complexRuleWithMultipleActions, defaultCorrectRule],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n    expect(events.length).toEqual(2);\n    expect(events[0].type).toEqual(complexRuleWithMultipleActions.event.type);\n  });\n\n  it('should not process disabled rules', async () => {\n    const { results: events } = (await check(\n      mockState,\n      [disabledCorrectRule],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n    expect(events.length).toEqual(1);\n    expect(events[0].type).toEqual(builtinDefaultWrongRule.event.type);\n  });\n\n  it('should return the correct rule when there are both correct and incorrect DEFAULT rules', async () => {\n    const { results: events } = (await check(\n      mockState,\n      [defaultCorrectRule, defaultWrongRule],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n\n    expect(events.length).toEqual(1);\n    expect(events[0].params?.correct).toEqual(true);\n  });\n\n  it('should return the default rule when there are no other rules left', async () => {\n    const { results: events } = (await check(\n      mockState,\n      [disabledCorrectRule, defaultWrongRule],\n      correctAttemptScoringContext,\n    )) as CheckResult;\n\n    expect(events.length).toEqual(1);\n    expect(events[0].params?.correct).toEqual(false);\n    expect(events[0].params?.default).toEqual(true);\n  });\n\n  it('should return base64 encoded results if the flag is set', async () => {\n    const notEncoded = await check(\n      mockState,\n      [defaultCorrectRule],\n      correctAttemptScoringContext,\n      false,\n    );\n    const results = await check(\n      mockState,\n      [defaultCorrectRule],\n      correctAttemptScoringContext,\n      true,\n    );\n    expect(typeof results === 'string').toBeTruthy();\n    expect(results).toEqual(b64EncodeUnicode(JSON.stringify(notEncoded)));\n  });\n\n  it('should calculate attempt based scores', async () => {\n    const attempts = 4;\n    const maxScore = 10;\n    const maxAttempt = 10;\n    const attemptScoringContext = getAttemptScoringContext(attempts, maxScore, maxAttempt);\n    const {\n      results: events,\n      score,\n      out_of,\n    } = (await check(mockState, [defaultCorrectRule], attemptScoringContext)) as CheckResult;\n    expect(events.length).toEqual(1);\n    expect(score).toEqual(7);\n    expect(out_of).toEqual(10);\n  });\n\n  it('should not allow negative scores based on the flag', async () => {\n    const attempts = 4;\n    const maxScore = 1;\n    const maxAttempt = 1;\n    const attemptScoringContext = getAttemptScoringContext(attempts, maxScore, maxAttempt);\n    const { score } = (await check(\n      mockState,\n      [defaultCorrectRule],\n      attemptScoringContext,\n    )) as CheckResult;\n    expect(score).toEqual(0);\n  });\n\n  it('should allow negative scores based on the flag', async () => {\n    const attempts = 4;\n    const maxScore = 1;\n    const maxAttempt = 1;\n    const negativeScoreAllowed = true;\n    const attemptScoringContext = getAttemptScoringContext(\n      attempts,\n      maxScore,\n      maxAttempt,\n      negativeScoreAllowed,\n    );\n    const { score } = (await check(\n      mockState,\n      [defaultCorrectRule],\n      attemptScoringContext,\n    )) as CheckResult;\n    expect(score).toEqual(-2);\n  });\n\n  it('should calculate score based on trap states', async () => {\n    const trapScoringContext: ScoringContext = {\n      maxAttempt: 1,\n      maxScore: 10,\n      negativeScoreAllowed: false,\n      trapStateScoreScheme: true,\n      currentAttemptNumber: 1,\n    };\n    const { score, out_of } = (await check(\n      mockState,\n      [simpleScoringCorrectRule],\n      trapScoringContext,\n    )) as CheckResult;\n\n    expect(score).toEqual(10);\n    expect(out_of).toEqual(10);\n  });\n\n  it('should calculate score based on trap states with expressions', async () => {\n    const trapScoringContext: ScoringContext = {\n      maxAttempt: 1,\n      maxScore: 100,\n      negativeScoreAllowed: false,\n      trapStateScoreScheme: true,\n      currentAttemptNumber: 1,\n    };\n    const { score, out_of } = (await check(\n      mockState,\n      [expressionScoringCorrectRule],\n      trapScoringContext,\n    )) as CheckResult;\n\n    expect(score).toEqual(100);\n    expect(out_of).toEqual(100);\n  });\n\n  it('should respect the max score even with trap states', async () => {\n    const trapScoringContext: ScoringContext = {\n      maxAttempt: 1,\n      maxScore: 20,\n      negativeScoreAllowed: false,\n      trapStateScoreScheme: true,\n      currentAttemptNumber: 1,\n    };\n    const { score, out_of } = (await check(\n      mockState,\n      [expressionScoringCorrectRule],\n      trapScoringContext,\n    )) as CheckResult;\n\n    expect(score).toEqual(20);\n    expect(out_of).toEqual(20);\n  });\n});\n\ndescribe('Operators', () => {\n  describe('Equality Operators', () => {\n    it('should be able to test basic equality', () => {\n      expect(isEqual('a', 'a')).toEqual(true);\n      expect(isEqual(9, 9)).toEqual(true);\n      expect(isEqual([1, 2], [1, 2])).toEqual(true);\n      expect(notEqual(9, 3)).toEqual(true);\n      expect(notEqual('a', 'c')).toEqual(true);\n      expect(notEqual([3, 2], [1, 2])).toEqual(true);\n    });\n\n    it('should compare number equal with tolerance percentage', () => {\n      expect(equalWithToleranceOperator(110, [100, 10])).toEqual(true);\n    });\n\n    it('should compare equality with an array of values for any of', () => {\n      expect(isAnyOfOperator(9, [1, 3, 9])).toEqual(true);\n      expect(notIsAnyOfOperator(9, [1, 7])).toEqual(true);\n    });\n\n    it('should check if a value is NaN', () => {\n      expect(isNaNOperator('apple', true)).toEqual(true);\n      expect(isNaNOperator('123.34', false)).toEqual(true);\n    });\n  });\n\n  describe('Equalto Operators', () => {\n    it('should return false if all the values are not equal', () => {\n      expect(isEqual(['1', '2', '3', '4', '5'], ['1', '2', '3', '4', '5'])).toEqual(true);\n      expect(isEqual(['1', '2', '3', '4', '5'], ['1', '2', '3', '4'])).toEqual(false);\n    });\n  });\n\n  describe('Not Equal to Operators', () => {\n    it('should return false if all the values are not equal', () => {\n      expect(notEqual(['1', '2', '3', '4', '5'], [])).toEqual(true);\n      expect(notEqual(['1', '2', '3', '4', '5'], ['1', '2', '3', '4', '5'])).toEqual(false);\n    });\n  });\n\n  describe('Contains Operators', () => {\n    it('should return false if either value is not provided', () => {\n      expect(containsOperator(null, null)).toEqual(false);\n      expect(containsAnyOfOperator(null, null)).toEqual(false);\n      expect(containsOnlyOperator(null, null)).toEqual(false);\n      expect(containsExactlyOperator(null, null)).toEqual(false);\n    });\n\n    it('should return the opposite for the \"not\" versions', () => {\n      expect(notContainsOperator(null, null)).toEqual(true);\n      expect(notContainsExactlyOperator(null, null)).toEqual(true);\n      expect(notContainsAnyOfOperator(null, null)).toEqual(true);\n    });\n\n    it('should match the content of arrays and strings for exactly', () => {\n      expect(containsExactlyOperator(['a', 'b'], ['a', 'b'])).toEqual(true);\n      expect(containsExactlyOperator('abc', 'abc')).toEqual(true);\n    });\n\n    it('should match string contains as partial', () => {\n      expect(containsOperator('abcd', 'abc')).toEqual(true);\n      expect(notContainsOperator('abcd', 'cde')).toEqual(true);\n    });\n\n    it('should check stringy arrays', () => {\n      expect(containsOperator('[a,b,c]', 'a')).toEqual(true);\n      expect(containsOperator([9, 8, 7], '9,8')).toEqual(true);\n    });\n\n    it('should check contains only', () => {\n      expect(containsOnlyOperator([8, 3, 1], [1, 3, 8])).toEqual(true);\n      expect(containsOnlyOperator([8, 3, 1], [1, 3])).toEqual(false);\n      expect(containsOnlyOperator([8, 3, 1], '3,1,8')).toEqual(true);\n    });\n  });\n\n  describe('ContainsanyOf Operators', () => {\n    it('should check containsany Of', () => {\n      expect(containsAnyOfOperator('[March,June,September,December]', 'December')).toEqual(true);\n      expect(containsAnyOfOperator('[March,June,September,December]', 'winter')).toEqual(false);\n      expect(containsAnyOfOperator('[March,June,September,December]', '[December]')).toEqual(true);\n      expect(notContainsAnyOfOperator('[March,June,September,December]', '[winter]')).toEqual(true);\n    });\n  });\n\n  describe('Parse Array String', () => {\n    expect(parseArray(['1', '2', '3'])).toEqual([1, 2, 3]);\n    expect(parseArray(['1', 2, '3'])).toEqual([1, 2, 3]);\n    expect(parseArray(['Stem', 'Options', '3'])).toEqual(['Stem', 'Options', 3]);\n    expect(parseArray(['Stem', 'Option1', 'Option2'])).toEqual(['Stem', 'Option1', 'Option2']);\n    expect(parseArray('Stem,Option1,Option2')).toEqual(['Stem', 'Option1', 'Option2']);\n  });\n\n  describe('Range Operators', () => {\n    it('should return true if the number is inside or on the edge of the range', () => {\n      expect(inRangeOperator(9, [1, 10])).toEqual(true);\n      expect(inRangeOperator(9, [1, 9])).toEqual(true);\n    });\n\n    it('should return false if the number is outside of the range', () => {\n      expect(inRangeOperator(9, [10, 20])).toEqual(false);\n      expect(notInRangeOperator(9, [10, 20])).toEqual(true);\n    });\n  });\n\n  describe('Math Operators', () => {\n    it('should result in true if both parameters are identical', () => {\n      expect(isExactlyMathOperator('x', 'x')).toEqual(true);\n      expect(isEquivalentOfMathOperator('x', 'x')).toEqual(true);\n      expect(hasSameTermsMathOperator('x', 'x')).toEqual(true);\n    });\n\n    it('should return true for the not exactly if they are not the same', () => {\n      expect(notExactlyMathOperator('x', 'y')).toEqual(true);\n    });\n  });\n});\n"]}