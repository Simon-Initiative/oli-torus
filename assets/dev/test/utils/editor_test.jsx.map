{"version":3,"file":"editor_test.jsx","sourceRoot":"","sources":["../../../test/utils/editor_test.tsx"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,KAAK,KAAK,MAAM,0BAA0B,CAAC;AAClD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,2BAA2B,CAAC;AACnC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,YAAY,EAAc,OAAO,EAAE,MAAM,OAAO,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,+CAA+C,CAAC;AAInF,MAAM,cAAc,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAEjE,MAAM,CAAC,MAAM,UAAU,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC;AACpD,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAe,cAAc,CAAC,QAAQ,CAAC,CAAC;IAChF,OAAO,CACL,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAC1D;MAAA,CAAC,QAAQ,CACP,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CACvB,SAAS,CAAC,KAAK,CAAC,OAAuB,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CACjF,CACD,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAC9C,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CACnB;YAAA,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CACvB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACpD,QAAQ,CACT,CACH;UAAA,EAAE,IAAI,CAAC,CACR,CAAC,CACF,WAAW,CAAC,oBAAoB,EAEpC;IAAA,EAAE,KAAK,CAAC,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,CAAC,CAAC,mBAAmB,CAAC,AAAD,EAAG,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAW,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChF,MAAM,UAAU,GAAG,KAAK,CAAC,cAAc,CAAY,UAAU,EAAE,GAAG,CAAC,CAAC;QACpE,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IACvF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { render } from '@testing-library/react';\nimport * as Utils from 'components/editing/utils';\nimport React from 'react';\nimport '@testing-library/jest-dom';\nimport { Editable, Slate, withReact } from 'slate-react';\nimport { createEditor, Descendant, Element } from 'slate';\nimport { editorFor, markFor } from 'components/editing/editor/modelEditorDispatch';\nimport { ModelElement, InputRef, Paragraph } from 'data/content/model/elements/types';\nimport { Mark } from 'data/content/model/text';\n\nconst exampleContent = require('../writer/example_content.json');\n\nexport const testEditor = withReact(createEditor());\nexport const TestEditorComponent = () => {\n  const [value, setValue] = React.useState<Descendant[]>(exampleContent.children);\n  return (\n    <Slate editor={testEditor} value={value} onChange={setValue}>\n      <Editable\n        renderElement={(props) =>\n          editorFor(props.element as ModelElement, props, testEditor, { projectSlug: '' })\n        }\n        renderLeaf={({ attributes, children, leaf }) => (\n          <span {...attributes}>\n            {Object.keys(leaf).reduce(\n              (m, k) => (k !== 'text' ? markFor(k as Mark, m) : m),\n              children,\n            )}\n          </span>\n        )}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  );\n};\n\ndescribe('slate editor utils', () => {\n  it('can find elements of type', () => {\n    render(<TestEditorComponent />);\n    expect(Utils.elementsOfType<InputRef>(testEditor, 'input_ref')).toHaveLength(0);\n    const paragraphs = Utils.elementsOfType<Paragraph>(testEditor, 'p');\n    expect(paragraphs).toHaveLength(17);\n    expect(paragraphs.every((p) => Element.isElement(p) && p.type === 'p')).toBeTruthy();\n  });\n});\n"]}