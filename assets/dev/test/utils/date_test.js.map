{"version":3,"file":"date_test.js","sourceRoot":"","sources":["../../../test/utils/date_test.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseDate, compareDates, relativeTo } from 'utils/date';\n\n// must include Z in date constructor to avoid timezone weirdness\n// parseDate is simply new Date() without timezone correction\n// however, parseDate is far less robust and requires a very specific input format\nit('parseDate test', () => {\n  expect(parseDate('May 5, 2019 3:24:00 AM')).toEqual(new Date('2019-05-05T03:24:00Z'));\n  expect(parseDate('Nov 13, 1987 3:51:40 PM')).toEqual(new Date('1987-11-13T15:51:40Z'));\n  expect(parseDate('Jan 1, 2077 12:00:00 AM')).toEqual(new Date('2077-01-01T00:00:00Z'));\n  expect(parseDate('Dec 31, 1 11:59:59 PM')).toEqual(new Date('1901-12-31T23:59:59Z'));\n});\n\n// just subtracts two dates as ms numbers\nit('compareDates test', () => {\n  const date = new Date();\n  expect(compareDates(date, date)).toBe(0);\n  expect(compareDates(new Date(500000001999), new Date(500000000000))).toBe(1999);\n  expect(compareDates(new Date(500000000000), new Date(500000001999))).toBe(-1999);\n  expect(compareDates(\n    new Date('2019-05-05T03:24'),\n    new Date('May 5, 2019 3:24:00 AM'))).toEqual(0);\n});\n\n// testing for all 13 possible outputs\n// takes dates in chronological order as arguments, here expressed in ms\n// numbers calculated using constants from relativeTo function\n// tests should be exactly on the margin between different timestamps\nit('relativeTo test', () => {\n  expect(relativeTo(new Date(),\n    new Date())).toBe('just now');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000001999))).toBe('just now');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000002000))).toBe('a few seconds ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000006999))).toBe('a few seconds ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000007000))).toBe('7 seconds ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000059999))).toBe('59 seconds ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000060000))).toBe('a minute ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000119999))).toBe('a minute ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500000120000))).toBe('2 minutes ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500003599999))).toBe('59 minutes ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500003600000))).toBe('an hour ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500007199999))).toBe('an hour ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500007200000))).toBe('2 hours ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500086399999))).toBe('23 hours ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500086400000))).toBe('a day ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500172799999))).toBe('a day ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500172800000))).toBe('2 days ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500518399999))).toBe('5 days ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(500518400000))).toBe('a week ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(501209599999))).toBe('a week ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(501209600000))).toBe('2 weeks ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(502635199999))).toBe('4 weeks ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(502635200000))).toBe('a month ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(505270399999))).toBe('a month ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(505270400000))).toBe('2 months ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(528900799999))).toBe('10 months ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(528900800000))).toBe('a year ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(563071999999))).toBe('a year ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date(563072000000))).toBe('2 years ago');\n  expect(relativeTo(new Date(500000000000),\n    new Date('June 21, 2019 2:24:00 PM'))).toBe('33 years ago');\n});\n"]}