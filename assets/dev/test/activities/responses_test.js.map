{"version":3,"file":"responses_test.js","sourceRoot":"","sources":["../../../test/activities/responses_test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResponseActions } from 'components/activities/common/responses/responseActions';\nimport { DEFAULT_PART_ID } from 'components/activities/common/utils';\nimport {\n  ChoiceIdsToResponseId,\n  HasChoices,\n  HasParts,\n  makeChoice,\n  makeFeedback,\n  makeResponse,\n  ScoringStrategy,\n} from 'components/activities/types';\nimport { getResponses } from 'data/activities/model/responses';\nimport { matchRule } from 'data/activities/model/rules';\nimport { dispatch } from 'utils/test_utils';\n\ndescribe('responses', () => {\n  const choice = makeChoice('a');\n  const response = makeResponse(matchRule(choice.id), 1, '');\n  const model: HasParts & HasChoices & { authoring: { targeted: ChoiceIdsToResponseId[] } } = {\n    choices: [choice],\n    authoring: {\n      targeted: [[[choice.id], response.id]],\n      parts: [\n        {\n          id: DEFAULT_PART_ID,\n          responses: [response, makeResponse(matchRule('.*'), 0, '')],\n          hints: [],\n          scoringStrategy: {} as ScoringStrategy,\n        },\n      ],\n    },\n  };\n  it('can edit feedback', () => {\n    const newFeedbackContent = makeFeedback('new content').content;\n    const firstFeedback = model.authoring.parts[0].responses[0];\n    expect(\n      dispatch(model, ResponseActions.editResponseFeedback(firstFeedback.id, newFeedbackContent))\n        .authoring.parts[0].responses[0].feedback,\n    ).toHaveProperty('content', newFeedbackContent);\n  });\n\n  it('can edit rules', () => {\n    const response = getResponses(model)[0];\n    const newModel = dispatch(model, ResponseActions.editRule(response.id, 'rule'));\n    expect(getResponses(newModel)[0].rule).toBe('rule');\n  });\n\n  it('can remove responses', () => {\n    const response = getResponses(model)[0];\n    const newModel = dispatch(model, ResponseActions.removeResponse(response.id));\n    expect(getResponses(newModel)).toHaveLength(1);\n  });\n\n  it('can remove targeted feedback (responses)', () => {\n    const response = getResponses(model)[0];\n    const newModel = dispatch(model, ResponseActions.removeTargetedFeedback(response.id));\n    expect(newModel.authoring.parts[0].responses).toHaveLength(1);\n    expect(newModel.authoring.targeted).toHaveLength(0);\n  });\n});\n"]}