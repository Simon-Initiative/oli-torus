{"version":3,"file":"redux_delivery_test.js","sourceRoot":"","sources":["../../../test/activities/redux_delivery_test.ts"],"names":[],"mappings":"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","sourcesContent":["import { defaultCATAModel } from 'components/activities/check_all_that_apply/utils';\nimport { defaultDeliveryElementProps } from '../utils/activity_mocks';\nimport '@testing-library/jest-dom';\nimport { configureStore } from 'state/store';\nimport { activityDeliverySlice, setSelection } from 'data/activities/DeliveryState';\nimport { makeHint } from 'components/activities/types';\nimport { Dispatch, Store } from 'redux';\nimport { ActivityDeliveryState, initializeState } from 'data/activities/DeliveryState';\nimport {\n  defaultActivityState,\n  initialPartInputs,\n  stringToStudentInput,\n  studentInputToString,\n} from 'data/activities/utils';\nimport { DEFAULT_PART_ID } from 'components/activities/common/utils';\n\ndescribe('activity delivery state management', () => {\n  const model = defaultCATAModel();\n  model.authoring.parts[0].hints.push(makeHint('Hint 1'));\n  const props = {\n    model,\n    activitySlug: 'activity-slug',\n    state: Object.assign(defaultActivityState(model), { hasMoreHints: false }),\n    graded: false,\n    preview: false,\n  };\n  const { onSaveActivity } = defaultDeliveryElementProps;\n  const store: Store<ActivityDeliveryState> = configureStore({}, activityDeliverySlice.reducer);\n  const dispatch: Dispatch<any> = store.dispatch;\n\n  it('can initialize state', () => {\n    dispatch(initializeState(props.state, initialPartInputs(props.state)));\n    expect(store.getState().attemptState).toEqual(props.state);\n    const partState = store.getState().partState[DEFAULT_PART_ID];\n    expect(partState).toBeTruthy();\n    expect(partState.hintsShown).toEqual(props.state.parts[0].hints);\n    expect(partState.hasMoreHints).toBe(true);\n    expect(partState.studentInput).toEqual([]);\n  });\n\n  it('can select single choices', () => {\n    dispatch(initializeState(props.state, initialPartInputs(props.state)));\n    dispatch(setSelection(DEFAULT_PART_ID, model.choices[0].id, onSaveActivity, 'single'));\n    expect(store.getState().partState[DEFAULT_PART_ID]?.studentInput).toEqual([\n      model.choices[0].id,\n    ]);\n  });\n\n  it('can select multiple choices', () => {\n    dispatch(initializeState(props.state, initialPartInputs(props.state)));\n    dispatch(setSelection(DEFAULT_PART_ID, model.choices[0].id, onSaveActivity, 'multiple'));\n    dispatch(setSelection(DEFAULT_PART_ID, model.choices[1].id, onSaveActivity, 'multiple'));\n    expect(store.getState().partState[DEFAULT_PART_ID]?.studentInput).toEqual([\n      model.choices[0].id,\n      model.choices[1].id,\n    ]);\n  });\n\n  it('can convert input to selections used by components and back', () => {\n    let selection = [model.choices[0].id];\n    expect(studentInputToString(selection)).toEqual(model.choices[0].id);\n    selection = model.choices.map((c) => c.id);\n    expect(studentInputToString(selection)).toEqual(\n      `${model.choices[0].id} ${model.choices[1].id}`,\n    );\n\n    let input = '123';\n    expect(stringToStudentInput(input)).toEqual(['123']);\n    input = '123 456';\n    expect(stringToStudentInput(input)).toEqual(['123', '456']);\n  });\n});\n"]}