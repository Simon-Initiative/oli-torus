{"version":3,"file":"rules_test.js","sourceRoot":"","sources":["../../../test/activities/rules_test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  andRules,\n  btwRule,\n  containsRule,\n  matchListRule,\n  eqRule,\n  gteRule,\n  gtRule,\n  invertRule,\n  lteRule,\n  ltRule,\n  matchRule,\n  nbtwRule,\n  neqRule,\n  notContainsRule,\n  orRules,\n  matchInOrderRule,\n} from 'data/activities/model/rules';\n\ndescribe('rules', () => {\n  it('match rule', () => {\n    expect(matchRule('id')).toBe('input like {id}');\n  });\n\n  it('contains rule', () => {\n    expect(containsRule('id')).toBe('input contains {id}');\n  });\n\n  it('not contains rule', () => {\n    expect(notContainsRule('id')).toBe('(!(input contains {id}))');\n  });\n\n  it('equals rule', () => {\n    expect(eqRule('id')).toBe('input = {id}');\n  });\n\n  it('not equals rule', () => {\n    expect(neqRule('id')).toBe('(!(input = {id}))');\n  });\n\n  it('less than rule', () => {\n    expect(ltRule('id')).toBe('input < {id}');\n  });\n\n  it('less than or equal rule', () => {\n    expect(lteRule('id')).toBe('input = {id} || (input < {id})');\n  });\n\n  it('greater than rule', () => {\n    expect(gtRule('id')).toBe('input > {id}');\n  });\n\n  it('greater than or equal rule', () => {\n    expect(gteRule('id')).toBe('input = {id} || (input > {id})');\n  });\n\n  it('between two numbers rule', () => {\n    expect(btwRule('1', '2')).toBe(\n      'input = {2} || (input < {2}) && (input = {1} || (input > {1}))',\n    );\n  });\n\n  it('not between two numbers', () => {\n    expect(nbtwRule('1', '2')).toBe(\n      '(!(input = {2} || (input < {2}) && (input = {1} || (input > {1}))))',\n    );\n  });\n\n  it('invert rule', () => {\n    expect(invertRule(matchRule('id'))).toBe('(!(input like {id}))');\n  });\n\n  it('and rules', () => {\n    expect(andRules(matchRule('id1'), invertRule(matchRule('id2')))).toBe(\n      '(!(input like {id2})) && (input like {id1})',\n    );\n  });\n\n  it('or rules', () => {\n    expect(orRules(matchRule('id1'), matchRule('id2'))).toBe(\n      'input like {id2} || (input like {id1})',\n    );\n  });\n\n  it('can create rules to match ordering questions', () => {\n    const ordering1 = ['id1', 'id2', 'id3'];\n    const ordering2 = ['id3', 'id2', 'id1'];\n    expect(matchInOrderRule(ordering1)).toEqual('input like {id1 id2 id3}');\n    expect(matchInOrderRule(ordering2)).toEqual('input like {id3 id2 id1}');\n  });\n\n  it('can create rules to match certain ids and not match others', () => {\n    const toMatch = ['id1', 'id2'];\n    const allChoiceIds = [...toMatch, 'id3'];\n    expect(matchListRule(allChoiceIds, toMatch)).toEqual(\n      '(!(input like {id3})) && (input like {id2} && (input like {id1}))',\n    );\n  });\n});\n"]}