{"timestamp":"2025-09-13T22:56:02.580Z","type":"session_meta","payload":{"id":"696b1d48-aacf-4e23-8f52-af024f97d58f","timestamp":"2025-09-13T22:56:02.570Z","cwd":"/Users/darren/dev/oli-torus","originator":"codex_cli_rs","cli_version":"0.34.0","instructions":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Project Overview\n\nOLI Torus is a sophisticated learning engineering platform built with Elixir/Phoenix (backend) and TypeScript/React (frontend). It provides course authoring and delivery capabilities with tight LMS integration via LTI 1.3.\n\n## Essential Commands\n\n### Backend (Elixir/Phoenix)\n\n```bash\n# Install dependencies\nmix deps.get\n\n# Run development server\nmix phx.server\n\n# Run tests\nmix test\n\n# Run specific test file\nmix test test/path/to/test_file.exs\n\n# Format code\nmix format\n\n# Reset database\nmix ecto.reset\n```\n\n### Frontend (TypeScript/React)\n\n```bash\n# Navigate to assets directory first\ncd assets\n\n# Install dependencies\nyarn install\n\n# Run tests\nyarn test\n\n# Run specific test\nyarn test path/to/test\n\n# Format code\nyarn format\n```\n\n## High-Level Architecture\n\n### Backend Structure (Elixir/Phoenix)\n\nThe backend follows Phoenix context pattern with clear separation of concerns:\n\n#### Core Contexts (`lib/oli/`)\n- **Authoring**: Project management, collaboration, content creation\n- **Delivery**: Section management, student progress, grading\n- **Activities**: Extensible activity framework with registration system\n- **Resources**: Content versioning with resource/revision pattern\n- **Publishing**: Publication and deployment workflow\n- **LTI**: LTI 1.3 integration for LMS connectivity\n- **Accounts**: User and author management\n\n#### Web Layer (`lib/oli_web/`)\n- **Controllers**: Traditional HTTP endpoints\n- **LiveViews**: Real-time interactive UI components\n- **API**: REST endpoints for frontend integration\n- **Plugs**: Middleware for auth, authorization, request processing\n\n### Frontend Structure (TypeScript/React)\n\nLocated in `assets/src/`:\n\n- **apps/**: Main application entry points (AuthoringApp, DeliveryApp, etc.)\n- **components/**: Reusable UI components\n- **components/activities/**: Activity type implementations\n- **hooks/**: Phoenix hooks and React custom hooks\n- **state/**: Redux state management\n- **phoenix/**: Phoenix/LiveView integration code\n\n### Key Architectural Patterns\n\n1. **Resource/Revision Pattern**: All content is versioned through resources (containers) and revisions (specific versions)\n2. **Publication Model**: Projects are published to create immutable publications, which are then deployed to sections\n3. **Activity Framework**: Plugin-based system for adding new activity types via manifests\n4. **Multi-tenancy**: Institution-based data separation with proper authorization\n5. **Phoenix Clustering**: Horizontal scaling with distributed Erlang\n\n## Database Schema\n\nPostgreSQL with Ecto ORM. Key tables:\n- `projects`: Course authoring projects\n- `sections`: Course delivery instances\n- `resources` & `revisions`: Versioned content\n- `activities`: Activity configurations\n- `users` & `authors`: Account management\n- `enrollments`: Student-section relationships\n- `attempts`: Student activity attempts\n\n## Activity Development\n\nActivities are self-contained components with:\n- Manifest file defining metadata\n- Authoring component (React)\n- Delivery component (React)\n- Model schema (JSON)\n- Evaluation logic\n\nExample activity types: Multiple Choice, Short Answer, File Upload, Multi-Input, etc.\n\n## Testing Approach\n\n- **Backend**: ExUnit tests in `test/` directory\n- **Frontend**: Jest tests alongside source files\n- Use factories for test data generation\n- Integration tests for critical workflows\n- Always run tests before committing\n\n## Common Development Tasks\n\n### Adding a New Page/LiveView\n1. Create LiveView module in `lib/oli_web/live/`\n2. Add route in `lib/oli_web/router.ex`\n3. Create corresponding templates if needed\n4. Add tests in `test/oli_web/live/`\n\n### Modifying Activities\n1. Update activity manifest in `assets/src/components/activities/[activity_type]/`\n2. Modify authoring/delivery components\n3. Update model schema if needed\n4. Test both authoring and delivery modes\n\n### Working with Resources/Content\n1. Use `Oli.Resources` context for content operations\n2. Always work with revisions, not resources directly\n3. Respect the publication model - don't modify published content\n4. Use proper authorization checks\n\n## Important Considerations\n\n- **LTI Context**: Many features depend on LTI launch context from LMS\n- **Multi-tenancy**: Always scope data by institution/section\n- **Versioning**: Content is immutable once published\n- **Real-time Updates**: Use Phoenix PubSub for real-time features\n- **Background Jobs**: Use Oban for async processing\n- **Caching**: Leverage Cachex for performance-critical paths\n\n## Code Style Guidelines\n\n- Follow Elixir formatting standards (use `mix format`)\n- Always put alias and import statements at the top of a file\n- TypeScript code uses ESLint configuration\n- React components should be functional with hooks\n- Prefer composition over inheritance\n- Keep contexts focused and cohesive\n- Rarely use \"if\", prefer \"case\" statements\n- Use the \"with\" construct to avoid nested \"case\" statements\n\n## Debugging Tips\n\n- Use `IO.inspect` for Elixir debugging\n- Browser DevTools for React debugging\n- Phoenix LiveDashboard at `/admin/live_dashboard` (dev mode)\n- Check `assets/webpack.config.js` for frontend build configuration\n- Database queries can be inspected with Ecto query logging","git":{"commit_hash":"5620b1fa21383fb6a1b74b3ef5ee3dc79700f6d7","branch":"codex-cli","repository_url":"git@github.com:Simon-Initiative/oli-torus.git"}}}
{"timestamp":"2025-09-13T22:56:02.581Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<user_instructions>\n\n# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Project Overview\n\nOLI Torus is a sophisticated learning engineering platform built with Elixir/Phoenix (backend) and TypeScript/React (frontend). It provides course authoring and delivery capabilities with tight LMS integration via LTI 1.3.\n\n## Essential Commands\n\n### Backend (Elixir/Phoenix)\n\n```bash\n# Install dependencies\nmix deps.get\n\n# Run development server\nmix phx.server\n\n# Run tests\nmix test\n\n# Run specific test file\nmix test test/path/to/test_file.exs\n\n# Format code\nmix format\n\n# Reset database\nmix ecto.reset\n```\n\n### Frontend (TypeScript/React)\n\n```bash\n# Navigate to assets directory first\ncd assets\n\n# Install dependencies\nyarn install\n\n# Run tests\nyarn test\n\n# Run specific test\nyarn test path/to/test\n\n# Format code\nyarn format\n```\n\n## High-Level Architecture\n\n### Backend Structure (Elixir/Phoenix)\n\nThe backend follows Phoenix context pattern with clear separation of concerns:\n\n#### Core Contexts (`lib/oli/`)\n- **Authoring**: Project management, collaboration, content creation\n- **Delivery**: Section management, student progress, grading\n- **Activities**: Extensible activity framework with registration system\n- **Resources**: Content versioning with resource/revision pattern\n- **Publishing**: Publication and deployment workflow\n- **LTI**: LTI 1.3 integration for LMS connectivity\n- **Accounts**: User and author management\n\n#### Web Layer (`lib/oli_web/`)\n- **Controllers**: Traditional HTTP endpoints\n- **LiveViews**: Real-time interactive UI components\n- **API**: REST endpoints for frontend integration\n- **Plugs**: Middleware for auth, authorization, request processing\n\n### Frontend Structure (TypeScript/React)\n\nLocated in `assets/src/`:\n\n- **apps/**: Main application entry points (AuthoringApp, DeliveryApp, etc.)\n- **components/**: Reusable UI components\n- **components/activities/**: Activity type implementations\n- **hooks/**: Phoenix hooks and React custom hooks\n- **state/**: Redux state management\n- **phoenix/**: Phoenix/LiveView integration code\n\n### Key Architectural Patterns\n\n1. **Resource/Revision Pattern**: All content is versioned through resources (containers) and revisions (specific versions)\n2. **Publication Model**: Projects are published to create immutable publications, which are then deployed to sections\n3. **Activity Framework**: Plugin-based system for adding new activity types via manifests\n4. **Multi-tenancy**: Institution-based data separation with proper authorization\n5. **Phoenix Clustering**: Horizontal scaling with distributed Erlang\n\n## Database Schema\n\nPostgreSQL with Ecto ORM. Key tables:\n- `projects`: Course authoring projects\n- `sections`: Course delivery instances\n- `resources` & `revisions`: Versioned content\n- `activities`: Activity configurations\n- `users` & `authors`: Account management\n- `enrollments`: Student-section relationships\n- `attempts`: Student activity attempts\n\n## Activity Development\n\nActivities are self-contained components with:\n- Manifest file defining metadata\n- Authoring component (React)\n- Delivery component (React)\n- Model schema (JSON)\n- Evaluation logic\n\nExample activity types: Multiple Choice, Short Answer, File Upload, Multi-Input, etc.\n\n## Testing Approach\n\n- **Backend**: ExUnit tests in `test/` directory\n- **Frontend**: Jest tests alongside source files\n- Use factories for test data generation\n- Integration tests for critical workflows\n- Always run tests before committing\n\n## Common Development Tasks\n\n### Adding a New Page/LiveView\n1. Create LiveView module in `lib/oli_web/live/`\n2. Add route in `lib/oli_web/router.ex`\n3. Create corresponding templates if needed\n4. Add tests in `test/oli_web/live/`\n\n### Modifying Activities\n1. Update activity manifest in `assets/src/components/activities/[activity_type]/`\n2. Modify authoring/delivery components\n3. Update model schema if needed\n4. Test both authoring and delivery modes\n\n### Working with Resources/Content\n1. Use `Oli.Resources` context for content operations\n2. Always work with revisions, not resources directly\n3. Respect the publication model - don't modify published content\n4. Use proper authorization checks\n\n## Important Considerations\n\n- **LTI Context**: Many features depend on LTI launch context from LMS\n- **Multi-tenancy**: Always scope data by institution/section\n- **Versioning**: Content is immutable once published\n- **Real-time Updates**: Use Phoenix PubSub for real-time features\n- **Background Jobs**: Use Oban for async processing\n- **Caching**: Leverage Cachex for performance-critical paths\n\n## Code Style Guidelines\n\n- Follow Elixir formatting standards (use `mix format`)\n- Always put alias and import statements at the top of a file\n- TypeScript code uses ESLint configuration\n- React components should be functional with hooks\n- Prefer composition over inheritance\n- Keep contexts focused and cohesive\n- Rarely use \"if\", prefer \"case\" statements\n- Use the \"with\" construct to avoid nested \"case\" statements\n\n## Debugging Tips\n\n- Use `IO.inspect` for Elixir debugging\n- Browser DevTools for React debugging\n- Phoenix LiveDashboard at `/admin/live_dashboard` (dev mode)\n- Check `assets/webpack.config.js` for frontend build configuration\n- Database queries can be inspected with Ecto query logging\n\n</user_instructions>"}]}}
{"timestamp":"2025-09-13T22:56:02.581Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<environment_context>\n  <cwd>/Users/darren/dev/oli-torus</cwd>\n  <approval_policy>on-request</approval_policy>\n  <sandbox_mode>workspace-write</sandbox_mode>\n  <network_access>restricted</network_access>\n  <shell>bash</shell>\n</environment_context>"}]}}
