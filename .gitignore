.vscode
lib/oli/analytics/test.xml
Mnesia.nonode@nohost

# IDEA
*.iml
*.ipr
*.iws
/.idea/

# The directory where the NodeJS Elixir bridge will read files from
/priv/node/

# The directory Mix will write compiled artifacts to.
/_build/

# If you run "mix test --cover", coverage assets end up here.
/cover/

# `mix test.hound` will output failing test results here
/test-results/

# The directory Mix downloads your dependencies sources to.
/deps/

# Where 3rd-party dependencies like ExDoc output generated docs.
/doc/

# Ignore .fetch files in case you like to edit your project deps locally.
/.fetch

# If the VM crashes, it generates a dump, let's ignore it too.
erl_crash.dump

# Also ignore archive artifacts (built via "mix archive.build").
*.ez

# Ignore package tarball (built via "mix hex.build").
oli-*.tar

# If NPM crashes, it generates a log, let's ignore it too.
npm-debug.log

# The directory NPM downloads your dependencies sources to.
/assets/node_modules/

# Since we are building assets from assets/ we ignore priv/static
/priv/static/

# Ignore generated flame graph stack files
/_flame_graph_stacks/

# Ignore branding and other custom assets
/assets/static/custom/*
!/assets/static/custom/README.md

# Ignore custom themes
/assets/styles/themes/authoring/custom/*
!/assets/styles/themes/authoring/custom/README.md
/assets/styles/themes/delivery/custom/*
!/assets/styles/themes/delivery/custom/README.md

oli.env
postgres.env
/assets/test-results/
/assets/coverage/
.devmode
.elixir_ls
.DS_Store
/amisc/
/docker-compose-dev.yml
assets/yarn.lock
lib/oli/analytics/test.xml
.devcontainer
registrations.json
seeds.json
docker-compose.override.yml
supervisord.log
supervisord.pid
stacks.out
.mnesia
yarn-error.log
/priv/superactivity/
