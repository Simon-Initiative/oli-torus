<style>
  [draggable] {
    user-select: none;
    cursor: move;
    }

.link-page {
  margin: 0px;
}
.link-delete {
  color: #EB5757;
  margin: 0px;
  margin-left: 30px;
}

li.page {
  height: 50px;
}

li.over {
  background: #DDDDDD;
}

li.page:hover{
  background: #EEEEEE;
}
li.page:last-child:hover{
  background: transparent;
}
</style>

<%# Wait until live-view to re-add keyboard reordering? %>

<div style="margin: 20px;">

<div style="float: right;">
  <%= button "Add Page", method: "post", class: "btn btn-primary m-2", to: Routes.curriculum_path(@conn, :create, @project, %{"type" => "Unscored"}) %>
  <%= button "Add Assessment", method: "post", class: "btn btn-primary", to: Routes.curriculum_path(@conn, :create, @project, %{"type" => "Scored"}) %>
</div>

<p>
  <small>Drag to change the order that content will be presented to students</small>
</p>

<ol id="list" style="list-style-type: none; margin-top: 40px;">
  <%= for {page, index} <- Enum.with_index(@pages) do %>
    <li
      class="page"
      draggable="true"
      ondragenter="dragEnter(event)"
      ondragend="dragEnd(event)"
      ondragstart="itemDragStarted(event, '<%= page.slug %>', <%= index %>)"
      ondragover="itemDraggingOver(event)"
      id="<%= page.slug %>"
      ondrop="itemDropped(event, <%= index %>)"
    >
      <div class="d-flex p-1" style="align-items: center;">
        <span style="margin-top: 4px;"><%= case page.graded do
          false -> render "icon_unscored_page.html"
          true -> render "icon_scored_page.html"
        end %></span>
        <span class="p-2" style="text-align: top;"><%= index + 1 %>. </span>
        <%= link page.title, to: Routes.resource_path(@conn, :edit, @project, page.slug), class: "link-page" %>
        <%= link "Delete", to: Routes.curriculum_path(@conn, :delete, @project, page.slug), method: :delete, data: [confirm: "Are you sure?"], class: "link-delete" %>

      </div>
    </li>
  <% end %>
  <li
    class="page"
    ondragenter="dragEnter(event)"
    ondragover="itemDraggingOver(event)"
    ondrop="itemDropped(event, <%= length(@pages) %>)"
    >

  </li>
</ol>

</div>

<script>
  const list = document.getElementById('list')

  function getLi(target) {
    if (target.nodeName !== 'LI') {
      target = target.parentNode;
    }
    return target
  }

  function dragEnter(event) {

    const t = event.currentTarget;

    if (t.nodeName === 'LI') {
      event.stopPropagation();
      event.preventDefault();

      $(".page").removeClass("over");
      t.className = "page over"
    }
  }

  function dragEnd(event) {
    $(".page").removeClass("over");
  }

  function insertAfter(newNode, existingNode) {
    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);
  }

  function itemDragStarted(e, slug, index) {
    let target = getLi(e.target)

    const data = JSON.stringify({
      slug,
      index,
      id: target.id,
    })

    event.dataTransfer.setData('text/plain', data)
    event.dataTransfer.effectAllowed = 'move';
  }

  function itemDraggingOver(e) {
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
  }

  function itemDropped(e, index) {
    e.preventDefault()
    e.stopPropagation()

    const data = JSON.parse(event.dataTransfer.getData('text/plain'))

    if (data.index === index) {
      return
    }

    triggerReorderOnServer("<%= @project.slug %>", data.slug, index);
  }

  function triggerReorderOnServer(project_slug, sourceSlug, index) {
    const url = `/project/${project_slug}/curriculum`
    const params = {
      method: 'PUT',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({ sourceSlug, index }),
    };
    window.fetch(url, params)
      .then(_ => location.reload())
      .catch()
  }
</script>
