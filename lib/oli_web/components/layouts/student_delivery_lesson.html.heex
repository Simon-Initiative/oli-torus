<main role="main" class="relative flex flex-col">
  <div id="eventIntercept" phx-hook="LoadSurveyScripts">
    <div :if={Phoenix.LiveView.connected?(@socket) and assigns[:scripts_loaded]}>
      <script>
        window.userToken = "<%= @user_token %>";
      </script>

      <div class="absolute top-0 w-full">
        <div class="sticky top-0 z-[999]">
          <Components.Delivery.Layouts.header
            :if={@section}
            ctx={@ctx}
            is_admin={@is_admin}
            section={@section}
            preview_mode={@preview_mode}
            include_logo
          />
        </div>
        <div id="live_flash_container" class="sticky top-14 w-full mx-auto z-[99]">
          <%= if Phoenix.Flash.get(@flash, :info) do %>
            <div class="alert alert-info flex flex-row" role="alert">
              <div class="flex-1">
                {Phoenix.Flash.get(@flash, :info)}
              </div>

              <button
                type="button"
                class="close"
                data-bs-dismiss="alert"
                aria-label="Close"
                phx-click="lv:clear-flash"
                phx-value-key="info"
              >
                <i class="fa-solid fa-xmark fa-lg"></i>
              </button>
            </div>
          <% end %>

          <%= if Phoenix.Flash.get(@flash, :error) do %>
            <div class="alert alert-danger flex flex-row" role="alert">
              <div class="flex-1">
                {Phoenix.Flash.get(@flash, :error)}
              </div>
              <button
                type="button"
                class="close"
                data-bs-dismiss="alert"
                aria-label="Close"
                phx-click="lv:clear-flash"
                phx-value-key="error"
              >
                <i class="fa-solid fa-xmark fa-lg"></i>
              </button>
            </div>
          <% end %>
        </div>
        <div class="sticky top-[55px] z-50">
          <% back_url =
            if assigns[:request_path] in [nil, ""] and @current_page != nil,
              do: ~p"/sections/#{@section.slug}/learn?target_resource_id=#{@current_page["id"]}",
              else: assigns[:request_path] %>
          <div class="hidden md:block">
            <.back_arrow
              to={back_url}
              show_sidebar={assigns[:show_sidebar]}
              view={assigns[:view]}
            />
          </div>
          <div
            role="navigation"
            aria-label="Lesson actions"
            class="flex flex-row justify-between items-center px-4 sm:hidden bg-Surface-surface-secondary h-10"
          >
            <.link
              navigate={back_url}
              class="w-24 text-Text-text-high flex items-center gap-2"
            >
              <OliWeb.Icons.back_arrow /><span>Back</span>
            </.link>

            <button
              :if={
                @view in [:graded_page, :practice_page] and
                  assigns[:page_progress_state] == :in_progress and assigns[:annotations]
              }
              phx-click="toggle_notes_sidebar"
              aria-pressed={to_string(assigns[:active_sidebar_panel] == :notes)}
              class={[
                "flex flex-row items-center h-full px-3",
                if(assigns[:active_sidebar_panel] == :notes,
                  do: "border-b-2 border-Fill-Buttons-fill-primary"
                )
              ]}
            >
              <OliWeb.Delivery.Student.Lesson.Annotations.annotations_icon />
              <span>Notes</span>
            </button>

            <button
              :if={
                @view in [:graded_page, :practice_page] and
                  assigns[:page_progress_state] == :in_progress
              }
              phx-click="toggle_outline_sidebar"
              aria-pressed={to_string(assigns[:active_sidebar_panel] == :outline)}
              class={[
                "flex flex-row items-center h-full px-3",
                if(assigns[:active_sidebar_panel] == :outline,
                  do: "border-b-2 border-Fill-Buttons-fill-primary"
                )
              ]}
            >
              <OliWeb.Delivery.Student.Lesson.Components.OutlineComponent.outline_icon />
              <span class="whitespace-nowrap">Course Content</span>
            </button>
          </div>
        </div>
        <div
          :if={@section}
          id="page-content"
          phx-hook="PageContentHooks"
          class="flex flex-col justify-center items-start relative bg-Specially-Tokens-Background-lesson-page min-h-[100vh]"
        >
          <div
            :if={@view in [:graded_page, :practice_page] and @page_progress_state == :in_progress}
            id="offline_detector"
          >
            {react_component("Components.OfflineDetector")}
          </div>
          {@inner_content}
        </div>
      </div>

      <div class="flex flex-col">
        <div class="flex-1 flex flex-col min-h-0">
          <div
            :if={assigns[:paywall_summary] && OliWeb.LayoutView.show_pay_early(@paywall_summary)}
            id="pay_early_message"
            class="absolute z-50 system-banner flex flex-row alert alert-warning ml-32 m-6"
            role="alert"
          >
            {OliWeb.LayoutView.pay_early_message(@paywall_summary)}
            <div class="flex whitespace-nowrap items-center">
              <.link class="ml-8" href={Routes.payment_path(@socket, :guard, @section.slug)}>
                Pay Now
              </.link>
              <button
                class="ml-10 stroke-gray-500 hover:stroke-gray-400"
                phx-click={JS.hide(to: "#pay_early_message")}
              >
                <OliWeb.Icons.close />
              </button>
            </div>
          </div>

          <div
            :if={assigns[:page_context]}
            class={
              [
                "z-[999]",
                # Desktop: always visible, Mobile: only visible when "Notes" or "Course Content" are not open
                if(assigns[:active_sidebar_panel] in [:notes, :outline],
                  do: "hidden sm:block",
                  else: "block sm:block"
                )
              ]
            }
          >
            <Components.Delivery.Layouts.previous_next_nav
              current_page={@current_page}
              previous_page={@previous_page}
              next_page={@next_page}
              section_slug={@section.slug}
              pages_progress={@pages_progress}
              request_path={assigns[:request_path]}
              selected_view={assigns[:selected_view]}
            />
          </div>
        </div>

        <div
          :if={@section && !@page_context.page.graded}
          class={
            [
              "z-[999]",
              # Desktop: always visible, Mobile: only visible when "Notes" or "Course Content" are not open
              if(assigns[:active_sidebar_panel] in [:notes, :outline],
                do: "hidden sm:block",
                else: "block sm:block"
              )
            ]
          }
        >
          {live_render(@socket, OliWeb.Dialogue.WindowLive,
            session: %{
              "section_slug" => @section.slug,
              "resource_id" => @page_context.page.resource_id,
              "revision_id" => @page_context.page.id,
              "is_page" => true
            },
            id: "dialogue-window"
          )}
        </div>
      </div>
    </div>
  </div>
  <div class="h-0 z-[9999]">
    <OliWeb.Delivery.Student.Utils.proficiency_explanation_modal />
  </div>
</main>
