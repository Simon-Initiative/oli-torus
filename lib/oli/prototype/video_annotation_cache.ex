defmodule Oli.Prototype.VideoAnnotationCache do
  @moduledoc """
  GenServer for caching video annotations and transcripts generated by the authoring interface
  and accessed by the delivery interface.

  This is a prototype implementation for sharing data between authoring and delivery views.
  """

  use GenServer
  require Logger

  @name __MODULE__

  # Client API

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, %{}, name: @name)
  end

  @doc """
  Store annotations, transcripts, and video URL for a video
  """
  def store_annotations(video_id, annotations, transcripts, video_url) do
    GenServer.call(@name, {:store, video_id, annotations, transcripts, video_url})
  end

  @doc """
  Get annotations, transcripts, and video URL for a video
  """
  def get_annotations(video_id) do
    GenServer.call(@name, {:get, video_id})
  end

  @doc """
  Get the only cached video (for delivery interface)
  """
  def get_cached_video() do
    GenServer.call(@name, :get_cached_video)
  end

  @doc """
  List all cached video IDs
  """
  def list_videos() do
    GenServer.call(@name, :list_videos)
  end

  @doc """
  Clear cache for a specific video
  """
  def clear_video(video_id) do
    GenServer.call(@name, {:clear, video_id})
  end

  @doc """
  Clear all cached data
  """
  def clear_all() do
    GenServer.call(@name, :clear_all)
  end

  # Server Callbacks

  @impl true
  def init(state) do
    Logger.info("VideoAnnotationCache started")
    {:ok, state}
  end

  # Handle new store with video URL
  @impl true
  def handle_call({:store, video_id, annotations, transcripts, video_url}, _from, state) do
    data = %{
      annotations: annotations,
      transcripts: transcripts,
      video_url: video_url,
      stored_at: DateTime.utc_now()
    }

    new_state = Map.put(state, video_id, data)

    Logger.info(
      "Stored annotations for video #{video_id}: #{length(annotations)} questions, #{length(transcripts)} transcript segments, URL: #{video_url}"
    )

    {:reply, :ok, new_state}
  end

  # Handle old store without video URL (backward compatibility)
  @impl true
  def handle_call({:store, video_id, annotations, transcripts}, _from, state) do
    data = %{
      annotations: annotations,
      transcripts: transcripts,
      video_url: nil,
      stored_at: DateTime.utc_now()
    }

    new_state = Map.put(state, video_id, data)

    Logger.info(
      "Stored annotations for video #{video_id}: #{length(annotations)} questions, #{length(transcripts)} transcript segments"
    )

    {:reply, :ok, new_state}
  end

  @impl true
  def handle_call({:get, video_id}, _from, state) do
    case Map.get(state, video_id) do
      nil ->
        {:reply, {:error, :not_found}, state}

      %{annotations: annotations, transcripts: transcripts, video_url: video_url} ->
        {:reply, {:ok, annotations, transcripts, video_url}, state}

      # Handle backward compatibility for data stored without video_url
      %{annotations: annotations, transcripts: transcripts} ->
        {:reply, {:ok, annotations, transcripts, nil}, state}
    end
  end

  @impl true
  def handle_call(:get_cached_video, _from, state) do
    case Map.values(state) do
      [] ->
        {:reply, {:error, :not_found}, state}

      [data | _] ->
        # Return the first (and likely only) cached video
        case data do
          %{annotations: annotations, transcripts: transcripts, video_url: video_url} ->
            {:reply, {:ok, annotations, transcripts, video_url}, state}

          # Handle backward compatibility for data stored without video_url
          %{annotations: annotations, transcripts: transcripts} ->
            {:reply, {:ok, annotations, transcripts, nil}, state}
        end
    end
  end

  @impl true
  def handle_call(:list_videos, _from, state) do
    video_ids = Map.keys(state)
    {:reply, video_ids, state}
  end

  @impl true
  def handle_call({:clear, video_id}, _from, state) do
    new_state = Map.delete(state, video_id)
    Logger.info("Cleared cache for video #{video_id}")
    {:reply, :ok, new_state}
  end

  @impl true
  def handle_call(:clear_all, _from, _state) do
    Logger.info("Cleared all video annotation cache")
    {:reply, :ok, %{}}
  end
end
